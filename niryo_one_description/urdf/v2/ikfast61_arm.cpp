/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-02-23 22:35:43.164947
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.0237)*x3);
x13=((0.0055)*x7);
x14=((0.03)*x3);
x15=((1.0)*x0);
x16=((0.2215)*x7);
x17=((0.0237)*x6);
x18=((0.2215)*x3);
x19=((0.03)*x1);
x20=((0.0237)*x5);
x21=((0.21)*x3);
x22=((1.0)*x7);
x23=((0.0055)*x0);
x24=(x1*x2);
x25=(x6*x9);
x26=(x0*x2);
x27=(x6*x8);
x28=(x0*x4);
x29=(x3*x4);
x30=(x1*x4);
x31=(x2*x3);
x32=(x0*x6);
x33=((-1.0)*x5);
x34=(x4*x7);
x35=(x22*x6);
x36=((1.0)*x29);
x37=(x15*x29);
x38=(x22*x29);
x39=((((-1.0)*x36))+x24);
x40=(x15*(((((-1.0)*x31))+(((-1.0)*x30)))));
x41=(x22*(((((-1.0)*x31))+(((-1.0)*x30)))));
x42=(x41*x6);
x43=(x40*x5);
x44=(x40*x6);
x45=(((x5*x7))+x44);
x46=(x42+(((-1.0)*x15*x5)));
x47=(((x27*x39))+((x9*(((((-1.0)*x31))+(((-1.0)*x30)))))));
x48=(((x9*(((((-1.0)*x15*x24))+x37))))+((x45*x8)));
x49=(((x9*((x38+(((-1.0)*x22*x24))))))+((x46*x8)));
eerot[0]=(((x8*(((((-1.0)*x37))+((x0*x24))))))+((x45*x9)));
eerot[1]=(((x10*x48))+((x11*(((((-1.0)*x35))+x43)))));
eerot[2]=(((x11*x48))+((x10*((x35+((x33*x40)))))));
IkReal x50=((1.0)*x28);
IkReal x51=(x0*x24);
eetrans[0]=(((x8*(((((-1.0)*x12*x50))+(((0.0237)*x51))))))+(((-1.0)*x19*x50))+(((-1.0)*x0*x21))+(((-1.0)*x14*x26))+(((0.2215)*x51))+(((-1.0)*x18*x50))+((x8*(((((-0.0055)*x44))+(((-1.0)*x13*x5))))))+((x9*((((x23*x24))+(((-1.0)*x23*x29))))))+((x9*((((x17*x40))+((x20*x7)))))));
eerot[3]=(((x8*(((((-1.0)*x38))+((x24*x7))))))+((x46*x9)));
eerot[4]=(((x10*x49))+((x11*((((x41*x5))+x32)))));
eerot[5]=(((x11*x49))+((x10*(((((-1.0)*x32))+((x33*x41)))))));
IkReal x52=((1.0)*x29);
IkReal x53=((1.0)*x34);
IkReal x54=((1.0)*x7);
eetrans[1]=(((x8*((((x23*x5))+(((-0.0055)*x42))))))+(((-1.0)*x14*x2*x54))+(((-1.0)*x16*x52))+((x8*(((((0.0237)*x24*x7))+(((-1.0)*x12*x53))))))+(((-1.0)*x19*x53))+((x9*(((((-1.0)*x13*x52))+((x13*x24))))))+((x16*x24))+(((-1.0)*x21*x54))+((x9*(((((-1.0)*x0*x20))+((x17*x41)))))));
eerot[6]=(((x8*((x31+x30))))+((x25*x39)));
eerot[7]=(((x10*x47))+((x11*x39*x5)));
eerot[8]=(((x11*x47))+((x10*x5*(((((-1.0)*x24))+x36)))));
IkReal x55=((1.0)*x4);
eetrans[2]=((0.183)+((x18*x2))+(((-1.0)*x14*x55))+((x25*(((((0.0237)*x24))+(((-1.0)*x12*x55))))))+((x19*x2))+((x9*(((((0.0055)*x30))+(((0.0055)*x31))))))+((x27*(((((-0.0055)*x24))+(((0.0055)*x29))))))+((x8*(((((0.0237)*x30))+((x12*x2))))))+(((0.21)*x1))+(((0.2215)*x30)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=r02;
new_r02=r00;
new_px=((((-0.0237)*r00))+px);
new_r10=r11;
new_r11=r12;
new_r12=r10;
new_py=(py+(((-0.0237)*r10)));
new_r20=r21;
new_r21=r22;
new_r22=r20;
new_pz=((-0.183)+(((-0.0237)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x59=(rxp2_2+(((-0.0055)*r20)));
IkReal x60=((0.011)*r21);
IkReal x61=((0.0055)*r20);
IkReal x62=((49.0)*npy);
IkReal x63=((1000.0)*pp);
IkReal x64=((443.0)*npz);
IkReal x65=((120.0)*npy);
IkReal x66=((60.0)*npx);
IkReal x67=((71.0)*npy);
IkReal x68=((2.0)*rxp1_2);
IkReal x69=((120.0)*npz);
IkReal x70=((886.0)*npy);
IkReal x71=((1772.0)*npx);
IkReal x72=((1.0)*rxp2_2);
IkReal x73=((142.0)*npx);
IkReal x74=(rxp2_2+x61);
IkReal x75=((-60.0)*npx);
IkReal x76=((-2.0)*rxp1_2);
IkReal x77=((-4.0)*rxp0_2);
IkReal x78=((((-1.0)*x72))+x61);
IkReal x79=((-0.011)*r21);
IkReal x80=((-98.0)*npx);
IkReal x81=((5.5625)+x62);
IkReal x82=((((-1.0)*x72))+(((-1.0)*x61)));
IkReal x83=(x70+x69);
IkReal x84=(x63+x64);
IkReal x85=((6.2225)+x63+x67);
op[0]=x59;
op[1]=x59;
op[2]=x60;
op[3]=x60;
op[4]=x74;
op[5]=x74;
op[6]=((5.5625)+x63+(((-1.0)*x62))+(((-1.0)*x64)));
op[7]=x75;
op[8]=x80;
op[9]=x65;
op[10]=(x63+x81+(((-1.0)*x64)));
op[11]=x66;
op[12]=x75;
op[13]=(x85+(((-1.0)*x64)));
op[14]=x65;
op[15]=x73;
op[16]=x66;
op[17]=((6.2225)+x63+(((-1.0)*x67))+(((-1.0)*x64)));
op[18]=0;
op[19]=x59;
op[20]=0;
op[21]=x60;
op[22]=0;
op[23]=x74;
op[24]=x76;
op[25]=x76;
op[26]=x77;
op[27]=x77;
op[28]=x68;
op[29]=x68;
op[30]=((4.873)+x70+(((-1.0)*x69)));
op[31]=0;
op[32]=x71;
op[33]=0;
op[34]=((4.873)+(((-1.0)*x83)));
op[35]=0;
op[36]=0;
op[37]=((4.873)+x83);
op[38]=0;
op[39]=x71;
op[40]=0;
op[41]=((4.873)+(((-1.0)*x70))+x69);
op[42]=0;
op[43]=x76;
op[44]=0;
op[45]=x77;
op[46]=0;
op[47]=x68;
op[48]=x78;
op[49]=x78;
op[50]=x79;
op[51]=x79;
op[52]=x82;
op[53]=x82;
op[54]=((6.2225)+x67+x84);
op[55]=x75;
op[56]=x73;
op[57]=x65;
op[58]=((6.2225)+x84+(((-1.0)*x67)));
op[59]=x66;
op[60]=x75;
op[61]=((5.5625)+x84+(((-1.0)*x62)));
op[62]=x65;
op[63]=x80;
op[64]=x66;
op[65]=(x81+x84);
op[66]=0;
op[67]=x78;
op[68]=0;
op[69]=x79;
op[70]=0;
op[71]=x82;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x86=htj4*htj4;
CheckValue<IkReal> x87=IKPowWithIntegerCheck(((1.0)+x86),-1);
if(!x87.valid){
continue;
}
cj4array[numsolutions]=((x87.value)*(((1.0)+(((-1.0)*x86)))));
CheckValue<IkReal> x88=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x88.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x88.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x89=htj5*htj5;
CheckValue<IkReal> x90=IKPowWithIntegerCheck(((1.0)+x89),-1);
if(!x90.valid){
continue;
}
cj5array[numsolutions]=((x90.value)*(((1.0)+(((-1.0)*x89)))));
CheckValue<IkReal> x91=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x91.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x91.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x92=htj3*htj3;
CheckValue<IkReal> x93=IKPowWithIntegerCheck(((1.0)+x92),-1);
if(!x93.valid){
continue;
}
cj3array[numsolutions]=((x93.value)*(((1.0)+(((-1.0)*x92)))));
CheckValue<IkReal> x94=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x94.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x94.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x95=(cj5*rxp0_2);
IkReal x96=((2000.0)*cj3);
IkReal x97=((11.0)*cj3);
IkReal x98=(rxp1_2*sj5);
j0eval[0]=((((-181.818181818182)*x95))+(((181.818181818182)*x98))+(((-1.0)*r22)));
j0eval[1]=IKsign((x98+(((-1.0)*x95))+(((-0.0055)*r22))));
j0eval[2]=((IKabs((((py*x96))+((cj5*r11*x97))+((r10*sj5*x97)))))+(IKabs((((cj5*r01*x97))+((r00*sj5*x97))+((px*x96))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x99=(cj3*cj4);
IkReal x100=((1.0)*cj3*sj4);
IkReal x101=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
j0eval[0]=x101;
j0eval[1]=((IKabs(((((-1.0)*cj5*r01*x100))+(((-1.0)*r00*sj5*x100))+((r02*x99)))))+(IKabs((((r12*x99))+(((-1.0)*cj5*r11*x100))+(((-1.0)*r10*sj5*x100))))));
j0eval[2]=IKsign(x101);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x102=((181.818181818182)*cj4);
IkReal x103=(rxp0_2*sj5);
IkReal x104=((11.0)*sj3);
IkReal x105=(cj5*rxp1_2);
IkReal x106=(rxp2_2*sj4);
IkReal x107=((2000.0)*sj3);
IkReal x108=(cj5*r20*sj4);
IkReal x109=(r21*sj4*sj5);
j0eval[0]=((((181.818181818182)*x106))+x109+((x102*x105))+((x102*x103))+(((-1.0)*x108)));
j0eval[1]=IKsign(((((-0.0055)*x108))+x106+(((0.0055)*x109))+((cj4*x103))+((cj4*x105))));
j0eval[2]=((IKabs((((r10*sj5*x104))+((py*x107))+((cj5*r11*x104)))))+(IKabs((((px*x107))+((cj5*r01*x104))+((r00*sj5*x104))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x110=((0.0055)*cj5);
IkReal x111=(cj5*rxp0_2);
IkReal x112=((0.0055)*sj5);
IkReal x113=(rxp1_2*sj5);
j0eval[0]=((((-1.0)*r22))+(((-181.818181818182)*x111))+(((181.818181818182)*x113)));
j0eval[1]=IKsign((x113+(((-0.0055)*r22))+(((-1.0)*x111))));
j0eval[2]=((IKabs((((r10*x112))+((r11*x110))+py)))+(IKabs((((r00*x112))+((r01*x110))+px))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x114=(cj4*sj5);
IkReal x115=(cj4*cj5);
IkReal x116=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j0eval[0]=x116;
j0eval[1]=IKsign(x116);
j0eval[2]=((IKabs((((r10*x114))+((r11*x115))+((r12*sj4)))))+(IKabs((((r02*sj4))+((r00*x114))+((r01*x115))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x117=((1.0)*sj4*sj5);
IkReal x118=((1.0)*cj5*sj4);
IkReal x119=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
j0eval[0]=x119;
j0eval[1]=((IKabs(((((-1.0)*r11*x118))+(((-1.0)*r10*x117))+((cj4*r12)))))+(IKabs(((((-1.0)*r00*x117))+(((-1.0)*r01*x118))+((cj4*r02))))));
j0eval[2]=IKsign(x119);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x120=((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))));
IkReal x128 = x120;
if(IKabs(x128)==0){
continue;
}
IkReal x121=pow(x128,-0.5);
if((x120) < -0.00001)
continue;
IkReal x122=IKabs(IKsqrt(x120));
IkReal x123=((181.818181818182)*x121);
CheckValue<IkReal> x129=IKPowWithIntegerCheck(x122,-1);
if(!x129.valid){
continue;
}
IkReal x124=x129.value;
IkReal x125=(r22*x124);
if((((1.0)+(((-1.0)*(x125*x125))))) < -0.00001)
continue;
IkReal x126=IKsqrt(((1.0)+(((-1.0)*(x125*x125)))));
IkReal x127=(x123*x126);
if( (x125) < -1-IKFAST_SINCOS_THRESH || (x125) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x130 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x130.valid){
continue;
}
IkReal gconst6=((IKasin(x125))+(((-1.0)*(x130.value))));
IkReal gconst7=(((rxp0_2*x127))+((rxp1_2*x123*x125)));
IkReal gconst8=((((-1.0)*rxp0_2*x123*x125))+((rxp1_2*x127)));
CheckValue<IkReal> x131 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x131.valid){
continue;
}
if((((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(IKabs(IKsqrt(((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2)))))),-1);
if(!x132.valid){
continue;
}
if( ((r22*(x132.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x132.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x131.value)+(((-1.0)*(IKasin((r22*(x132.value))))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x133=((0.0055)*gconst8);
IkReal x134=((0.0055)*gconst7);
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal((py+((r11*x133))+((r10*x134)))),IkReal((((r00*x134))+((r01*x133))+px)),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
CheckValue<IkReal> x136=IKPowWithIntegerCheck(IKsign((((gconst7*rxp1_2))+((r22*(((((-1.0)*gconst7*x134))+(((-1.0)*gconst8*x133))))))+(((-1.0)*gconst8*rxp0_2)))),-1);
if(!x136.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x135.value)+(((1.5707963267949)*(x136.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x137=IKcos(j0);
IkReal x138=IKsin(j0);
IkReal x139=(gconst8*r01);
IkReal x140=(gconst7*r00);
IkReal x141=((1.0)*r01);
IkReal x142=((1.0)*r10);
IkReal x143=(sj4*x138);
IkReal x144=(gconst7*x137);
IkReal x145=((1.0)*x138);
IkReal x146=(gconst8*x138);
IkReal x147=(r12*x137);
IkReal x148=(gconst8*x137);
IkReal x149=((0.0055)*x138);
IkReal x150=(r11*x148);
evalcond[0]=(((r00*x148))+(((-1.0)*gconst7*r11*x145))+(((-1.0)*x141*x144))+((r10*x146)));
evalcond[1]=((1.0)+(((-1.0)*x142*x148))+((r00*x146))+((r11*x144))+(((-1.0)*gconst7*x138*x141)));
evalcond[2]=((((-1.0)*x140*x149))+(((0.0055)*r10*x144))+((py*x137))+(((-1.0)*px*x145))+(((-1.0)*x139*x149))+(((0.0055)*x150)));
evalcond[3]=(((x140*x143))+(((-1.0)*sj4*x142*x144))+(((-1.0)*sj4*x150))+(((-1.0)*cj4*r02*x145))+((cj4*x147))+((x139*x143)));
evalcond[4]=(((cj4*x150))+((cj4*r10*x144))+(((-1.0)*r02*x143))+(((-1.0)*cj4*x140*x145))+((sj4*x147))+(((-1.0)*cj4*x139*x145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x151=((1.0)*r22);
IkReal x152=(gconst8*r21);
IkReal x153=((1.0)*cj4);
IkReal x154=(gconst7*r20);
IkReal x155=x120;
IkReal x156=(((sj4*x154))+((sj4*x152))+(((-1.0)*cj4*x151)));
IkReal x168 = x155;
if(IKabs(x168)==0){
continue;
}
IkReal x157=pow(x168,-0.5);
if((x155) < -0.00001)
continue;
IkReal x158=IKabs(IKsqrt(x155));
IkReal x159=((181.818181818182)*x157);
CheckValue<IkReal> x169=IKPowWithIntegerCheck(x158,-1);
if(!x169.valid){
continue;
}
IkReal x160=x169.value;
IkReal x161=(((x153*x154))+((sj4*x151))+((x152*x153)));
IkReal x162=((1.0)+(((-1.0)*x161)));
IkReal x163=((-1.0)+(((-1.0)*x161)));
IkReal x164=(r22*x160);
if( (x164) < -1-IKFAST_SINCOS_THRESH || (x164) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
IkReal x165=((IKasin(x164))+(((-1.0)*(x170.value))));
if((((1.0)+(((-1.0)*x151*x160*x164)))) < -0.00001)
continue;
IkReal x166=IKsqrt(((1.0)+(((-1.0)*x151*x160*x164))));
IkReal x167=(x159*x166);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst7;
cj5=gconst8;
j5=x165;
IkReal gconst6=x165;
IkReal gconst7=(((rxp0_2*x167))+((rxp1_2*x159*x164)));
IkReal gconst8=((((-1.0)*rxp0_2*x159*x164))+((rxp1_2*x167)));
IkReal gconst12=x162;
IkReal gconst13=x163;
IkReal gconst14=x156;
IkReal gconst15=x156;
IkReal gconst16=x162;
IkReal gconst17=x163;
IkReal gconst18=x156;
IkReal gconst19=x156;
IkReal gconst20=x163;
IkReal gconst21=x162;
IkReal gconst22=x156;
IkReal gconst23=x156;
IkReal gconst24=x163;
IkReal gconst25=x162;
IkReal gconst26=x156;
IkReal gconst27=x156;
IkReal x171=gconst8*gconst8;
IkReal x172=r21*r21;
IkReal x173=sj4*sj4;
IkReal x174=cj4*cj4;
IkReal x175=gconst7*gconst7;
IkReal x176=r20*r20;
IkReal x177=r22*r22;
IkReal x178=((16.0)*x173);
IkReal x179=((16.0)*x174);
IkReal x180=((24.0)*x177);
IkReal x181=((4.0)*x173);
IkReal x182=((4.0)*x174);
IkReal x183=((24.0)*x173);
IkReal x184=(gconst7*gconst8*r20*r21);
IkReal x185=(x175*x176);
IkReal x186=(x171*x172);
IkReal x187=(x174*x186);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-24.0)*x174*x185))+(((-24.0)*x187))+(((-1.0)*x173*x180))+(((-1.0)*x183*x185))+(((-1.0)*x183*x186))+(((-48.0)*x174*x184))+(((-48.0)*x173*x184))+(((-1.0)*x174*x180)))))))+(IKabs(((16.0)+(((-1.0)*x178*x186))+(((-1.0)*x178*x185))+(((-1.0)*x177*x179))+(((-1.0)*x177*x178))+(((-32.0)*x174*x184))+(((-32.0)*x173*x184))+(((-1.0)*x179*x185))+(((-1.0)*x179*x186)))))+(((0.5)*(IKabs(((4.0)+(((-8.0)*x173*x184))+(((-8.0)*x174*x184))+(((-1.0)*x177*x182))+(((-1.0)*x177*x181))+(((-1.0)*x182*x185))+(((-1.0)*x182*x186))+(((-1.0)*x181*x186))+(((-1.0)*x181*x185))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x188=((16.0)*gconst24);
IkReal x189=((16.0)*gconst21);
IkReal x190=((16.0)*gconst16);
IkReal x191=((16.0)*gconst13);
IkReal x192=(gconst12*gconst23);
IkReal x193=(gconst25*gconst26);
IkReal x194=(gconst14*gconst17);
IkReal x195=((1.0)*gconst18);
IkReal x196=((4.0)*gconst13);
IkReal x197=((2.0)*gconst22);
IkReal x198=(gconst16*gconst21);
IkReal x199=(gconst24*gconst27);
IkReal x200=((1.0)*gconst20);
IkReal x201=(gconst13*gconst17);
IkReal x202=((2.0)*gconst16);
IkReal x203=(gconst15*gconst20);
IkReal x204=((2.0)*gconst13);
IkReal x205=((2.0)*gconst26);
IkReal x206=(gconst13*gconst25);
IkReal x207=(gconst13*gconst14);
IkReal x208=(gconst17*gconst18);
IkReal x209=(gconst12*gconst19);
IkReal x210=(gconst15*gconst24);
IkReal x211=((2.0)*gconst21);
IkReal x212=(gconst16*gconst27);
IkReal x213=((4.0)*gconst12);
IkReal x214=((2.0)*gconst19);
IkReal x215=((2.0)*gconst12);
IkReal x216=(gconst19*gconst22);
IkReal x217=(gconst13*gconst22);
IkReal x218=(gconst17*gconst21);
IkReal x219=((1.0)*gconst26);
IkReal x220=(gconst18*gconst25);
IkReal x221=(gconst19*gconst24);
IkReal x222=(gconst21*gconst25);
IkReal x223=((1.0)*gconst15);
IkReal x224=(gconst21*gconst22);
IkReal x225=((8.0)*gconst23);
IkReal x226=(gconst20*gconst23);
IkReal x227=(gconst12*gconst15);
IkReal x228=((2.0)*gconst24);
IkReal x229=((8.0)*gconst18);
IkReal x230=(gconst16*gconst19);
IkReal x231=(gconst17*gconst26);
IkReal x232=((2.0)*gconst25);
IkReal x233=(gconst14*gconst21);
IkReal x234=((4.0)*gconst20);
IkReal x235=((2.0)*gconst20);
IkReal x236=(gconst13*gconst16);
IkReal x237=(gconst21*gconst24);
IkReal x238=(gconst14*gconst24);
IkReal x239=((8.0)*gconst26);
IkReal x240=(gconst14*gconst25);
IkReal x241=(gconst13*gconst24);
IkReal x242=((16.0)*gconst26);
IkReal x243=((16.0)*gconst18);
IkReal x244=((4.0)*x237);
IkReal x245=(gconst24*x225);
IkReal x246=(gconst21*x239);
IkReal x247=((4.0)*x198);
IkReal x248=(gconst24*x196);
IkReal x249=(gconst21*x229);
IkReal x250=((8.0)*x210);
IkReal x251=(gconst13*x239);
IkReal x252=(gconst16*x225);
IkReal x253=(gconst16*x196);
IkReal x254=((8.0)*gconst15*gconst16);
IkReal x255=(gconst13*x229);
IkReal x256=(gconst17*x235);
IkReal x257=(x190+x253);
IkReal x258=(x189+x244);
IkReal x259=(x246+x245);
IkReal x260=(x247+x248);
IkReal x261=(x254+x255);
IkReal x262=(x250+x251+x252+x249);
op[0]=((((-1.0)*x193*x224))+((x193*x226))+((x199*x224))+(((-1.0)*gconst23*x199*x200))+(((-1.0)*x244)));
op[1]=(((x199*x211))+(((-1.0)*x197*x237))+((x226*x232))+x259+((x226*x228))+(((-1.0)*x193*x235))+(((-1.0)*x193*x211))+((x199*x235))+(((-1.0)*x197*x222)));
op[2]=((((-1.0)*x193*x233))+(((-4.0)*x222))+((gconst22*gconst27*x198))+((x199*x217))+(((-1.0)*x188))+(((-1.0)*gconst23*x200*x221))+((x226*x231))+(((-1.0)*gconst23*x200*x212))+x258+((x220*x226))+(((-1.0)*x193*x217))+((x192*x193))+(((-1.0)*gconst22*x218*x219))+(((-1.0)*gconst25*x234))+(((-1.0)*gconst24*x234))+(((-1.0)*gconst22*x195*x222))+(((-1.0)*x260))+((x216*x237))+(((-1.0)*gconst15*x199*x200))+((x193*x203))+(((-1.0)*gconst23*x242))+((x199*x233))+(((-1.0)*x192*x199)));
op[3]=(((x192*x228))+((x199*x215))+(((32.0)*gconst26))+(((-1.0)*x197*x206))+(((-1.0)*gconst17*gconst20*x205))+((x192*x232))+((x202*x226))+(((-1.0)*x197*x198))+((x203*x228))+(((-1.0)*x205*x218))+(((-1.0)*x197*x241))+(((-1.0)*x211*x238))+x262+(((-32.0)*gconst23))+(((2.0)*gconst17*x226))+(((-1.0)*x220*x235))+((x203*x232))+(((-1.0)*x193*x204))+(((-1.0)*x211*x240))+((gconst20*gconst24*x214))+(((-1.0)*x197*x218))+(((-1.0)*x211*x220))+(((2.0)*gconst27*x198))+((gconst20*gconst27*x202))+((x199*x204))+(((-1.0)*x193*x215))+(((-1.0)*x259))+((x211*x221)));
op[4]=((64.0)+((x192*x220))+(((-1.0)*x193*x207))+(((-1.0)*gconst21*x194*x219))+(((-1.0)*gconst25*x213))+(((-1.0)*gconst25*x196))+(((-1.0)*gconst12*x199*x223))+(((-1.0)*gconst23*x200*x230))+((x208*x226))+(((-1.0)*gconst17*x234))+((x192*x231))+((x193*x227))+((x198*x216))+(((-1.0)*gconst14*x195*x222))+((x203*x220))+((x216*x241))+x191+x188+(((-1.0)*gconst15*x242))+(((-1.0)*gconst22*x195*x218))+(((-1.0)*x192*x212))+x260+((gconst14*gconst27*x198))+(((-1.0)*gconst16*x234))+((x212*x217))+((x203*x231))+(((-1.0)*gconst22*x195*x206))+(((-1.0)*x192*x221))+(((-4.0)*x218))+((x221*x233))+(((-1.0)*gconst15*x200*x212))+(((-1.0)*gconst22*x201*x219))+((x199*x207))+(((-1.0)*gconst23*x243))+(((-1.0)*gconst19*x200*x210))+(((-1.0)*gconst24*x213))+(((-1.0)*x258))+(((-1.0)*x257)));
op[5]=(((gconst19*gconst20*x202))+(((-1.0)*x215*x220))+(((-1.0)*x204*x238))+(((2.0)*gconst17*x192))+(((-1.0)*x201*x205))+((x210*x215))+(((32.0)*gconst18))+(((-1.0)*x197*x201))+((x192*x202))+((x209*x228))+((gconst12*gconst27*x202))+(((-1.0)*x204*x240))+(((-1.0)*x197*x236))+((x198*x214))+((gconst15*gconst25*x215))+((x204*x221))+x261+(((-1.0)*x208*x235))+(((-32.0)*gconst15))+((x202*x203))+((gconst13*gconst27*x202))+(((2.0)*gconst17*x203))+(((-1.0)*gconst12*gconst17*x205))+(((-1.0)*x194*x211))+(((-1.0)*x262))+(((-1.0)*x208*x211))+(((-2.0)*gconst14*x198))+(((-1.0)*x204*x220)));
op[6]=((((-1.0)*gconst15*x200*x230))+(((-1.0)*x209*x210))+(((-1.0)*gconst16*x213))+((x207*x221))+((gconst14*gconst19*x198))+((x192*x208))+(((-1.0)*x191))+((x207*x212))+(((-1.0)*gconst21*x194*x195))+(((-1.0)*x192*x230))+(((-1.0)*gconst13*x194*x219))+(((-1.0)*gconst17*x196))+(((-1.0)*gconst12*x212*x223))+(((-1.0)*gconst15*x243))+x257+((x220*x227))+(((-1.0)*gconst22*x195*x201))+((x227*x231))+(((-1.0)*gconst17*x213))+((x203*x208))+(((-1.0)*gconst14*x195*x206))+(((-1.0)*x260))+((x216*x236)));
op[7]=((((-1.0)*x194*x204))+((gconst13*gconst19*x202))+((gconst15*gconst17*x215))+(((-2.0)*gconst18*x201))+((x202*x227))+(((-1.0)*x202*x207))+((x202*x209))+(((-1.0)*x261))+(((-1.0)*x208*x215)));
op[8]=((((-1.0)*gconst13*x194*x195))+((x208*x227))+(((-1.0)*gconst16*x209*x223))+((x207*x230))+(((-1.0)*x253)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x263=(cj1*cj4);
IkReal x264=(gconst8*r21);
IkReal x265=(gconst7*r20);
IkReal x266=(r22*sj1);
IkReal x267=((1.0)*sj4);
IkReal x268=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*cj1*x265*x267))+(((-1.0)*cj1*x264*x267))+((r22*x263))+(((-1.0)*x265*x268))+(((-1.0)*x266*x267))+(((-1.0)*x264*x268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x264*x267))+((cj4*x266))+((x263*x265))+((x263*x264))+(((-1.0)*sj1*x265*x267))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x265*x267))+(((-1.0)*cj1*x264*x267))+((r22*x263))+(((-1.0)*x265*x268))+(((-1.0)*x266*x267))+(((-1.0)*x264*x268))))+IKsqr(((((-1.0)*sj1*x264*x267))+((cj4*x266))+((x263*x265))+((x263*x264))+(((-1.0)*sj1*x265*x267))+((cj1*r22*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x265*x267))+(((-1.0)*cj1*x264*x267))+((r22*x263))+(((-1.0)*x265*x268))+(((-1.0)*x266*x267))+(((-1.0)*x264*x268))), ((((-1.0)*sj1*x264*x267))+((cj4*x266))+((x263*x265))+((x263*x264))+(((-1.0)*sj1*x265*x267))+((cj1*r22*sj4))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x269=IKcos(j2);
IkReal x270=IKsin(j2);
IkReal x271=((1.0)*cj4);
IkReal x272=((1.0)*sj0);
IkReal x273=(gconst7*r20);
IkReal x274=(gconst8*r21);
IkReal x275=(cj0*r02);
IkReal x276=((0.0055)*sj0);
IkReal x277=(gconst8*r11);
IkReal x278=(gconst7*r10);
IkReal x279=(sj0*sj4);
IkReal x280=((1.0)*sj4);
IkReal x281=(cj1*x269);
IkReal x282=(sj1*x270);
IkReal x283=(cj0*gconst7*r00);
IkReal x284=(cj1*x270);
IkReal x285=(sj1*x269);
IkReal x286=(cj0*gconst8*r01);
IkReal x287=((1.0)*x282);
evalcond[0]=(x285+x284+(((-1.0)*r22*x271))+((sj4*x273))+((sj4*x274)));
evalcond[1]=((((-1.0)*x271*x273))+(((-1.0)*x271*x274))+(((-1.0)*r22*x280))+x281+(((-1.0)*x287)));
evalcond[2]=((((0.21)*cj1))+(((0.2215)*x285))+(((0.2215)*x284))+(((-0.0055)*x273))+(((-0.0055)*x274))+(((-0.03)*x282))+(((-1.0)*pz))+(((0.03)*x281)));
evalcond[3]=((((-1.0)*x271*x275))+(((-1.0)*r12*sj0*x271))+x281+((x277*x279))+(((-1.0)*x287))+((x278*x279))+((sj4*x283))+((sj4*x286)));
evalcond[4]=((((-1.0)*r12*sj4*x272))+(((-1.0)*sj0*x271*x278))+(((-1.0)*sj0*x271*x277))+(((-1.0)*x285))+(((-1.0)*x284))+(((-1.0)*x271*x286))+(((-1.0)*x271*x283))+(((-1.0)*x275*x280)));
evalcond[5]=((((0.2215)*x281))+(((-0.0055)*x286))+(((-0.0055)*x283))+(((-0.03)*x285))+(((-0.03)*x284))+(((-0.2215)*x282))+(((-0.21)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*x276*x278))+(((-1.0)*x276*x277))+(((-1.0)*py*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x288=((181.818181818182)*rxp1_2);
IkReal x289=((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))));
IkReal x296 = x289;
if(IKabs(x296)==0){
continue;
}
IkReal x290=pow(x296,-0.5);
if((x289) < -0.00001)
continue;
IkReal x291=IKabs(IKsqrt(x289));
CheckValue<IkReal> x297=IKPowWithIntegerCheck(x291,-1);
if(!x297.valid){
continue;
}
IkReal x292=x297.value;
IkReal x293=(r22*x292);
IkReal x294=((181.818181818182)*rxp0_2*x290);
if((((1.0)+(((-1.0)*(x293*x293))))) < -0.00001)
continue;
IkReal x295=IKsqrt(((1.0)+(((-1.0)*(x293*x293)))));
if( (x293) < -1-IKFAST_SINCOS_THRESH || (x293) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x288),IKFAST_ATAN2_MAGTHRESH);
if(!x298.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(x293))))+(((-1.0)*(x298.value))));
IkReal gconst10=(((x288*x290*x293))+(((-1.0)*x294*x295)));
IkReal gconst11=((((-1.0)*x293*x294))+(((-1.0)*x288*x290*x295)));
if((((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(IKabs(IKsqrt(((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2)))))),-1);
if(!x299.valid){
continue;
}
if( ((r22*(x299.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x299.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x300 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x300.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x299.value))))+(x300.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x301=((0.0055)*gconst11);
IkReal x302=((0.0055)*gconst10);
CheckValue<IkReal> x303 = IKatan2WithCheck(IkReal((((r11*x301))+py+((r10*x302)))),IkReal((px+((r01*x301))+((r00*x302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*gconst10*x302))+(((-1.0)*gconst11*x301))))))+(((-1.0)*gconst11*rxp0_2))+((gconst10*rxp1_2)))),-1);
if(!x304.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x303.value)+(((1.5707963267949)*(x304.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x305=IKsin(j0);
IkReal x306=IKcos(j0);
IkReal x307=(gconst11*r10);
IkReal x308=(gconst10*r11);
IkReal x309=(gconst10*r10);
IkReal x310=(gconst11*r00);
IkReal x311=(gconst11*r11);
IkReal x312=(gconst11*r01);
IkReal x313=((1.0)*x306);
IkReal x314=((1.0)*x305);
IkReal x315=(cj4*x306);
IkReal x316=((0.0055)*x306);
IkReal x317=(gconst10*x313);
IkReal x318=(gconst10*r00*x305);
evalcond[0]=((((-1.0)*r01*x317))+(((-1.0)*x308*x314))+((x306*x310))+((x305*x307)));
evalcond[1]=((1.0)+((x305*x310))+(((-1.0)*gconst10*r01*x314))+(((-1.0)*x307*x313))+((x306*x308)));
evalcond[2]=((((-0.0055)*x318))+((x309*x316))+((x311*x316))+(((-0.0055)*x305*x312))+((py*x306))+(((-1.0)*px*x314)));
evalcond[3]=((((-1.0)*sj4*x309*x313))+((sj4*x305*x312))+(((-1.0)*cj4*r02*x314))+((sj4*x318))+(((-1.0)*sj4*x311*x313))+((r12*x315)));
evalcond[4]=((((-1.0)*cj4*x312*x314))+(((-1.0)*cj4*gconst10*r00*x314))+((x309*x315))+((x311*x315))+(((-1.0)*r02*sj4*x314))+((r12*sj4*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x319=((1.0)*cj4);
IkReal x320=(gconst10*r20);
IkReal x321=((181.818181818182)*rxp1_2);
IkReal x322=(gconst11*r21);
IkReal x323=x289;
IkReal x324=(((sj4*x322))+((sj4*x320))+(((-1.0)*r22*x319)));
IkReal x335 = x323;
if(IKabs(x335)==0){
continue;
}
IkReal x325=pow(x335,-0.5);
if((x323) < -0.00001)
continue;
IkReal x326=IKabs(IKsqrt(x323));
CheckValue<IkReal> x336=IKPowWithIntegerCheck(x326,-1);
if(!x336.valid){
continue;
}
IkReal x327=x336.value;
IkReal x328=((((1.0)*r22*sj4))+((x319*x322))+((x319*x320)));
IkReal x329=((1.0)+(((-1.0)*x328)));
IkReal x330=((-1.0)+(((-1.0)*x328)));
IkReal x331=(r22*x327);
IkReal x332=((181.818181818182)*rxp0_2*x325);
if((((1.0)+(((-1.0)*(x331*x331))))) < -0.00001)
continue;
IkReal x333=IKsqrt(((1.0)+(((-1.0)*(x331*x331)))));
CheckValue<IkReal> x337 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x321),IKFAST_ATAN2_MAGTHRESH);
if(!x337.valid){
continue;
}
if( (x331) < -1-IKFAST_SINCOS_THRESH || (x331) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x334=((((1.0)*(x337.value)))+(((1.0)*(IKasin(x331)))));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x334)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x334)));
IkReal gconst10=(((x321*x325*x331))+(((-1.0)*x332*x333)));
IkReal gconst11=((((-1.0)*x331*x332))+(((-1.0)*x321*x325*x333)));
IkReal gconst44=x329;
IkReal gconst45=x330;
IkReal gconst46=x324;
IkReal gconst47=x324;
IkReal gconst48=x329;
IkReal gconst49=x330;
IkReal gconst50=x324;
IkReal gconst51=x324;
IkReal gconst52=x330;
IkReal gconst53=x329;
IkReal gconst54=x324;
IkReal gconst55=x324;
IkReal gconst56=x330;
IkReal gconst57=x329;
IkReal gconst58=x324;
IkReal gconst59=x324;
IkReal x338=sj4*sj4;
IkReal x339=cj4*cj4;
IkReal x340=gconst10*gconst10;
IkReal x341=r20*r20;
IkReal x342=r22*r22;
IkReal x343=gconst11*gconst11;
IkReal x344=r21*r21;
IkReal x345=((16.0)*x338);
IkReal x346=((24.0)*x342);
IkReal x347=((4.0)*x338);
IkReal x348=((24.0)*x338);
IkReal x349=(x340*x341);
IkReal x350=(gconst10*gconst11*r20*r21);
IkReal x351=(x339*x342);
IkReal x352=(x343*x344);
IkReal x353=(x339*x352);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-1.0)*x348*x352))+(((-1.0)*x348*x349))+(((-48.0)*x338*x350))+(((-1.0)*x338*x346))+(((-24.0)*x339*x349))+(((-24.0)*x353))+(((-48.0)*x339*x350))+(((-1.0)*x339*x346)))))))+(IKabs(((16.0)+(((-16.0)*x353))+(((-16.0)*x351))+(((-1.0)*x345*x352))+(((-32.0)*x338*x350))+(((-32.0)*x339*x350))+(((-1.0)*x345*x349))+(((-16.0)*x339*x349))+(((-1.0)*x342*x345)))))+(((0.5)*(IKabs(((4.0)+(((-4.0)*x351))+(((-4.0)*x353))+(((-8.0)*x339*x350))+(((-4.0)*x339*x349))+(((-1.0)*x347*x349))+(((-1.0)*x347*x352))+(((-8.0)*x338*x350))+(((-1.0)*x342*x347))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x354=((16.0)*gconst56);
IkReal x355=((16.0)*gconst53);
IkReal x356=((16.0)*gconst48);
IkReal x357=((16.0)*gconst45);
IkReal x358=((2.0)*gconst44);
IkReal x359=(gconst48*gconst59);
IkReal x360=(gconst55*gconst58);
IkReal x361=(gconst44*gconst57);
IkReal x362=(gconst49*gconst52);
IkReal x363=(gconst55*gconst57);
IkReal x364=((8.0)*gconst47);
IkReal x365=(gconst51*gconst56);
IkReal x366=(gconst45*gconst54);
IkReal x367=((2.0)*gconst52);
IkReal x368=(gconst50*gconst57);
IkReal x369=((2.0)*gconst58);
IkReal x370=(gconst48*gconst51);
IkReal x371=(gconst47*gconst50);
IkReal x372=(gconst44*gconst49);
IkReal x373=((2.0)*gconst45);
IkReal x374=(gconst49*gconst53);
IkReal x375=((1.0)*gconst46);
IkReal x376=(gconst55*gconst56);
IkReal x377=(gconst53*gconst54);
IkReal x378=(gconst57*gconst58);
IkReal x379=((1.0)*gconst52);
IkReal x380=(gconst56*gconst59);
IkReal x381=((1.0)*gconst44);
IkReal x382=(gconst49*gconst58);
IkReal x383=((1.0)*gconst54);
IkReal x384=((4.0)*gconst56);
IkReal x385=((8.0)*gconst58);
IkReal x386=((2.0)*gconst56);
IkReal x387=(gconst46*gconst53);
IkReal x388=((2.0)*gconst53);
IkReal x389=(gconst49*gconst50);
IkReal x390=(gconst45*gconst49);
IkReal x391=(gconst47*gconst48);
IkReal x392=(gconst47*gconst57);
IkReal x393=(gconst45*gconst46);
IkReal x394=((2.0)*gconst48);
IkReal x395=(gconst53*gconst57);
IkReal x396=((4.0)*gconst48);
IkReal x397=((4.0)*gconst57);
IkReal x398=(gconst47*gconst56);
IkReal x399=((2.0)*gconst57);
IkReal x400=(gconst47*gconst58);
IkReal x401=(gconst50*gconst55);
IkReal x402=(gconst48*gconst55);
IkReal x403=((8.0)*gconst50);
IkReal x404=(gconst47*gconst52);
IkReal x405=(gconst53*x384);
IkReal x406=(gconst53*x385);
IkReal x407=((8.0)*x376);
IkReal x408=(gconst53*x396);
IkReal x409=(gconst45*x384);
IkReal x410=(gconst45*x385);
IkReal x411=((8.0)*x402);
IkReal x412=(gconst56*x364);
IkReal x413=(gconst53*x403);
IkReal x414=(gconst45*x396);
IkReal x415=(gconst45*x403);
IkReal x416=(gconst48*x364);
IkReal x417=(gconst50*x388);
IkReal x418=((2.0)*x387);
IkReal x419=(x365*x381);
IkReal x420=(x355+x405);
IkReal x421=(x356+x414);
IkReal x422=(x407+x406);
IkReal x423=(x416+x415);
IkReal x424=(x354+x409+x408);
IkReal x425=(x412+x413+x410+x411);
op[0]=(((x377*x380))+(((-1.0)*x377*x378))+((gconst52*gconst57*x360))+(((-1.0)*gconst59*x376*x379))+(((-1.0)*x405)));
op[1]=(((x367*x376))+(((-1.0)*x377*x399))+(((-1.0)*x367*x378))+x422+((x367*x380))+(((-1.0)*x369*x395))+(((-1.0)*x377*x386))+((x380*x388))+((x363*x367)));
op[2]=((((-1.0)*gconst47*x379*x380))+(((-16.0)*x360))+(((-1.0)*x366*x378))+(((-1.0)*x424))+(((-1.0)*gconst55*x359*x379))+((x365*x377))+(((-1.0)*gconst58*x374*x383))+(((-1.0)*gconst59*x376*x381))+((gconst50*gconst52*x363))+(((-1.0)*gconst52*x384))+((x359*x377))+x420+(((-1.0)*gconst53*x375*x378))+((x366*x380))+((x360*x362))+((x360*x361))+((x380*x387))+(((-1.0)*gconst52*x397))+(((-1.0)*gconst55*x365*x379))+(((-4.0)*x395))+((x378*x404))+(((-1.0)*x368*x377)));
op[3]=((((-1.0)*x387*x399))+((x358*x363))+(((-1.0)*x362*x369))+((x367*x392))+((x367*x398))+((x358*x376))+(((-1.0)*gconst45*gconst57*x369))+((x373*x380))+((x359*x388))+(((-1.0)*x422))+(((-1.0)*x377*x394))+(((2.0)*gconst55*x362))+(((-1.0)*x358*x378))+(((-1.0)*x367*x368))+((x359*x367))+((x365*x367))+((x367*x402))+(((-32.0)*gconst55))+x425+(((-1.0)*x366*x399))+(((-1.0)*x386*x387))+(((32.0)*gconst58))+((x365*x388))+(((-1.0)*x369*x374))+(((-2.0)*gconst54*x374))+((x358*x380))+(((-1.0)*x368*x388))+(((-1.0)*x366*x386)));
op[4]=((64.0)+((x370*x377))+(((-1.0)*gconst47*x380*x381))+((x359*x387))+((x361*x400))+((x361*x401))+((x362*x400))+((x362*x401))+(((-1.0)*x420))+(((-1.0)*x421))+((x380*x393))+(((-1.0)*x366*x368))+((x368*x404))+((x359*x366))+((x365*x366))+(((-1.0)*gconst45*x375*x378))+(((-1.0)*gconst45*x397))+(((-1.0)*gconst53*x368*x375))+x357+(((-16.0)*x400))+(((-16.0)*x401))+x424+(((-1.0)*gconst55*x370*x379))+(((-1.0)*gconst47*x365*x379))+((x365*x387))+(((-1.0)*gconst44*x384))+(((-1.0)*gconst50*x374*x383))+(((-1.0)*x366*x382))+(((-1.0)*gconst47*x359*x379))+(((-1.0)*gconst55*x359*x381))+(((-4.0)*x361))+(((-4.0)*x362))+(((-1.0)*gconst58*x374*x375))+(((-1.0)*gconst52*x396))+(((-4.0)*x374))+((x360*x372))+(((-1.0)*gconst55*x419)));
op[5]=((((-1.0)*x358*x382))+(((-1.0)*x387*x394))+((x367*x370))+((x358*x365))+(((-1.0)*x368*x373))+((x358*x402))+((x367*x391))+(((-1.0)*x425))+((x358*x392))+((x358*x398))+(((-32.0)*gconst47))+((x370*x388))+(((-1.0)*x358*x368))+(((-1.0)*gconst46*gconst56*x373))+((x365*x373))+(((-1.0)*gconst46*gconst57*x373))+(((-2.0)*gconst46*x374))+((x359*x373))+x423+(((-1.0)*x366*x394))+(((-2.0)*gconst49*x366))+(((-2.0)*gconst50*x362))+((x358*x359))+(((32.0)*gconst50))+(((-2.0)*gconst50*x374))+(((2.0)*gconst47*x362))+(((-1.0)*x369*x390))+((gconst49*gconst55*x358)));
op[6]=((((-1.0)*gconst47*x359*x381))+((x372*x400))+((x372*x401))+(((-16.0)*x371))+(((-1.0)*gconst55*x370*x381))+((x365*x393))+(((-1.0)*x357))+(((-1.0)*gconst44*x396))+((x370*x387))+((x366*x370))+x421+((x359*x393))+(((-1.0)*gconst45*x375*x382))+(((-1.0)*x366*x389))+(((-1.0)*gconst47*x419))+(((-4.0)*x372))+(((-1.0)*gconst50*x374*x375))+(((-1.0)*x408))+(((-1.0)*x409))+(((-1.0)*gconst47*x370*x379))+((x361*x371))+(((-4.0)*x390))+((x362*x371))+(((-1.0)*gconst45*x368*x375)));
op[7]=((((-1.0)*x358*x389))+(((-1.0)*x373*x389))+((x370*x373))+((x358*x370))+(((-1.0)*x423))+((x358*x391))+(((-1.0)*gconst46*gconst49*x373))+(((-1.0)*gconst46*gconst48*x373))+((gconst47*gconst49*x358)));
op[8]=((((-1.0)*gconst47*x370*x381))+(((-1.0)*gconst45*x375*x389))+(((-1.0)*x414))+((x370*x393))+((x371*x372)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x426=(cj1*cj4);
IkReal x427=(gconst11*r21);
IkReal x428=((1.0)*sj4);
IkReal x429=(r22*sj1);
IkReal x430=(gconst10*r20);
IkReal x431=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x430*x431))+(((-1.0)*x427*x431))+(((-1.0)*cj1*x428*x430))+(((-1.0)*x428*x429))+((r22*x426))+(((-1.0)*cj1*x427*x428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x426*x427))+(((-1.0)*sj1*x428*x430))+((x426*x430))+(((-1.0)*sj1*x427*x428))+((cj4*x429))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x430*x431))+(((-1.0)*x427*x431))+(((-1.0)*cj1*x428*x430))+(((-1.0)*x428*x429))+((r22*x426))+(((-1.0)*cj1*x427*x428))))+IKsqr((((x426*x427))+(((-1.0)*sj1*x428*x430))+((x426*x430))+(((-1.0)*sj1*x427*x428))+((cj4*x429))+((cj1*r22*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x430*x431))+(((-1.0)*x427*x431))+(((-1.0)*cj1*x428*x430))+(((-1.0)*x428*x429))+((r22*x426))+(((-1.0)*cj1*x427*x428))), (((x426*x427))+(((-1.0)*sj1*x428*x430))+((x426*x430))+(((-1.0)*sj1*x427*x428))+((cj4*x429))+((cj1*r22*sj4))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x432=IKcos(j2);
IkReal x433=IKsin(j2);
IkReal x434=(gconst10*r20);
IkReal x435=(sj0*sj4);
IkReal x436=((1.0)*r12);
IkReal x437=(gconst11*r11);
IkReal x438=((1.0)*cj4);
IkReal x439=(cj0*r02);
IkReal x440=(gconst10*r10);
IkReal x441=(gconst11*r21);
IkReal x442=((0.0055)*sj0);
IkReal x443=((1.0)*sj4);
IkReal x444=(cj1*x432);
IkReal x445=(sj1*x433);
IkReal x446=(cj0*gconst11*r01);
IkReal x447=(cj1*x433);
IkReal x448=(cj0*gconst10*r00);
IkReal x449=(sj1*x432);
IkReal x450=((1.0)*x445);
evalcond[0]=(((sj4*x434))+((sj4*x441))+x449+x447+(((-1.0)*r22*x438)));
evalcond[1]=((((-1.0)*x438*x441))+(((-1.0)*x434*x438))+(((-1.0)*x450))+x444+(((-1.0)*r22*x443)));
evalcond[2]=((((-0.0055)*x434))+(((0.03)*x444))+(((0.21)*cj1))+(((-1.0)*pz))+(((0.2215)*x449))+(((0.2215)*x447))+(((-0.03)*x445))+(((-0.0055)*x441)));
evalcond[3]=(((x435*x440))+((sj4*x448))+((sj4*x446))+(((-1.0)*x438*x439))+(((-1.0)*cj4*sj0*x436))+(((-1.0)*x450))+x444+((x435*x437)));
evalcond[4]=((((-1.0)*x438*x448))+(((-1.0)*x438*x446))+(((-1.0)*x435*x436))+(((-1.0)*x447))+(((-1.0)*x449))+(((-1.0)*x439*x443))+(((-1.0)*sj0*x437*x438))+(((-1.0)*sj0*x438*x440)));
evalcond[5]=((((-1.0)*x437*x442))+(((-0.2215)*x445))+(((0.2215)*x444))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-0.03)*x449))+(((-0.03)*x447))+(((-1.0)*x440*x442))+(((-1.0)*cj0*px))+(((-0.0055)*x446))+(((-0.0055)*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x451=((1.0)*sj4*sj5);
IkReal x452=((1.0)*cj5*sj4);
CheckValue<IkReal> x453 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x451))+(((-1.0)*r11*x452))+((cj4*r12)))),IkReal(((((-1.0)*r00*x451))+(((-1.0)*r01*x452))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))),-1);
if(!x454.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x453.value)+(((1.5707963267949)*(x454.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x455=IKcos(j0);
IkReal x456=IKsin(j0);
IkReal x457=(r11*sj5);
IkReal x458=((1.0)*sj4);
IkReal x459=(r00*sj5);
IkReal x460=(r01*sj5);
IkReal x461=((1.0)*x456);
IkReal x462=(cj5*x456);
IkReal x463=(cj5*x455);
IkReal x464=(r12*x455);
IkReal x465=(r10*sj5*x455);
evalcond[0]=((((-1.0)*x455*x460))+((r00*x463))+(((-1.0)*x457*x461))+((r10*x462)));
evalcond[1]=((1.0)+((x455*x457))+(((-1.0)*x460*x461))+(((-1.0)*r10*x463))+((r00*x462)));
evalcond[2]=((((0.0055)*r11*x463))+(((0.0055)*x465))+(((-0.0055)*r01*x462))+(((-1.0)*px*x461))+((py*x455))+(((-0.0055)*x456*x459)));
evalcond[3]=((((-1.0)*cj4*r02*x461))+((cj4*x464))+((sj4*x456*x459))+((r01*sj4*x462))+(((-1.0)*x458*x465))+(((-1.0)*r11*x458*x463)));
evalcond[4]=(((cj4*x465))+(((-1.0)*r02*x456*x458))+(((-1.0)*cj4*cj5*r01*x461))+((sj4*x464))+((cj4*r11*x463))+(((-1.0)*cj4*x459*x461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x466=(cj4*r22);
IkReal x467=(cj5*r21);
IkReal x468=((0.886)*sj4);
IkReal x469=(cj0*px);
IkReal x470=(r22*sj4);
IkReal x471=((0.014619)*cj5);
IkReal x472=(cj0*r01);
IkReal x473=(py*sj0);
IkReal x474=(r11*sj0);
IkReal x475=(r20*sj5);
IkReal x476=((2.658)*sj4);
IkReal x477=((0.004873)*cj5);
IkReal x478=((0.36)*x470);
IkReal x479=((2.658)*x466);
IkReal x480=((0.599547)*x470);
IkReal x481=(cj0*r00*sj5);
IkReal x482=(cj4*x475);
IkReal x483=(r10*sj0*sj5);
IkReal x484=((0.36)*x482);
IkReal x485=((0.36)*cj4*x467);
IkReal x486=((0.599547)*cj4*x467);
IkReal x487=((0.599547)*x482);
IkReal x488=(x480+x487+x486);
IkReal x489=(x485+x484+x478+x479);
IkReal x490=((((12.0)*pz))+((x467*x476))+(((0.066)*x467))+(((0.066)*x475))+((x475*x476)));
IkReal x491=((((0.00198)*x467))+((x471*x472))+((x471*x474))+(((0.00198)*x475))+(((0.36)*pz))+(((2.658)*x473))+(((2.658)*x469))+(((0.014619)*x481))+(((0.014619)*x483)));
j1eval[0]=((1.48848)+(IKabs(((0.0252)+(((-1.0)*x491))+x488)))+(IKabs(((0.84)+(((-1.0)*x490))+x489)))+(IKabs(((-0.84)+(((-1.0)*x490))+x489)))+(IKabs(((-0.0252)+(((-1.0)*x491))+x488)))+(IKabs(((-0.0252)+(((-0.00066)*x467))+(((-0.00066)*x475))+(((0.199849)*cj4*x467))+(((0.199849)*x482))+(((-1.0)*x472*x477))+(((-0.886)*x473))+(((-0.12)*pz))+(((-0.886)*x469))+(((0.199849)*x470))+(((-1.0)*x474*x477))+(((-0.004873)*x481))+(((-0.004873)*x483)))))+(IKabs(((-0.84)+(((-0.022)*x467))+(((0.12)*x470))+(((-0.022)*x475))+(((-1.0)*x468*x475))+(((0.12)*x482))+(((0.886)*x466))+(((0.12)*cj4*x467))+(((-1.0)*x467*x468))+(((-4.0)*pz))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x492=(cj4*r22);
IkReal x493=((0.886)*sj4);
IkReal x494=(r20*sj5);
IkReal x495=(cj5*r21);
IkReal x496=((0.36)*cj4);
IkReal x497=((2.658)*sj4);
IkReal x498=((0.12)*cj4);
IkReal x499=(r22*sj4);
IkReal x500=((0.36)*x499);
IkReal x501=((2.658)*x492);
IkReal x502=((0.12)*x499);
IkReal x503=((0.886)*x492);
IkReal x504=(x494*x496);
IkReal x505=(x495*x496);
IkReal x506=(x494*x498);
IkReal x507=(x495*x498);
IkReal x508=(x500+x501+x504+x505);
IkReal x509=(x502+x503+x506+x507);
IkReal x510=((((0.066)*x494))+(((0.066)*x495))+(((12.0)*pz))+((x495*x497))+((x494*x497)));
IkReal x511=((((4.0)*pz))+((x493*x495))+((x493*x494))+(((0.022)*x494))+(((0.022)*x495)));
op[0]=((-0.84)+x509+(((-1.0)*x511)));
op[1]=0;
op[2]=((-0.84)+x508+(((-1.0)*x510)));
op[3]=0;
op[4]=((0.84)+x508+(((-1.0)*x510)));
op[5]=0;
op[6]=((0.84)+x509+(((-1.0)*x511)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x512=((0.12)*pz);
IkReal x513=(cj0*px);
IkReal x514=(r22*sj4);
IkReal x515=((0.014619)*cj5);
IkReal x516=(cj0*r01);
IkReal x517=(r20*sj5);
IkReal x518=((0.599547)*cj4);
IkReal x519=(r11*sj0);
IkReal x520=(cj5*r21);
IkReal x521=((0.199849)*cj4);
IkReal x522=((0.004873)*cj5);
IkReal x523=(py*sj0);
IkReal x524=((0.599547)*x514);
IkReal x525=((0.199849)*x514);
IkReal x526=((0.00066)*x520);
IkReal x527=((0.886)*x523);
IkReal x528=((0.00066)*x517);
IkReal x529=((0.886)*x513);
IkReal x530=(cj0*r00*sj5);
IkReal x531=(r10*sj0*sj5);
IkReal x532=(x520*x521);
IkReal x533=(x518*x520);
IkReal x534=(x517*x518);
IkReal x535=(x517*x521);
IkReal x536=((0.004873)*x530);
IkReal x537=(x516*x522);
IkReal x538=(x519*x522);
IkReal x539=((0.004873)*x531);
IkReal x540=(x532+x535+x525);
IkReal x541=(x533+x534+x524);
IkReal x542=((((0.36)*pz))+(((0.00198)*x520))+(((0.00198)*x517))+(((2.658)*x513))+(((2.658)*x523))+((x515*x516))+((x515*x519))+(((0.014619)*x531))+(((0.014619)*x530)));
IkReal x543=(x537+x536+x539+x538+x526+x527+x528+x529+x512);
j1evalpoly[0]=((0.0252)+(((htj1*htj1*htj1*htj1)*(((-0.0252)+(((-1.0)*x542))+x541))))+(((-1.0)*x543))+x540+(((htj1*htj1)*(((0.0252)+(((-1.0)*x542))+x541))))+(((-0.37212)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0252)+(((-1.0)*x543))+x540))))+(((-0.74424)*(htj1*htj1*htj1)))+(((-0.37212)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x544=((1.0)*sj4);
IkReal x545=(r20*sj5);
IkReal x546=(r22*sj1);
IkReal x547=(cj1*r22);
IkReal x548=(cj5*r21);
IkReal x549=(cj1*cj4);
IkReal x550=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x544*x546))+((cj4*x547))+(((-1.0)*x545*x550))+(((-1.0)*cj1*x544*x548))+(((-1.0)*cj1*x544*x545))+(((-1.0)*x548*x550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x546))+(((-1.0)*sj1*x544*x545))+(((-1.0)*sj1*x544*x548))+((sj4*x547))+((x545*x549))+((x548*x549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x544*x546))+((cj4*x547))+(((-1.0)*x545*x550))+(((-1.0)*cj1*x544*x548))+(((-1.0)*cj1*x544*x545))+(((-1.0)*x548*x550))))+IKsqr((((cj4*x546))+(((-1.0)*sj1*x544*x545))+(((-1.0)*sj1*x544*x548))+((sj4*x547))+((x545*x549))+((x548*x549))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x544*x546))+((cj4*x547))+(((-1.0)*x545*x550))+(((-1.0)*cj1*x544*x548))+(((-1.0)*cj1*x544*x545))+(((-1.0)*x548*x550))), (((cj4*x546))+(((-1.0)*sj1*x544*x545))+(((-1.0)*sj1*x544*x548))+((sj4*x547))+((x545*x549))+((x548*x549))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x551=IKcos(j2);
IkReal x552=IKsin(j2);
IkReal x553=((0.2215)*sj1);
IkReal x554=(cj0*r01);
IkReal x555=((1.0)*sj0);
IkReal x556=((0.0055)*sj5);
IkReal x557=(r10*sj0);
IkReal x558=(cj5*sj4);
IkReal x559=((1.0)*cj4);
IkReal x560=(cj0*r02);
IkReal x561=(r20*sj5);
IkReal x562=((1.0)*sj1);
IkReal x563=((0.0055)*cj5);
IkReal x564=(cj0*r00);
IkReal x565=(r11*sj0);
IkReal x566=(sj4*sj5);
IkReal x567=((1.0)*sj4);
IkReal x568=(cj1*x551);
IkReal x569=(cj5*x559);
IkReal x570=(cj1*x552);
IkReal x571=(sj1*x551);
IkReal x572=(x552*x562);
evalcond[0]=((((-1.0)*r22*x559))+((sj4*x561))+x571+x570+((r21*x558)));
evalcond[1]=((((-1.0)*x559*x561))+(((-1.0)*x572))+x568+(((-1.0)*r22*x567))+(((-1.0)*r21*x569)));
evalcond[2]=((((0.2215)*x570))+(((-0.03)*sj1*x552))+(((0.21)*cj1))+(((-1.0)*r20*x556))+(((-1.0)*pz))+((x551*x553))+(((-1.0)*r21*x563))+(((0.03)*x568)));
evalcond[3]=(((x558*x565))+((x564*x566))+((x554*x558))+(((-1.0)*x559*x560))+(((-1.0)*x572))+x568+(((-1.0)*cj4*r12*x555))+((x557*x566)));
evalcond[4]=((((-1.0)*cj4*cj5*r11*x555))+(((-1.0)*cj4*r10*sj5*x555))+(((-1.0)*sj5*x559*x564))+(((-1.0)*x570))+(((-1.0)*x560*x567))+(((-1.0)*x554*x569))+(((-1.0)*r12*sj4*x555))+(((-1.0)*x551*x562)));
evalcond[5]=((((-1.0)*x556*x557))+(((0.2215)*x568))+(((-1.0)*x556*x564))+(((-1.0)*x552*x553))+(((-0.03)*x571))+(((-0.03)*x570))+(((-1.0)*x554*x563))+(((-1.0)*x563*x565))+(((-1.0)*py*x555))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x573=(cj4*sj5);
IkReal x574=(cj4*cj5);
CheckValue<IkReal> x575 = IKatan2WithCheck(IkReal((((r12*sj4))+((r10*x573))+((r11*x574)))),IkReal((((r01*x574))+((r00*x573))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
CheckValue<IkReal> x576=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),-1);
if(!x576.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x575.value)+(((1.5707963267949)*(x576.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x577=IKcos(j0);
IkReal x578=IKsin(j0);
IkReal x579=(r11*sj5);
IkReal x580=((1.0)*sj4);
IkReal x581=(r00*sj5);
IkReal x582=(r01*sj5);
IkReal x583=((1.0)*x578);
IkReal x584=(cj5*x578);
IkReal x585=(cj5*x577);
IkReal x586=(r12*x577);
IkReal x587=(r10*sj5*x577);
evalcond[0]=(((r10*x584))+(((-1.0)*x577*x582))+(((-1.0)*x579*x583))+((r00*x585)));
evalcond[1]=((1.0)+(((-1.0)*x582*x583))+((x577*x579))+((r00*x584))+(((-1.0)*r10*x585)));
evalcond[2]=((((0.0055)*x587))+(((0.0055)*r11*x585))+((py*x577))+(((-1.0)*px*x583))+(((-0.0055)*r01*x584))+(((-0.0055)*x578*x581)));
evalcond[3]=((((-1.0)*cj4*r02*x583))+(((-1.0)*x580*x587))+((r01*sj4*x584))+((sj4*x578*x581))+((cj4*x586))+(((-1.0)*r11*x580*x585)));
evalcond[4]=((((-1.0)*cj4*x581*x583))+(((-1.0)*cj4*cj5*r01*x583))+((cj4*r11*x585))+(((-1.0)*r02*x578*x580))+((cj4*x587))+((sj4*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x588=(cj4*r22);
IkReal x589=(cj5*r21);
IkReal x590=((0.886)*sj4);
IkReal x591=(cj0*px);
IkReal x592=(r22*sj4);
IkReal x593=((0.014619)*cj5);
IkReal x594=(cj0*r01);
IkReal x595=(py*sj0);
IkReal x596=(r11*sj0);
IkReal x597=(r20*sj5);
IkReal x598=((2.658)*sj4);
IkReal x599=((0.004873)*cj5);
IkReal x600=((0.36)*x592);
IkReal x601=((2.658)*x588);
IkReal x602=((0.599547)*x592);
IkReal x603=(cj0*r00*sj5);
IkReal x604=(cj4*x597);
IkReal x605=(r10*sj0*sj5);
IkReal x606=((0.36)*x604);
IkReal x607=((0.36)*cj4*x589);
IkReal x608=((0.599547)*cj4*x589);
IkReal x609=((0.599547)*x604);
IkReal x610=(x602+x609+x608);
IkReal x611=(x601+x600+x607+x606);
IkReal x612=((((12.0)*pz))+(((0.066)*x589))+(((0.066)*x597))+((x597*x598))+((x589*x598)));
IkReal x613=((((0.014619)*x605))+(((0.014619)*x603))+(((0.00198)*x589))+(((0.36)*pz))+(((2.658)*x591))+(((2.658)*x595))+(((0.00198)*x597))+((x593*x596))+((x593*x594)));
j1eval[0]=((1.48848)+(IKabs(((0.84)+(((-1.0)*x612))+x611)))+(IKabs(((-0.0252)+(((-1.0)*x613))+x610)))+(IKabs(((-0.84)+(((-1.0)*x612))+x611)))+(IKabs(((-0.84)+(((-1.0)*x589*x590))+(((-0.022)*x589))+(((0.12)*x592))+(((0.12)*cj4*x589))+(((-1.0)*x590*x597))+(((0.12)*x604))+(((-0.022)*x597))+(((-4.0)*pz))+(((0.886)*x588)))))+(IKabs(((0.0252)+(((-1.0)*x613))+x610)))+(IKabs(((-0.0252)+(((0.199849)*cj4*x589))+(((0.199849)*x592))+(((-0.004873)*x603))+(((-0.004873)*x605))+(((-0.00066)*x597))+(((-1.0)*x596*x599))+(((-0.00066)*x589))+(((-1.0)*x594*x599))+(((-0.12)*pz))+(((-0.886)*x591))+(((-0.886)*x595))+(((0.199849)*x604))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x614=(cj4*r22);
IkReal x615=((0.886)*sj4);
IkReal x616=(r20*sj5);
IkReal x617=(cj5*r21);
IkReal x618=((0.36)*cj4);
IkReal x619=((2.658)*sj4);
IkReal x620=((0.12)*cj4);
IkReal x621=(r22*sj4);
IkReal x622=((0.36)*x621);
IkReal x623=((2.658)*x614);
IkReal x624=((0.12)*x621);
IkReal x625=((0.886)*x614);
IkReal x626=(x616*x618);
IkReal x627=(x617*x618);
IkReal x628=(x616*x620);
IkReal x629=(x617*x620);
IkReal x630=(x627+x626+x623+x622);
IkReal x631=(x625+x624+x629+x628);
IkReal x632=((((12.0)*pz))+(((0.066)*x616))+(((0.066)*x617))+((x616*x619))+((x617*x619)));
IkReal x633=((((4.0)*pz))+(((0.022)*x616))+(((0.022)*x617))+((x615*x617))+((x615*x616)));
op[0]=((-0.84)+(((-1.0)*x633))+x631);
op[1]=0;
op[2]=((-0.84)+(((-1.0)*x632))+x630);
op[3]=0;
op[4]=((0.84)+(((-1.0)*x632))+x630);
op[5]=0;
op[6]=((0.84)+(((-1.0)*x633))+x631);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x634=((0.12)*pz);
IkReal x635=(cj0*px);
IkReal x636=(r22*sj4);
IkReal x637=((0.014619)*cj5);
IkReal x638=(cj0*r01);
IkReal x639=(r20*sj5);
IkReal x640=((0.599547)*cj4);
IkReal x641=(r11*sj0);
IkReal x642=(cj5*r21);
IkReal x643=((0.199849)*cj4);
IkReal x644=((0.004873)*cj5);
IkReal x645=(py*sj0);
IkReal x646=((0.599547)*x636);
IkReal x647=((0.199849)*x636);
IkReal x648=((0.00066)*x642);
IkReal x649=((0.886)*x645);
IkReal x650=((0.00066)*x639);
IkReal x651=((0.886)*x635);
IkReal x652=(cj0*r00*sj5);
IkReal x653=(r10*sj0*sj5);
IkReal x654=(x642*x643);
IkReal x655=(x640*x642);
IkReal x656=(x639*x640);
IkReal x657=(x639*x643);
IkReal x658=((0.004873)*x652);
IkReal x659=(x638*x644);
IkReal x660=(x641*x644);
IkReal x661=((0.004873)*x653);
IkReal x662=(x647+x654+x657);
IkReal x663=(x646+x655+x656);
IkReal x664=((((0.014619)*x652))+(((0.014619)*x653))+(((0.36)*pz))+((x637*x641))+(((0.00198)*x642))+(((2.658)*x645))+(((2.658)*x635))+((x637*x638))+(((0.00198)*x639)));
IkReal x665=(x649+x648+x650+x651+x658+x659+x661+x660+x634);
j1evalpoly[0]=((0.0252)+(((htj1*htj1*htj1*htj1)*(((-0.0252)+(((-1.0)*x664))+x663))))+(((htj1*htj1)*(((0.0252)+(((-1.0)*x664))+x663))))+(((-1.0)*x665))+x662+(((-0.37212)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.74424)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0252)+(((-1.0)*x665))+x662))))+(((-0.37212)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x666=((1.0)*sj4);
IkReal x667=(r20*sj5);
IkReal x668=(r22*sj1);
IkReal x669=(cj1*r22);
IkReal x670=(cj5*r21);
IkReal x671=(cj1*cj4);
IkReal x672=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*cj1*x666*x670))+(((-1.0)*x670*x672))+(((-1.0)*x667*x672))+(((-1.0)*x666*x668))+((cj4*x669))+(((-1.0)*cj1*x666*x667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x669))+(((-1.0)*sj1*x666*x670))+((x670*x671))+(((-1.0)*sj1*x666*x667))+((x667*x671))+((cj4*x668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x666*x670))+(((-1.0)*x670*x672))+(((-1.0)*x667*x672))+(((-1.0)*x666*x668))+((cj4*x669))+(((-1.0)*cj1*x666*x667))))+IKsqr((((sj4*x669))+(((-1.0)*sj1*x666*x670))+((x670*x671))+(((-1.0)*sj1*x666*x667))+((x667*x671))+((cj4*x668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x666*x670))+(((-1.0)*x670*x672))+(((-1.0)*x667*x672))+(((-1.0)*x666*x668))+((cj4*x669))+(((-1.0)*cj1*x666*x667))), (((sj4*x669))+(((-1.0)*sj1*x666*x670))+((x670*x671))+(((-1.0)*sj1*x666*x667))+((x667*x671))+((cj4*x668))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x673=IKcos(j2);
IkReal x674=IKsin(j2);
IkReal x675=((0.2215)*sj1);
IkReal x676=(cj0*r01);
IkReal x677=((1.0)*sj0);
IkReal x678=((0.0055)*sj5);
IkReal x679=(r10*sj0);
IkReal x680=(cj5*sj4);
IkReal x681=((1.0)*cj4);
IkReal x682=(cj0*r02);
IkReal x683=(r20*sj5);
IkReal x684=((1.0)*sj1);
IkReal x685=((0.0055)*cj5);
IkReal x686=(cj0*r00);
IkReal x687=(r11*sj0);
IkReal x688=(sj4*sj5);
IkReal x689=((1.0)*sj4);
IkReal x690=(cj1*x673);
IkReal x691=(cj5*x681);
IkReal x692=(cj1*x674);
IkReal x693=(sj1*x673);
IkReal x694=(x674*x684);
evalcond[0]=(((r21*x680))+x692+x693+(((-1.0)*r22*x681))+((sj4*x683)));
evalcond[1]=((((-1.0)*x681*x683))+x690+(((-1.0)*x694))+(((-1.0)*r22*x689))+(((-1.0)*r21*x691)));
evalcond[2]=(((x673*x675))+(((0.21)*cj1))+(((-1.0)*r20*x678))+(((0.03)*x690))+(((-1.0)*pz))+(((0.2215)*x692))+(((-0.03)*sj1*x674))+(((-1.0)*r21*x685)));
evalcond[3]=(((x686*x688))+(((-1.0)*x681*x682))+(((-1.0)*cj4*r12*x677))+((x676*x680))+((x679*x688))+((x680*x687))+x690+(((-1.0)*x694)));
evalcond[4]=((((-1.0)*cj4*r10*sj5*x677))+(((-1.0)*r12*sj4*x677))+(((-1.0)*x676*x691))+(((-1.0)*cj4*cj5*r11*x677))+(((-1.0)*x673*x684))+(((-1.0)*sj5*x681*x686))+(((-1.0)*x682*x689))+(((-1.0)*x692)));
evalcond[5]=((((-1.0)*x685*x687))+(((-1.0)*x678*x679))+(((-1.0)*py*x677))+(((-1.0)*x678*x686))+(((-0.03)*x693))+(((-0.03)*x692))+(((0.2215)*x690))+(((-0.21)*sj1))+(((-1.0)*x674*x675))+(((-1.0)*x676*x685))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x695=((0.0055)*cj5);
IkReal x696=((0.0055)*sj5);
CheckValue<IkReal> x697 = IKatan2WithCheck(IkReal((py+((r10*x696))+((r11*x695)))),IkReal((px+((r00*x696))+((r01*x695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x697.valid){
continue;
}
CheckValue<IkReal> x698=IKPowWithIntegerCheck(IKsign((((rxp1_2*sj5))+(((-0.0055)*r22))+(((-1.0)*cj5*rxp0_2)))),-1);
if(!x698.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x697.value)+(((1.5707963267949)*(x698.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x699=IKcos(j0);
IkReal x700=IKsin(j0);
IkReal x701=(r11*sj5);
IkReal x702=((1.0)*sj4);
IkReal x703=(r00*sj5);
IkReal x704=(r01*sj5);
IkReal x705=((1.0)*x700);
IkReal x706=(cj5*x700);
IkReal x707=(cj5*x699);
IkReal x708=(r12*x699);
IkReal x709=(r10*sj5*x699);
evalcond[0]=(((r00*x707))+(((-1.0)*x699*x704))+(((-1.0)*x701*x705))+((r10*x706)));
evalcond[1]=((1.0)+((r00*x706))+(((-1.0)*x704*x705))+(((-1.0)*r10*x707))+((x699*x701)));
evalcond[2]=((((0.0055)*x709))+(((-0.0055)*x700*x703))+((py*x699))+(((-1.0)*px*x705))+(((0.0055)*r11*x707))+(((-0.0055)*r01*x706)));
evalcond[3]=(((sj4*x700*x703))+(((-1.0)*r11*x702*x707))+((cj4*x708))+(((-1.0)*x702*x709))+((r01*sj4*x706))+(((-1.0)*cj4*r02*x705)));
evalcond[4]=(((cj4*x709))+(((-1.0)*cj4*x703*x705))+((cj4*r11*x707))+(((-1.0)*r02*x700*x702))+(((-1.0)*cj4*cj5*r01*x705))+((sj4*x708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x710=(cj4*r22);
IkReal x711=(cj5*r21);
IkReal x712=((0.886)*sj4);
IkReal x713=(cj0*px);
IkReal x714=(r22*sj4);
IkReal x715=((0.014619)*cj5);
IkReal x716=(cj0*r01);
IkReal x717=(py*sj0);
IkReal x718=(r11*sj0);
IkReal x719=(r20*sj5);
IkReal x720=((2.658)*sj4);
IkReal x721=((0.004873)*cj5);
IkReal x722=((0.36)*x714);
IkReal x723=((2.658)*x710);
IkReal x724=((0.599547)*x714);
IkReal x725=(cj0*r00*sj5);
IkReal x726=(cj4*x719);
IkReal x727=(r10*sj0*sj5);
IkReal x728=((0.36)*x726);
IkReal x729=((0.36)*cj4*x711);
IkReal x730=((0.599547)*cj4*x711);
IkReal x731=((0.599547)*x726);
IkReal x732=(x731+x730+x724);
IkReal x733=(x722+x723+x728+x729);
IkReal x734=((((0.066)*x719))+(((0.066)*x711))+(((12.0)*pz))+((x711*x720))+((x719*x720)));
IkReal x735=((((0.00198)*x711))+(((0.00198)*x719))+((x715*x716))+((x715*x718))+(((0.014619)*x725))+(((0.014619)*x727))+(((0.36)*pz))+(((2.658)*x717))+(((2.658)*x713)));
j1eval[0]=((1.48848)+(IKabs(((-0.84)+(((0.12)*cj4*x711))+(((-1.0)*x711*x712))+(((0.12)*x726))+(((0.12)*x714))+(((-1.0)*x712*x719))+(((0.886)*x710))+(((-4.0)*pz))+(((-0.022)*x711))+(((-0.022)*x719)))))+(IKabs(((0.0252)+(((-1.0)*x735))+x732)))+(IKabs(((-0.0252)+(((-1.0)*x735))+x732)))+(IKabs(((0.84)+(((-1.0)*x734))+x733)))+(IKabs(((-0.0252)+(((-0.004873)*x727))+(((-0.004873)*x725))+(((0.199849)*cj4*x711))+(((-0.886)*x713))+(((-0.886)*x717))+(((-0.00066)*x719))+(((-0.00066)*x711))+(((-1.0)*x716*x721))+(((-0.12)*pz))+(((0.199849)*x726))+(((0.199849)*x714))+(((-1.0)*x718*x721)))))+(IKabs(((-0.84)+(((-1.0)*x734))+x733))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x736=(cj4*r22);
IkReal x737=((0.886)*sj4);
IkReal x738=(r20*sj5);
IkReal x739=(cj5*r21);
IkReal x740=((0.36)*cj4);
IkReal x741=((2.658)*sj4);
IkReal x742=((0.12)*cj4);
IkReal x743=(r22*sj4);
IkReal x744=((0.36)*x743);
IkReal x745=((2.658)*x736);
IkReal x746=((0.12)*x743);
IkReal x747=((0.886)*x736);
IkReal x748=(x738*x740);
IkReal x749=(x739*x740);
IkReal x750=(x738*x742);
IkReal x751=(x739*x742);
IkReal x752=(x744+x745+x748+x749);
IkReal x753=(x751+x750+x746+x747);
IkReal x754=(((x738*x741))+(((0.066)*x739))+(((0.066)*x738))+(((12.0)*pz))+((x739*x741)));
IkReal x755=((((0.022)*x739))+(((0.022)*x738))+(((4.0)*pz))+((x737*x738))+((x737*x739)));
op[0]=((-0.84)+x753+(((-1.0)*x755)));
op[1]=0;
op[2]=((-0.84)+x752+(((-1.0)*x754)));
op[3]=0;
op[4]=((0.84)+x752+(((-1.0)*x754)));
op[5]=0;
op[6]=((0.84)+x753+(((-1.0)*x755)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x756=((0.12)*pz);
IkReal x757=(cj0*px);
IkReal x758=(r22*sj4);
IkReal x759=((0.014619)*cj5);
IkReal x760=(cj0*r01);
IkReal x761=(r20*sj5);
IkReal x762=((0.599547)*cj4);
IkReal x763=(r11*sj0);
IkReal x764=(cj5*r21);
IkReal x765=((0.199849)*cj4);
IkReal x766=((0.004873)*cj5);
IkReal x767=(py*sj0);
IkReal x768=((0.599547)*x758);
IkReal x769=((0.199849)*x758);
IkReal x770=((0.00066)*x764);
IkReal x771=((0.886)*x767);
IkReal x772=((0.00066)*x761);
IkReal x773=((0.886)*x757);
IkReal x774=(cj0*r00*sj5);
IkReal x775=(r10*sj0*sj5);
IkReal x776=(x764*x765);
IkReal x777=(x762*x764);
IkReal x778=(x761*x762);
IkReal x779=(x761*x765);
IkReal x780=((0.004873)*x774);
IkReal x781=(x760*x766);
IkReal x782=(x763*x766);
IkReal x783=((0.004873)*x775);
IkReal x784=(x776+x779+x769);
IkReal x785=(x777+x778+x768);
IkReal x786=((((2.658)*x757))+(((0.36)*pz))+((x759*x763))+((x759*x760))+(((2.658)*x767))+(((0.014619)*x775))+(((0.014619)*x774))+(((0.00198)*x761))+(((0.00198)*x764)));
IkReal x787=(x756+x773+x772+x771+x770+x782+x783+x780+x781);
j1evalpoly[0]=((0.0252)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0252)+(((-1.0)*x787))+x784))))+(((-1.0)*x787))+(((htj1*htj1)*(((0.0252)+(((-1.0)*x786))+x785))))+(((htj1*htj1*htj1*htj1)*(((-0.0252)+(((-1.0)*x786))+x785))))+(((-0.37212)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.74424)*(htj1*htj1*htj1)))+(((-0.37212)*htj1))+x784);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x788=((1.0)*sj4);
IkReal x789=(r20*sj5);
IkReal x790=(r22*sj1);
IkReal x791=(cj1*r22);
IkReal x792=(cj5*r21);
IkReal x793=(cj1*cj4);
IkReal x794=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x792*x794))+(((-1.0)*x788*x790))+((cj4*x791))+(((-1.0)*cj1*x788*x789))+(((-1.0)*cj1*x788*x792))+(((-1.0)*x789*x794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x788*x789))+(((-1.0)*sj1*x788*x792))+((cj4*x790))+((sj4*x791))+((x792*x793))+((x789*x793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x792*x794))+(((-1.0)*x788*x790))+((cj4*x791))+(((-1.0)*cj1*x788*x789))+(((-1.0)*cj1*x788*x792))+(((-1.0)*x789*x794))))+IKsqr(((((-1.0)*sj1*x788*x789))+(((-1.0)*sj1*x788*x792))+((cj4*x790))+((sj4*x791))+((x792*x793))+((x789*x793))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x792*x794))+(((-1.0)*x788*x790))+((cj4*x791))+(((-1.0)*cj1*x788*x789))+(((-1.0)*cj1*x788*x792))+(((-1.0)*x789*x794))), ((((-1.0)*sj1*x788*x789))+(((-1.0)*sj1*x788*x792))+((cj4*x790))+((sj4*x791))+((x792*x793))+((x789*x793))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x795=IKcos(j2);
IkReal x796=IKsin(j2);
IkReal x797=((0.2215)*sj1);
IkReal x798=(cj0*r01);
IkReal x799=((1.0)*sj0);
IkReal x800=((0.0055)*sj5);
IkReal x801=(r10*sj0);
IkReal x802=(cj5*sj4);
IkReal x803=((1.0)*cj4);
IkReal x804=(cj0*r02);
IkReal x805=(r20*sj5);
IkReal x806=((1.0)*sj1);
IkReal x807=((0.0055)*cj5);
IkReal x808=(cj0*r00);
IkReal x809=(r11*sj0);
IkReal x810=(sj4*sj5);
IkReal x811=((1.0)*sj4);
IkReal x812=(cj1*x795);
IkReal x813=(cj5*x803);
IkReal x814=(cj1*x796);
IkReal x815=(sj1*x795);
IkReal x816=(x796*x806);
evalcond[0]=(((r21*x802))+(((-1.0)*r22*x803))+((sj4*x805))+x814+x815);
evalcond[1]=((((-1.0)*x816))+(((-1.0)*x803*x805))+(((-1.0)*r22*x811))+x812+(((-1.0)*r21*x813)));
evalcond[2]=((((0.21)*cj1))+(((0.2215)*x814))+(((-1.0)*r21*x807))+(((-1.0)*pz))+(((-0.03)*sj1*x796))+(((-1.0)*r20*x800))+(((0.03)*x812))+((x795*x797)));
evalcond[3]=(((x801*x810))+(((-1.0)*x816))+((x808*x810))+((x798*x802))+(((-1.0)*x803*x804))+x812+((x802*x809))+(((-1.0)*cj4*r12*x799)));
evalcond[4]=((((-1.0)*r12*sj4*x799))+(((-1.0)*cj4*cj5*r11*x799))+(((-1.0)*x814))+(((-1.0)*sj5*x803*x808))+(((-1.0)*x798*x813))+(((-1.0)*x795*x806))+(((-1.0)*x804*x811))+(((-1.0)*cj4*r10*sj5*x799)));
evalcond[5]=((((-1.0)*x796*x797))+(((-1.0)*x807*x809))+(((-1.0)*x798*x807))+(((0.2215)*x812))+(((-1.0)*x800*x801))+(((-1.0)*x800*x808))+(((-0.21)*sj1))+(((-1.0)*py*x799))+(((-1.0)*cj0*px))+(((-0.03)*x814))+(((-0.03)*x815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x817=(rxp1_2*sj5);
IkReal x818=((0.0055)*cj5);
IkReal x819=(cj5*rxp0_2);
IkReal x820=((0.0055)*sj5);
j0eval[0]=((((181.818181818182)*x819))+(((-181.818181818182)*x817))+r22);
j0eval[1]=IKsign(((((-1.0)*x817))+x819+(((0.0055)*r22))));
j0eval[2]=((IKabs((((r01*x818))+((r00*x820))+px)))+(IKabs((((r11*x818))+((r10*x820))+py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x821=(cj4*sj5);
IkReal x822=((1.0)*sj4);
IkReal x823=(cj4*cj5);
IkReal x824=(((cj4*r22))+(((-1.0)*cj5*r21*x822))+(((-1.0)*r20*sj5*x822)));
j0eval[0]=x824;
j0eval[1]=IKsign(x824);
j0eval[2]=((IKabs((((r10*x821))+((r12*sj4))+((r11*x823)))))+(IKabs((((r00*x821))+((r02*sj4))+((r01*x823))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x825=r21*r21;
IkReal x826=cj5*cj5;
IkReal x827=((1.0)+(((2.0)*cj5*r20*r21*sj5))+((x825*x826))+(((-1.0)*x826*(r20*r20)))+(((-1.0)*x825)));
j0eval[0]=x827;
j0eval[1]=IKsign(x827);
j0eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x828=((181.818181818182)*rxp0_2);
IkReal x829=((181.818181818182)*rxp1_2);
IkReal x830=((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))));
IkReal x837 = x830;
if(IKabs(x837)==0){
continue;
}
IkReal x831=pow(x837,-0.5);
if((x830) < -0.00001)
continue;
IkReal x832=IKabs(IKsqrt(x830));
CheckValue<IkReal> x838=IKPowWithIntegerCheck(x832,-1);
if(!x838.valid){
continue;
}
IkReal x833=x838.value;
IkReal x834=(r22*x833);
if((((1.0)+(((-1.0)*(x834*x834))))) < -0.00001)
continue;
IkReal x835=IKsqrt(((1.0)+(((-1.0)*(x834*x834)))));
IkReal x836=(x831*x835);
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(x828),IkReal(((-181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
if( (x834) < -1-IKFAST_SINCOS_THRESH || (x834) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst76=((((-1.0)*(x839.value)))+(((-1.0)*(IKasin(x834)))));
IkReal gconst77=((((-1.0)*x828*x836))+((x829*x831*x834)));
IkReal gconst78=((((-1.0)*x828*x831*x834))+(((-1.0)*x829*x836)));
if((((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x840=IKPowWithIntegerCheck(IKabs(IKsqrt(((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2)))))),-1);
if(!x840.valid){
continue;
}
if( ((r22*(x840.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x840.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(((181.818181818182)*rxp0_2)),IkReal(((-181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin((r22*(x840.value))))+(x841.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x842=((0.0055)*gconst77);
IkReal x843=((0.0055)*gconst78);
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal((((r10*x842))+py+((r11*x843)))),IkReal((((r01*x843))+((r00*x842))+px)),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst77*rxp1_2))+((r22*((((gconst77*x842))+((gconst78*x843))))))+((gconst78*rxp0_2)))),-1);
if(!x845.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x844.value)+(((1.5707963267949)*(x845.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x846=IKsin(j0);
IkReal x847=IKcos(j0);
IkReal x848=((1.0)*gconst78);
IkReal x849=((0.0055)*gconst78);
IkReal x850=((0.0055)*gconst77);
IkReal x851=((1.0)*gconst77);
IkReal x852=(r11*x847);
IkReal x853=(r10*x847);
IkReal x854=(gconst78*x846);
IkReal x855=((1.0)*x846);
IkReal x856=(r12*x847);
IkReal x857=(r01*x846);
IkReal x858=(r00*x846);
IkReal x859=(x846*x851);
evalcond[0]=((((-1.0)*r11*x859))+((r10*x854))+((gconst78*r00*x847))+(((-1.0)*r01*x847*x851)));
evalcond[1]=((-1.0)+((r00*x854))+(((-1.0)*x848*x853))+((gconst77*x852))+(((-1.0)*x851*x857)));
evalcond[2]=(((x850*x853))+(((-1.0)*x850*x858))+(((-1.0)*x849*x857))+((py*x847))+((x849*x852))+(((-1.0)*px*x855)));
evalcond[3]=(((gconst77*sj4*x858))+(((-1.0)*sj4*x851*x853))+(((-1.0)*sj4*x848*x852))+((r01*sj4*x854))+((cj4*x856))+(((-1.0)*cj4*r02*x855)));
evalcond[4]=((((-1.0)*cj4*x851*x858))+(((-1.0)*cj4*x848*x857))+((cj4*gconst77*x853))+((sj4*x856))+(((-1.0)*r02*sj4*x855))+((cj4*gconst78*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x860=((181.818181818182)*rxp0_2);
IkReal x861=(gconst77*r20);
IkReal x862=((1.0)*cj4);
IkReal x863=(gconst78*r21);
IkReal x864=((181.818181818182)*rxp1_2);
IkReal x865=x830;
IkReal x866=(((sj4*x861))+((sj4*x863))+(((-1.0)*r22*x862)));
IkReal x877 = x865;
if(IKabs(x877)==0){
continue;
}
IkReal x867=pow(x877,-0.5);
if((x865) < -0.00001)
continue;
IkReal x868=IKabs(IKsqrt(x865));
CheckValue<IkReal> x878=IKPowWithIntegerCheck(x868,-1);
if(!x878.valid){
continue;
}
IkReal x869=x878.value;
IkReal x870=((((1.0)*r22*sj4))+((x862*x863))+((x861*x862)));
IkReal x871=((-1.0)+(((-1.0)*x870)));
IkReal x872=((1.0)+(((-1.0)*x870)));
IkReal x873=(r22*x869);
if((((1.0)+(((-1.0)*(x873*x873))))) < -0.00001)
continue;
IkReal x874=IKsqrt(((1.0)+(((-1.0)*(x873*x873)))));
if( (x873) < -1-IKFAST_SINCOS_THRESH || (x873) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x879 = IKatan2WithCheck(IkReal(x860),IkReal(((-181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x879.valid){
continue;
}
IkReal x875=((((-1.0)*(IKasin(x873))))+(((-1.0)*(x879.value))));
IkReal x876=(x867*x874);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst77;
cj5=gconst78;
j5=x875;
IkReal gconst76=x875;
IkReal gconst77=((((-1.0)*x860*x876))+((x864*x867*x873)));
IkReal gconst78=((((-1.0)*x864*x876))+(((-1.0)*x860*x867*x873)));
IkReal gconst82=x871;
IkReal gconst83=x872;
IkReal gconst84=x866;
IkReal gconst85=x866;
IkReal gconst86=x871;
IkReal gconst87=x872;
IkReal gconst88=x866;
IkReal gconst89=x866;
IkReal gconst90=x872;
IkReal gconst91=x871;
IkReal gconst92=x866;
IkReal gconst93=x866;
IkReal gconst94=x872;
IkReal gconst95=x871;
IkReal gconst96=x866;
IkReal gconst97=x866;
IkReal x880=cj4*cj4;
IkReal x881=sj4*sj4;
IkReal x882=gconst77*gconst77;
IkReal x883=r20*r20;
IkReal x884=r22*r22;
IkReal x885=gconst78*gconst78;
IkReal x886=r21*r21;
IkReal x887=((24.0)*x880);
IkReal x888=((16.0)*x881);
IkReal x889=((24.0)*x881);
IkReal x890=((4.0)*x881);
IkReal x891=((16.0)*x880);
IkReal x892=((4.0)*x880);
IkReal x893=(x885*x886);
IkReal x894=(x882*x883);
IkReal x895=(x880*x884);
IkReal x896=(gconst77*gconst78*r20*r21*x881);
IkReal x897=(gconst77*gconst78*r20*r21*x880);
j1eval[0]=((((0.5)*(IKabs(((4.0)+(((-1.0)*x892*x894))+(((-1.0)*x892*x893))+(((-1.0)*x884*x890))+(((-1.0)*x884*x892))+(((-8.0)*x897))+(((-8.0)*x896))+(((-1.0)*x890*x893))+(((-1.0)*x890*x894)))))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x889*x894))+(((-1.0)*x889*x893))+(((-48.0)*x896))+(((-48.0)*x897))+(((-1.0)*x884*x889))+(((-1.0)*x884*x887))+(((-1.0)*x887*x893))+(((-1.0)*x887*x894)))))))+(IKabs(((16.0)+(((-1.0)*x884*x891))+(((-32.0)*x896))+(((-32.0)*x897))+(((-1.0)*x888*x893))+(((-1.0)*x888*x894))+(((-1.0)*x891*x893))+(((-1.0)*x891*x894))+(((-1.0)*x884*x888))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x898=((16.0)*gconst91);
IkReal x899=((16.0)*gconst94);
IkReal x900=((16.0)*gconst83);
IkReal x901=((16.0)*gconst86);
IkReal x902=(gconst83*gconst89);
IkReal x903=(gconst92*gconst94);
IkReal x904=(gconst84*gconst86);
IkReal x905=((2.0)*gconst86);
IkReal x906=(gconst91*gconst97);
IkReal x907=((1.0)*gconst96);
IkReal x908=(gconst93*gconst94);
IkReal x909=(gconst85*gconst95);
IkReal x910=(gconst90*gconst96);
IkReal x911=(gconst82*gconst88);
IkReal x912=(gconst82*gconst85);
IkReal x913=((2.0)*gconst87);
IkReal x914=((1.0)*gconst90);
IkReal x915=((2.0)*gconst94);
IkReal x916=(gconst83*gconst84);
IkReal x917=(gconst93*gconst95);
IkReal x918=((4.0)*gconst90);
IkReal x919=(gconst85*gconst97);
IkReal x920=((2.0)*gconst82);
IkReal x921=((4.0)*gconst82);
IkReal x922=(gconst91*gconst95);
IkReal x923=(gconst85*gconst88);
IkReal x924=(gconst87*gconst90);
IkReal x925=(gconst83*gconst97);
IkReal x926=(gconst87*gconst93);
IkReal x927=(gconst82*gconst96);
IkReal x928=(gconst91*gconst96);
IkReal x929=(gconst85*gconst87);
IkReal x930=((2.0)*gconst95);
IkReal x931=(gconst83*gconst96);
IkReal x932=((16.0)*gconst93);
IkReal x933=(gconst86*gconst89);
IkReal x934=(gconst85*gconst94);
IkReal x935=(gconst89*gconst91);
IkReal x936=(gconst83*gconst92);
IkReal x937=(gconst86*gconst97);
IkReal x938=((4.0)*gconst86);
IkReal x939=(gconst86*gconst92);
IkReal x940=(gconst90*gconst97);
IkReal x941=((1.0)*gconst89);
IkReal x942=(gconst88*gconst91);
IkReal x943=(gconst88*gconst90);
IkReal x944=(gconst82*gconst89);
IkReal x945=((1.0)*gconst88);
IkReal x946=((8.0)*gconst86);
IkReal x947=(gconst84*gconst94);
IkReal x948=(gconst83*gconst88);
IkReal x949=((2.0)*gconst90);
IkReal x950=(gconst82*gconst97);
IkReal x951=((2.0)*gconst83);
IkReal x952=((2.0)*gconst91);
IkReal x953=(gconst90*gconst93);
IkReal x954=(gconst94*gconst97);
IkReal x955=(gconst82*gconst93);
IkReal x956=(gconst84*gconst91);
IkReal x957=((4.0)*gconst83);
IkReal x958=(gconst85*gconst90);
IkReal x959=(gconst89*gconst90);
IkReal x960=(gconst91*gconst92);
IkReal x961=((4.0)*gconst91);
IkReal x962=(gconst94*x961);
IkReal x963=((8.0)*x908);
IkReal x964=((8.0)*x928);
IkReal x965=(gconst91*x938);
IkReal x966=(gconst94*x957);
IkReal x967=((8.0)*x931);
IkReal x968=((8.0)*x934);
IkReal x969=((8.0)*x942);
IkReal x970=(gconst93*x946);
IkReal x971=(gconst83*x938);
IkReal x972=((8.0)*x948);
IkReal x973=(gconst85*x946);
IkReal x974=(gconst87*x960);
IkReal x975=((1.0)*x955);
IkReal x976=(gconst87*x956);
IkReal x977=(x899+x962);
IkReal x978=(x900+x971);
IkReal x979=(x966+x965);
IkReal x980=(x973+x972);
IkReal x981=(x963+x964);
IkReal x982=(x970+x967+x968+x969);
op[0]=((((-1.0)*gconst92*x907*x922))+((x910*x917))+((x903*x906))+(((-1.0)*gconst97*x908*x914))+(((-1.0)*x962)));
op[1]=((((-1.0)*x981))+(((-2.0)*gconst92*x922))+((x915*x940))+(((-1.0)*x903*x952))+((x906*x915))+(((-1.0)*x910*x930))+(((-2.0)*gconst96*x922))+((x908*x949))+((x917*x949)));
op[2]=((((-1.0)*gconst92*x922*x945))+(((-1.0)*gconst95*x918))+((x909*x910))+(((-1.0)*gconst94*x918))+(((-1.0)*x907*x974))+((x906*x939))+(((-1.0)*gconst89*x908*x914))+((x906*x947))+(((-1.0)*x898))+((x903*x935))+((x903*x925))+(((-4.0)*x922))+((x917*x927))+(((-1.0)*gconst94*x914*x919))+(((-1.0)*gconst93*x914*x937))+((x910*x926))+(((-1.0)*x908*x950))+(((-1.0)*gconst96*x932))+(((-1.0)*gconst95*x907*x936))+x977+(((-1.0)*gconst84*x907*x922))+(((-1.0)*x979))+((x917*x943)));
op[3]=((((-1.0)*x982))+((x905*x906))+(((-32.0)*gconst93))+((x915*x925))+((x915*x935))+(((-1.0)*x930*x936))+(((-1.0)*x930*x931))+(((-1.0)*gconst95*gconst96*x920))+(((-1.0)*x905*x960))+((x908*x920))+(((-2.0)*gconst88*x922))+((x913*x953))+((x905*x953))+((x909*x949))+(((-1.0)*x903*x951))+((x905*x940))+((x915*x950))+((x915*x959))+((x915*x958))+(((-1.0)*x910*x913))+(((-2.0)*gconst84*x922))+((x917*x920))+(((-1.0)*x913*x928))+(((32.0)*gconst96))+(((-1.0)*x913*x960))+(((-1.0)*x915*x956))+x981+(((-1.0)*x930*x943)));
op[4]=((64.0)+(((-1.0)*gconst87*gconst92*x942))+(((-1.0)*x907*x976))+(((-1.0)*gconst95*x957))+((x933*x960))+(((-1.0)*gconst87*x918))+(((-1.0)*gconst86*x914*x919))+((gconst88*gconst93*x924))+(((-1.0)*gconst86*x918))+((x902*x903))+((x909*x943))+(((-1.0)*gconst84*x922*x945))+((x911*x917))+(((-1.0)*gconst82*x908*x941))+((x916*x954))+(((-1.0)*gconst87*x961))+(((-1.0)*gconst88*x932))+(((-1.0)*gconst89*x914*x934))+((x909*x927))+(((-1.0)*gconst95*x921))+(((-1.0)*gconst87*x907*x936))+(((-1.0)*gconst94*x921))+(((-1.0)*gconst95*x907*x916))+((x935*x947))+(((-1.0)*gconst93*x914*x933))+((x910*x929))+(((-16.0)*gconst85*gconst96))+(((-1.0)*x912*x954))+((x925*x939))+x898+((x926*x927))+(((-1.0)*gconst95*x936*x945))+x901+x979+(((-1.0)*x978))+(((-1.0)*x977))+((x904*x906))+(((-1.0)*x937*x975)));
op[5]=((((-1.0)*x980))+(((-1.0)*x913*x943))+(((-1.0)*x913*x942))+(((-1.0)*x905*x936))+((x902*x915))+(((-1.0)*x904*x952))+((x915*x944))+(((-32.0)*gconst85))+((x913*x958))+((x913*x955))+(((32.0)*gconst88))+((x905*x955))+((x905*x959))+((x905*x958))+((x905*x950))+((x909*x920))+(((-1.0)*x913*x931))+(((-1.0)*x913*x936))+(((-1.0)*x913*x927))+((x905*x935))+(((-1.0)*x913*x956))+((x905*x925))+((x912*x915))+(((-1.0)*x916*x930))+x982+(((-1.0)*x930*x948))+(((-1.0)*x915*x916))+(((-1.0)*x911*x930)));
op[6]=((((-1.0)*gconst87*x907*x916))+((x909*x911))+((gconst87*gconst96*x912))+((x911*x926))+(((-1.0)*x901))+((x902*x947))+(((-1.0)*gconst86*x921))+(((-1.0)*gconst85*x914*x933))+(((-1.0)*gconst84*gconst87*x942))+((x902*x939))+(((-1.0)*gconst87*x921))+(((-1.0)*gconst87*x957))+(((-1.0)*x933*x975))+((x923*x924))+(((-1.0)*x912*x937))+((x904*x925))+((x904*x935))+(((-16.0)*x923))+(((-1.0)*gconst95*x916*x945))+(((-1.0)*gconst94*x912*x941))+x978+(((-1.0)*gconst87*x936*x945))+(((-1.0)*x979)));
op[7]=((((-1.0)*x913*x916))+(((-1.0)*x913*x948))+(((-1.0)*x904*x951))+((x902*x905))+((x905*x944))+((x912*x913))+((x905*x912))+x980+(((-1.0)*x911*x913)));
op[8]=((((-1.0)*gconst87*x916*x945))+((x911*x929))+((x902*x904))+(((-1.0)*x912*x933))+(((-1.0)*x971)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x983=(cj1*r22);
IkReal x984=((1.0)*sj4);
IkReal x985=(r22*sj1);
IkReal x986=((1.0)*cj4);
IkReal x987=(gconst78*r21);
IkReal x988=(cj4*sj1);
IkReal x989=(gconst77*r20);
IkReal x990=(cj1*x989);
if( IKabs(((((-1.0)*cj1*x984*x987))+((cj4*x983))+((x988*x989))+((sj4*x985))+(((-1.0)*x984*x990))+((x987*x988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x985))+(((-1.0)*cj1*x986*x987))+(((-1.0)*x986*x990))+(((-1.0)*sj1*x984*x987))+(((-1.0)*sj1*x984*x989))+(((-1.0)*x983*x984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x984*x987))+((cj4*x983))+((x988*x989))+((sj4*x985))+(((-1.0)*x984*x990))+((x987*x988))))+IKsqr((((cj4*x985))+(((-1.0)*cj1*x986*x987))+(((-1.0)*x986*x990))+(((-1.0)*sj1*x984*x987))+(((-1.0)*sj1*x984*x989))+(((-1.0)*x983*x984))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x984*x987))+((cj4*x983))+((x988*x989))+((sj4*x985))+(((-1.0)*x984*x990))+((x987*x988))), (((cj4*x985))+(((-1.0)*cj1*x986*x987))+(((-1.0)*x986*x990))+(((-1.0)*sj1*x984*x987))+(((-1.0)*sj1*x984*x989))+(((-1.0)*x983*x984))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x991=IKsin(j2);
IkReal x992=IKcos(j2);
IkReal x993=(gconst78*r21);
IkReal x994=((1.0)*sj0);
IkReal x995=((1.0)*cj4);
IkReal x996=(gconst77*r10);
IkReal x997=(gconst77*r20);
IkReal x998=(cj0*r02);
IkReal x999=((1.0)*sj4);
IkReal x1000=(sj1*x992);
IkReal x1001=(cj1*x991);
IkReal x1002=(cj1*x992);
IkReal x1003=(cj0*gconst78*r01);
IkReal x1004=((0.2215)*x991);
IkReal x1005=(cj0*gconst77*r00);
IkReal x1006=(gconst78*r11*sj0);
IkReal x1007=(sj1*x991);
IkReal x1008=(x1001+x1000);
evalcond[0]=((((-1.0)*r22*x995))+((sj4*x997))+((sj4*x993))+x1008);
evalcond[1]=((((-1.0)*r22*x999))+(((-1.0)*x1002))+x1007+(((-1.0)*x995*x997))+(((-1.0)*x993*x995)));
evalcond[2]=((((0.21)*cj1))+(((0.03)*x1002))+(((-1.0)*pz))+(((-0.0055)*x997))+(((-0.0055)*x993))+(((0.2215)*x1000))+(((0.2215)*x1001))+(((-0.03)*x1007)));
evalcond[3]=(((sj4*x1005))+((sj4*x1006))+((sj4*x1003))+(((-1.0)*x1007))+x1002+((sj0*sj4*x996))+(((-1.0)*x995*x998))+(((-1.0)*cj4*r12*x994)));
evalcond[4]=(x1008+(((-1.0)*cj4*gconst78*r11*x994))+(((-1.0)*x1003*x995))+(((-1.0)*r12*sj4*x994))+(((-1.0)*x1005*x995))+(((-1.0)*x998*x999))+(((-1.0)*cj4*x994*x996)));
evalcond[5]=((((-0.0055)*x1003))+(((-0.0055)*x1006))+(((-0.0055)*x1005))+(((-1.0)*py*x994))+(((-0.0055)*sj0*x996))+(((-1.0)*sj1*x1004))+(((-0.21)*sj1))+(((0.2215)*x1002))+(((-0.03)*x1000))+(((-0.03)*x1001))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1009=((181.818181818182)*rxp0_2);
IkReal x1010=((181.818181818182)*rxp1_2);
IkReal x1011=((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))));
IkReal x1018 = x1011;
if(IKabs(x1018)==0){
continue;
}
IkReal x1012=pow(x1018,-0.5);
if((x1011) < -0.00001)
continue;
IkReal x1013=IKabs(IKsqrt(x1011));
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(x1013,-1);
if(!x1019.valid){
continue;
}
IkReal x1014=x1019.value;
IkReal x1015=(r22*x1014);
if((((1.0)+(((-1.0)*(x1015*x1015))))) < -0.00001)
continue;
IkReal x1016=IKsqrt(((1.0)+(((-1.0)*(x1015*x1015)))));
IkReal x1017=(x1012*x1016);
if( (x1015) < -1-IKFAST_SINCOS_THRESH || (x1015) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal(x1009),IkReal(((-181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
IkReal gconst79=((3.14159265358979)+(IKasin(x1015))+(((-1.0)*(x1020.value))));
IkReal gconst80=(((x1009*x1017))+((x1010*x1012*x1015)));
IkReal gconst81=((((-1.0)*x1009*x1012*x1015))+((x1010*x1017)));
if((((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(IKabs(IKsqrt(((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2)))))),-1);
if(!x1021.valid){
continue;
}
if( ((r22*(x1021.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x1021.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1022 = IKatan2WithCheck(IkReal(((181.818181818182)*rxp0_2)),IkReal(((-181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1022.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((r22*(x1021.value))))))+(x1022.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1023=((0.0055)*gconst80);
IkReal x1024=((0.0055)*gconst81);
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(IKsign((((gconst81*rxp0_2))+((r22*((((gconst80*x1023))+((gconst81*x1024))))))+(((-1.0)*gconst80*rxp1_2)))),-1);
if(!x1025.valid){
continue;
}
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal((((r11*x1024))+py+((r10*x1023)))),IkReal((((r01*x1024))+px+((r00*x1023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1025.value)))+(x1026.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1027=IKcos(j0);
IkReal x1028=IKsin(j0);
IkReal x1029=(cj4*gconst80);
IkReal x1030=((0.0055)*gconst80);
IkReal x1031=(gconst80*r11);
IkReal x1032=(gconst80*sj4);
IkReal x1033=(gconst80*r01);
IkReal x1034=(r00*x1028);
IkReal x1035=(r10*x1027);
IkReal x1036=(gconst81*x1027);
IkReal x1037=((1.0)*x1028);
IkReal x1038=(r12*x1027);
IkReal x1039=(gconst81*r01*x1028);
evalcond[0]=(((r00*x1036))+((gconst81*r10*x1028))+(((-1.0)*x1027*x1033))+(((-1.0)*x1031*x1037)));
evalcond[1]=((-1.0)+(((-1.0)*x1033*x1037))+(((-1.0)*gconst81*x1035))+((x1027*x1031))+((gconst81*x1034)));
evalcond[2]=(((py*x1027))+(((-0.0055)*x1039))+((x1030*x1035))+(((0.0055)*r11*x1036))+(((-1.0)*x1030*x1034))+(((-1.0)*px*x1037)));
evalcond[3]=(((sj4*x1039))+((cj4*x1038))+(((-1.0)*x1032*x1035))+(((-1.0)*cj4*r02*x1037))+((x1032*x1034))+(((-1.0)*r11*sj4*x1036)));
evalcond[4]=((((-1.0)*x1029*x1034))+((sj4*x1038))+((cj4*r11*x1036))+(((-1.0)*r02*sj4*x1037))+((x1029*x1035))+(((-1.0)*cj4*gconst81*r01*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1040=((181.818181818182)*rxp0_2);
IkReal x1041=((181.818181818182)*rxp1_2);
IkReal x1042=((1.0)*cj4);
IkReal x1043=(gconst80*r20);
IkReal x1044=(gconst81*r21);
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal(x1040),IkReal(((-181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
IkReal x1045=((1.0)*(x1058.value));
IkReal x1046=x1011;
IkReal x1047=((((-1.0)*r22*x1042))+((sj4*x1043))+((sj4*x1044)));
IkReal x1059 = x1046;
if(IKabs(x1059)==0){
continue;
}
IkReal x1048=pow(x1059,-0.5);
if((x1046) < -0.00001)
continue;
IkReal x1049=IKabs(IKsqrt(x1046));
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(x1049,-1);
if(!x1060.valid){
continue;
}
IkReal x1050=x1060.value;
IkReal x1051=(((x1042*x1044))+((x1042*x1043))+(((1.0)*r22*sj4)));
IkReal x1052=((-1.0)+(((-1.0)*x1051)));
IkReal x1053=((1.0)+(((-1.0)*x1051)));
IkReal x1054=(r22*x1050);
if( (x1054) < -1-IKFAST_SINCOS_THRESH || (x1054) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1055=IKasin(x1054);
if((((1.0)+(((-1.0)*(x1054*x1054))))) < -0.00001)
continue;
IkReal x1056=IKsqrt(((1.0)+(((-1.0)*(x1054*x1054)))));
IkReal x1057=(x1048*x1056);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst80;
cj5=gconst81;
j5=((3.14159265)+x1055+(((-1.0)*x1045)));
IkReal gconst79=((3.14159265358979)+x1055+(((-1.0)*x1045)));
IkReal gconst80=(((x1041*x1048*x1054))+((x1040*x1057)));
IkReal gconst81=(((x1041*x1057))+(((-1.0)*x1040*x1048*x1054)));
IkReal gconst114=x1052;
IkReal gconst115=x1053;
IkReal gconst116=x1047;
IkReal gconst117=x1047;
IkReal gconst118=x1052;
IkReal gconst119=x1053;
IkReal gconst120=x1047;
IkReal gconst121=x1047;
IkReal gconst122=x1053;
IkReal gconst123=x1052;
IkReal gconst124=x1047;
IkReal gconst125=x1047;
IkReal gconst126=x1053;
IkReal gconst127=x1052;
IkReal gconst128=x1047;
IkReal gconst129=x1047;
IkReal x1061=sj4*sj4;
IkReal x1062=gconst80*gconst80;
IkReal x1063=r20*r20;
IkReal x1064=cj4*cj4;
IkReal x1065=r22*r22;
IkReal x1066=gconst81*gconst81;
IkReal x1067=r21*r21;
IkReal x1068=((16.0)*x1064);
IkReal x1069=((4.0)*x1064);
IkReal x1070=((24.0)*x1064);
IkReal x1071=(x1062*x1063);
IkReal x1072=(x1061*x1065);
IkReal x1073=(gconst80*gconst81*r20*r21*x1064);
IkReal x1074=(x1064*x1066*x1067);
IkReal x1075=(x1061*x1071);
IkReal x1076=(x1061*x1066*x1067);
IkReal x1077=(gconst80*gconst81*r20*r21*x1061);
j1eval[0]=((IKabs(((16.0)+(((-1.0)*x1068*x1071))+(((-1.0)*x1066*x1067*x1068))+(((-16.0)*x1075))+(((-16.0)*x1072))+(((-16.0)*x1076))+(((-32.0)*x1077))+(((-32.0)*x1073))+(((-1.0)*x1065*x1068)))))+(((0.5)*(IKabs(((4.0)+(((-8.0)*x1073))+(((-8.0)*x1077))+(((-1.0)*x1066*x1067*x1069))+(((-1.0)*x1069*x1071))+(((-1.0)*x1065*x1069))+(((-4.0)*x1076))+(((-4.0)*x1075))+(((-4.0)*x1072)))))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x1070*x1071))+(((-48.0)*x1077))+(((-48.0)*x1073))+(((-24.0)*x1076))+(((-24.0)*x1075))+(((-24.0)*x1072))+(((-1.0)*x1065*x1070))+(((-1.0)*x1066*x1067*x1070))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1078=((16.0)*gconst123);
IkReal x1079=((16.0)*gconst126);
IkReal x1080=((16.0)*gconst115);
IkReal x1081=((16.0)*gconst118);
IkReal x1082=(gconst127*gconst128);
IkReal x1083=(gconst114*gconst119);
IkReal x1084=((2.0)*gconst128);
IkReal x1085=(gconst117*gconst122);
IkReal x1086=(gconst119*gconst128);
IkReal x1087=((2.0)*gconst117);
IkReal x1088=((4.0)*gconst126);
IkReal x1089=(gconst115*gconst126);
IkReal x1090=(gconst124*gconst129);
IkReal x1091=(gconst122*gconst125);
IkReal x1092=(gconst120*gconst127);
IkReal x1093=((4.0)*gconst127);
IkReal x1094=((2.0)*gconst123);
IkReal x1095=(gconst118*gconst129);
IkReal x1096=((2.0)*gconst116);
IkReal x1097=(gconst119*gconst123);
IkReal x1098=(gconst119*gconst120);
IkReal x1099=(gconst121*gconst126);
IkReal x1100=((1.0)*gconst129);
IkReal x1101=((1.0)*gconst124);
IkReal x1102=(gconst116*gconst121);
IkReal x1103=((4.0)*gconst118);
IkReal x1104=((2.0)*gconst114);
IkReal x1105=(gconst116*gconst123);
IkReal x1106=(gconst115*gconst116);
IkReal x1107=(gconst118*gconst125);
IkReal x1108=((1.0)*gconst121);
IkReal x1109=((4.0)*gconst119);
IkReal x1110=((2.0)*gconst115);
IkReal x1111=(gconst117*gconst128);
IkReal x1112=(gconst119*gconst124);
IkReal x1113=(gconst115*gconst118);
IkReal x1114=(gconst118*gconst123);
IkReal x1115=(gconst118*gconst121);
IkReal x1116=((2.0)*gconst122);
IkReal x1117=(gconst121*gconst124);
IkReal x1118=(gconst125*gconst128);
IkReal x1119=(gconst120*gconst125);
IkReal x1120=((8.0)*gconst128);
IkReal x1121=((1.0)*gconst114);
IkReal x1122=((8.0)*gconst120);
IkReal x1123=(gconst126*gconst129);
IkReal x1124=(gconst118*gconst124);
IkReal x1125=(gconst114*gconst125);
IkReal x1126=(gconst117*gconst120);
IkReal x1127=((8.0)*gconst126);
IkReal x1128=(gconst114*gconst117);
IkReal x1129=(gconst115*gconst119);
IkReal x1130=(gconst124*gconst127);
IkReal x1131=(gconst123*x1088);
IkReal x1132=(gconst123*x1120);
IkReal x1133=(gconst125*x1127);
IkReal x1134=(gconst123*x1103);
IkReal x1135=(gconst115*x1088);
IkReal x1136=(gconst115*x1120);
IkReal x1137=(gconst123*x1122);
IkReal x1138=((8.0)*x1107);
IkReal x1139=(gconst117*x1127);
IkReal x1140=(gconst115*x1103);
IkReal x1141=(gconst115*x1122);
IkReal x1142=((8.0)*gconst117*gconst118);
IkReal x1143=((1.0)*x1105);
IkReal x1144=((2.0)*x1091);
IkReal x1145=(gconst126*x1125);
IkReal x1146=(gconst117*gconst126*x1100);
IkReal x1147=(x1108*x1128);
IkReal x1148=(x1131+x1079);
IkReal x1149=(x1140+x1080);
IkReal x1150=(x1133+x1132);
IkReal x1151=(x1142+x1141);
IkReal x1152=(x1135+x1134);
IkReal x1153=(x1139+x1138+x1137+x1136);
op[0]=((((-1.0)*gconst126*x1091*x1100))+(((-1.0)*gconst123*x1082*x1101))+(((-1.0)*x1131))+((x1082*x1091))+((gconst123*gconst126*x1090)));
op[1]=(((x1094*x1123))+(((-1.0)*x1150))+(((-1.0)*gconst124*gconst126*x1094))+(((-1.0)*x1082*x1116))+((gconst127*x1144))+((gconst126*x1144))+(((-1.0)*x1094*x1130))+((x1116*x1123))+(((-1.0)*x1082*x1094)));
op[2]=((((-1.0)*gconst123*x1092*x1101))+((x1082*x1085))+x1148+(((-1.0)*x1082*x1143))+(((-1.0)*x1100*x1145))+(((-1.0)*x1091*x1095))+(((-1.0)*x1091*x1099))+(((-1.0)*x1152))+((x1089*x1090))+((x1082*x1125))+((x1086*x1091))+(((-1.0)*gconst115*x1082*x1101))+(((-16.0)*x1118))+(((-1.0)*gconst126*x1085*x1100))+((x1090*x1114))+(((-1.0)*gconst123*x1086*x1101))+(((-1.0)*gconst122*x1088))+(((-1.0)*gconst122*x1093))+(((-1.0)*gconst123*x1093))+((gconst123*gconst124*x1099))+((x1105*x1123))+((x1091*x1092))+(((-1.0)*x1078)));
op[3]=((((2.0)*gconst129*x1089))+(((2.0)*gconst127*x1085))+x1150+(((32.0)*gconst128))+(((-1.0)*x1153))+(((2.0)*gconst126*x1085))+((gconst125*gconst126*x1104))+((x1104*x1123))+(((-1.0)*x1092*x1116))+(((-32.0)*gconst125))+((gconst118*x1144))+(((-1.0)*gconst119*gconst122*x1084))+(((-1.0)*gconst116*gconst126*x1094))+(((-1.0)*x1084*x1097))+((x1094*x1095))+((x1094*x1099))+((gconst119*x1144))+(((-1.0)*x1082*x1110))+(((-1.0)*gconst116*gconst127*x1094))+(((-1.0)*x1082*x1104))+((x1099*x1116))+(((-1.0)*x1094*x1112))+(((-2.0)*gconst124*x1089))+(((-1.0)*x1110*x1130))+(((-1.0)*x1092*x1094))+(((-1.0)*x1094*x1124))+((gconst125*gconst127*x1104))+((x1095*x1116)));
op[4]=((64.0)+((x1114*x1117))+x1152+((gconst116*gconst129*x1089))+(((-1.0)*x1082*x1106))+x1078+x1081+(((-1.0)*gconst126*x1100*x1128))+((x1085*x1092))+(((-1.0)*x1085*x1095))+(((-1.0)*x1085*x1099))+((x1082*x1128))+(((-16.0)*x1119))+(((-16.0)*x1111))+(((-1.0)*x1149))+(((-1.0)*x1148))+(((-1.0)*gconst115*x1092*x1101))+(((-1.0)*gconst115*x1093))+(((-4.0)*x1097))+((x1089*x1117))+((x1090*x1113))+((x1099*x1105))+(((-1.0)*gconst125*x1099*x1121))+(((-1.0)*gconst114*x1088))+((x1083*x1118))+(((-1.0)*gconst122*x1103))+(((-1.0)*gconst122*x1109))+(((-1.0)*gconst115*x1086*x1101))+(((-1.0)*gconst120*x1097*x1101))+(((-1.0)*gconst114*x1093))+(((-1.0)*gconst125*x1095*x1121))+((x1091*x1098))+(((-1.0)*x1086*x1143))+((x1085*x1086))+(((-1.0)*gconst118*x1091*x1108))+(((-1.0)*x1092*x1143))+((x1092*x1125))+((x1095*x1105)));
op[5]=(((x1094*x1115))+(((-1.0)*x1098*x1116))+x1153+(((32.0)*gconst120))+(((2.0)*gconst125*x1083))+((gconst114*gconst127*x1087))+(((-1.0)*x1151))+(((-1.0)*gconst116*gconst118*x1094))+(((-1.0)*x1092*x1104))+(((-1.0)*x1092*x1110))+(((-1.0)*gconst115*gconst127*x1096))+(((2.0)*gconst118*x1085))+(((-1.0)*x1089*x1096))+(((-1.0)*x1084*x1129))+(((2.0)*gconst121*x1089))+(((-32.0)*gconst117))+((x1104*x1107))+((x1099*x1104))+(((-1.0)*x1094*x1098))+(((2.0)*gconst119*x1085))+(((-1.0)*gconst116*gconst119*x1094))+(((-1.0)*x1110*x1124))+(((-1.0)*x1110*x1112))+(((-1.0)*x1083*x1084))+((x1115*x1116))+((x1095*x1110))+((x1095*x1104))+((gconst114*gconst126*x1087)));
op[6]=(x1149+((x1102*x1114))+(((-1.0)*x1152))+((x1113*x1117))+((x1085*x1098))+(((-1.0)*gconst116*gconst120*x1097))+(((-1.0)*gconst114*x1107*x1108))+((x1089*x1102))+(((-1.0)*gconst117*x1095*x1121))+(((-1.0)*gconst115*x1109))+((x1083*x1119))+((x1083*x1111))+(((-4.0)*x1083))+(((-1.0)*gconst114*x1103))+(((-1.0)*x1092*x1106))+(((-1.0)*gconst118*x1085*x1108))+(((-1.0)*gconst117*x1099*x1121))+(((-1.0)*gconst115*x1098*x1101))+(((-1.0)*x1086*x1106))+(((-1.0)*x1081))+((x1092*x1128))+(((-16.0)*x1126))+((x1095*x1106)));
op[7]=((((-1.0)*x1096*x1129))+(((-1.0)*x1098*x1110))+x1151+((x1110*x1115))+((x1104*x1115))+((gconst114*gconst118*x1087))+(((-2.0)*gconst120*x1083))+(((-1.0)*x1096*x1113))+((x1083*x1087)));
op[8]=(((x1102*x1113))+(((-1.0)*x1140))+(((-1.0)*x1098*x1106))+(((-1.0)*gconst118*x1147))+((x1083*x1126)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1154=(gconst80*r20);
IkReal x1155=(gconst81*r21);
IkReal x1156=(cj4*r22);
IkReal x1157=(sj1*sj4);
IkReal x1158=(cj4*sj1);
IkReal x1159=((1.0)*cj1*sj4);
IkReal x1160=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*x1154*x1159))+(((-1.0)*x1155*x1159))+((r22*x1157))+((cj1*x1156))+((x1154*x1158))+((x1155*x1158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1154*x1157))+(((-1.0)*x1155*x1157))+((sj1*x1156))+(((-1.0)*r22*x1159))+(((-1.0)*x1155*x1160))+(((-1.0)*x1154*x1160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1154*x1159))+(((-1.0)*x1155*x1159))+((r22*x1157))+((cj1*x1156))+((x1154*x1158))+((x1155*x1158))))+IKsqr(((((-1.0)*x1154*x1157))+(((-1.0)*x1155*x1157))+((sj1*x1156))+(((-1.0)*r22*x1159))+(((-1.0)*x1155*x1160))+(((-1.0)*x1154*x1160))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1154*x1159))+(((-1.0)*x1155*x1159))+((r22*x1157))+((cj1*x1156))+((x1154*x1158))+((x1155*x1158))), ((((-1.0)*x1154*x1157))+(((-1.0)*x1155*x1157))+((sj1*x1156))+(((-1.0)*r22*x1159))+(((-1.0)*x1155*x1160))+(((-1.0)*x1154*x1160))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1161=IKsin(j2);
IkReal x1162=IKcos(j2);
IkReal x1163=((0.2215)*sj1);
IkReal x1164=((1.0)*sj0);
IkReal x1165=(cj4*gconst80);
IkReal x1166=(gconst81*r11);
IkReal x1167=((0.0055)*sj0);
IkReal x1168=(gconst81*r21);
IkReal x1169=((1.0)*cj4);
IkReal x1170=(cj0*r02);
IkReal x1171=(sj0*sj4);
IkReal x1172=(gconst80*r20);
IkReal x1173=(gconst80*r10);
IkReal x1174=((1.0)*cj0);
IkReal x1175=((1.0)*sj4);
IkReal x1176=(sj1*x1162);
IkReal x1177=(cj1*x1161);
IkReal x1178=(cj1*x1162);
IkReal x1179=(cj0*gconst80*r00);
IkReal x1180=(sj1*x1161);
IkReal x1181=(cj0*gconst81*r01);
IkReal x1182=(x1177+x1176);
evalcond[0]=(x1182+((sj4*x1168))+((sj4*x1172))+(((-1.0)*r22*x1169)));
evalcond[1]=(x1180+(((-1.0)*x1168*x1169))+(((-1.0)*r20*x1165))+(((-1.0)*r22*x1175))+(((-1.0)*x1178)));
evalcond[2]=(((x1162*x1163))+(((-0.03)*x1180))+(((-0.0055)*x1172))+(((0.21)*cj1))+(((0.2215)*x1177))+(((-0.0055)*x1168))+(((-1.0)*pz))+(((0.03)*x1178)));
evalcond[3]=(x1178+(((-1.0)*cj4*r12*x1164))+((sj4*x1181))+((x1166*x1171))+((sj4*x1179))+(((-1.0)*x1169*x1170))+(((-1.0)*x1180))+((x1171*x1173)));
evalcond[4]=(x1182+(((-1.0)*cj4*x1164*x1166))+(((-1.0)*x1169*x1181))+(((-1.0)*r12*sj4*x1164))+(((-1.0)*r00*x1165*x1174))+(((-1.0)*r10*x1164*x1165))+(((-1.0)*x1170*x1175)));
evalcond[5]=((((-1.0)*x1166*x1167))+(((-0.03)*x1177))+(((-0.03)*x1176))+(((-0.0055)*x1179))+(((0.2215)*x1178))+(((-1.0)*py*x1164))+(((-1.0)*x1167*x1173))+(((-1.0)*px*x1174))+(((-0.0055)*x1181))+(((-0.21)*sj1))+(((-1.0)*x1161*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1183=cj5*cj5;
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(IKsign(((1.0)+(((2.0)*cj5*r20*r21*sj5))+(((r21*r21)*(((-1.0)+x1183))))+(((-1.0)*x1183*(r20*r20))))),-1);
if(!x1184.valid){
continue;
}
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1184.value)))+(x1185.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1186=IKcos(j0);
IkReal x1187=IKsin(j0);
IkReal x1188=(r11*sj5);
IkReal x1189=((1.0)*sj4);
IkReal x1190=(r00*sj5);
IkReal x1191=(r01*sj5);
IkReal x1192=((1.0)*x1187);
IkReal x1193=(cj5*x1187);
IkReal x1194=(cj5*x1186);
IkReal x1195=(r12*x1186);
IkReal x1196=(r10*sj5*x1186);
evalcond[0]=(((r00*x1194))+((r10*x1193))+(((-1.0)*x1188*x1192))+(((-1.0)*x1186*x1191)));
evalcond[1]=((-1.0)+((x1186*x1188))+(((-1.0)*x1191*x1192))+((r00*x1193))+(((-1.0)*r10*x1194)));
evalcond[2]=((((0.0055)*r11*x1194))+((py*x1186))+(((-0.0055)*x1187*x1190))+(((0.0055)*x1196))+(((-0.0055)*r01*x1193))+(((-1.0)*px*x1192)));
evalcond[3]=((((-1.0)*cj4*r02*x1192))+(((-1.0)*x1189*x1196))+(((-1.0)*r11*x1189*x1194))+((cj4*x1195))+((r01*sj4*x1193))+((sj4*x1187*x1190)));
evalcond[4]=(((sj4*x1195))+(((-1.0)*r02*x1187*x1189))+((cj4*x1196))+(((-1.0)*cj4*x1190*x1192))+((cj4*r11*x1194))+(((-1.0)*cj4*cj5*r01*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1197=((12.0)*pz);
IkReal x1198=((0.36)*pz);
IkReal x1199=(cj4*r22);
IkReal x1200=(cj5*r21);
IkReal x1201=((0.36)*cj4);
IkReal x1202=((0.886)*sj4);
IkReal x1203=(cj0*px);
IkReal x1204=((0.014619)*cj5);
IkReal x1205=(cj0*r01);
IkReal x1206=(r22*sj4);
IkReal x1207=(r11*sj0);
IkReal x1208=(r20*sj5);
IkReal x1209=((2.658)*sj4);
IkReal x1210=((0.004873)*cj5);
IkReal x1211=(py*sj0);
IkReal x1212=((0.36)*x1206);
IkReal x1213=((0.066)*x1208);
IkReal x1214=((0.066)*x1200);
IkReal x1215=((2.658)*x1199);
IkReal x1216=((2.658)*x1203);
IkReal x1217=((0.00198)*x1208);
IkReal x1218=((0.599547)*x1206);
IkReal x1219=((2.658)*x1211);
IkReal x1220=((0.00198)*x1200);
IkReal x1221=(cj0*r00*sj5);
IkReal x1222=(cj4*x1208);
IkReal x1223=(r10*sj0*sj5);
IkReal x1224=(x1208*x1209);
IkReal x1225=(x1201*x1208);
IkReal x1226=(x1200*x1209);
IkReal x1227=(x1200*x1201);
IkReal x1228=(x1204*x1207);
IkReal x1229=((0.014619)*x1221);
IkReal x1230=((0.599547)*cj4*x1200);
IkReal x1231=(x1204*x1205);
IkReal x1232=((0.014619)*x1223);
IkReal x1233=((0.599547)*x1222);
IkReal x1234=(x1197+x1227+x1226+x1225+x1224+x1212+x1213+x1214);
IkReal x1235=(x1198+x1230+x1231+x1232+x1233+x1220+x1229+x1228+x1216+x1217+x1218+x1219);
j1eval[0]=((1.48848)+(IKabs(((0.0252)+(((0.12)*pz))+(((0.00066)*x1208))+(((0.00066)*x1200))+(((0.199849)*x1206))+(((0.886)*x1211))+((x1207*x1210))+(((0.004873)*x1223))+(((0.004873)*x1221))+((x1205*x1210))+(((0.199849)*x1222))+(((0.199849)*cj4*x1200))+(((0.886)*x1203)))))+(IKabs(((0.84)+(((4.0)*pz))+(((-0.886)*x1199))+(((0.12)*x1222))+(((0.022)*x1208))+(((0.022)*x1200))+((x1202*x1208))+((x1200*x1202))+(((0.12)*x1206))+(((0.12)*cj4*x1200)))))+(IKabs(((0.84)+x1234+(((-1.0)*x1215)))))+(IKabs(((-0.84)+x1234+(((-1.0)*x1215)))))+(IKabs(((0.0252)+x1235)))+(IKabs(((-0.0252)+x1235))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1236=((12.0)*pz);
IkReal x1237=((4.0)*pz);
IkReal x1238=(cj4*r22);
IkReal x1239=(cj5*r21);
IkReal x1240=((0.36)*cj4);
IkReal x1241=((0.886)*sj4);
IkReal x1242=(r20*sj5);
IkReal x1243=((2.658)*sj4);
IkReal x1244=((0.12)*cj4);
IkReal x1245=(r22*sj4);
IkReal x1246=((0.36)*x1245);
IkReal x1247=((0.066)*x1242);
IkReal x1248=((0.066)*x1239);
IkReal x1249=((2.658)*x1238);
IkReal x1250=((0.022)*x1239);
IkReal x1251=((0.12)*x1245);
IkReal x1252=((0.022)*x1242);
IkReal x1253=((0.886)*x1238);
IkReal x1254=(x1242*x1243);
IkReal x1255=(x1240*x1242);
IkReal x1256=(x1239*x1243);
IkReal x1257=(x1239*x1240);
IkReal x1258=(x1242*x1244);
IkReal x1259=(x1241*x1242);
IkReal x1260=(x1239*x1241);
IkReal x1261=(x1239*x1244);
IkReal x1262=(x1247+x1246+x1248+x1256+x1257+x1254+x1255+x1236);
IkReal x1263=(x1261+x1260+x1252+x1250+x1251+x1258+x1259+x1237);
op[0]=((0.84)+(((-1.0)*x1253))+x1263);
op[1]=0;
op[2]=((0.84)+x1262+(((-1.0)*x1249)));
op[3]=0;
op[4]=((-0.84)+x1262+(((-1.0)*x1249)));
op[5]=0;
op[6]=((-0.84)+(((-1.0)*x1253))+x1263);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1264=((0.12)*pz);
IkReal x1265=((0.36)*pz);
IkReal x1266=(cj0*px);
IkReal x1267=(r22*sj4);
IkReal x1268=((0.014619)*cj5);
IkReal x1269=(cj0*r01);
IkReal x1270=(r20*sj5);
IkReal x1271=((0.599547)*cj4);
IkReal x1272=(r11*sj0);
IkReal x1273=(cj5*r21);
IkReal x1274=((0.199849)*cj4);
IkReal x1275=((0.004873)*cj5);
IkReal x1276=(py*sj0);
IkReal x1277=((0.00066)*x1273);
IkReal x1278=((2.658)*x1266);
IkReal x1279=((0.00198)*x1270);
IkReal x1280=((0.599547)*x1267);
IkReal x1281=((2.658)*x1276);
IkReal x1282=((0.00198)*x1273);
IkReal x1283=((0.886)*x1276);
IkReal x1284=((0.00066)*x1270);
IkReal x1285=((0.886)*x1266);
IkReal x1286=((0.199849)*x1267);
IkReal x1287=(cj0*r00*sj5);
IkReal x1288=(r10*sj0*sj5);
IkReal x1289=(x1268*x1272);
IkReal x1290=((0.014619)*x1287);
IkReal x1291=(x1271*x1273);
IkReal x1292=(x1268*x1269);
IkReal x1293=((0.014619)*x1288);
IkReal x1294=(x1270*x1271);
IkReal x1295=((0.004873)*x1287);
IkReal x1296=(x1269*x1275);
IkReal x1297=(x1273*x1274);
IkReal x1298=(x1272*x1275);
IkReal x1299=(x1270*x1274);
IkReal x1300=((0.004873)*x1288);
IkReal x1301=(x1300+x1277+x1264+x1285+x1284+x1286+x1283+x1298+x1299+x1296+x1297+x1295);
IkReal x1302=(x1278+x1279+x1265+x1281+x1280+x1282+x1289+x1292+x1293+x1290+x1291+x1294);
j1evalpoly[0]=((-0.0252)+x1301+(((htj1*htj1)*(((-0.0252)+x1302))))+(((0.37212)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0252)+x1301))))+(((0.74424)*(htj1*htj1*htj1)))+(((0.37212)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0252)+x1302)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1303=(cj4*r22);
IkReal x1304=((1.0)*cj1);
IkReal x1305=(sj1*sj4);
IkReal x1306=(cj5*r21);
IkReal x1307=(cj4*r20*sj5);
IkReal x1308=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*sj4*x1304*x1306))+((cj1*x1303))+((r22*x1305))+((sj1*x1307))+((cj4*sj1*x1306))+(((-1.0)*r20*sj4*sj5*x1304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1305))+(((-1.0)*r22*sj4*x1304))+(((-1.0)*x1305*x1306))+(((-1.0)*cj4*x1304*x1306))+((sj1*x1303))+(((-1.0)*x1304*x1307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1304*x1306))+((cj1*x1303))+((r22*x1305))+((sj1*x1307))+((cj4*sj1*x1306))+(((-1.0)*r20*sj4*sj5*x1304))))+IKsqr(((((-1.0)*r20*sj5*x1305))+(((-1.0)*r22*sj4*x1304))+(((-1.0)*x1305*x1306))+(((-1.0)*cj4*x1304*x1306))+((sj1*x1303))+(((-1.0)*x1304*x1307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1304*x1306))+((cj1*x1303))+((r22*x1305))+((sj1*x1307))+((cj4*sj1*x1306))+(((-1.0)*r20*sj4*sj5*x1304))), ((((-1.0)*r20*sj5*x1305))+(((-1.0)*r22*sj4*x1304))+(((-1.0)*x1305*x1306))+(((-1.0)*cj4*x1304*x1306))+((sj1*x1303))+(((-1.0)*x1304*x1307))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1309=IKsin(j2);
IkReal x1310=IKcos(j2);
IkReal x1311=(cj0*r01);
IkReal x1312=((1.0)*sj0);
IkReal x1313=((0.0055)*sj5);
IkReal x1314=(r10*sj0);
IkReal x1315=(cj5*sj4);
IkReal x1316=((1.0)*cj4);
IkReal x1317=(cj0*r02);
IkReal x1318=(r20*sj5);
IkReal x1319=((0.0055)*cj5);
IkReal x1320=(cj0*r00);
IkReal x1321=(r11*sj0);
IkReal x1322=(sj4*sj5);
IkReal x1323=((1.0)*sj4);
IkReal x1324=(sj1*x1310);
IkReal x1325=(cj1*x1309);
IkReal x1326=(cj1*x1310);
IkReal x1327=(sj1*x1309);
IkReal x1328=(cj5*x1316);
IkReal x1329=(x1324+x1325);
evalcond[0]=(x1329+(((-1.0)*r22*x1316))+((sj4*x1318))+((r21*x1315)));
evalcond[1]=(x1327+(((-1.0)*r22*x1323))+(((-1.0)*x1326))+(((-1.0)*r21*x1328))+(((-1.0)*x1316*x1318)));
evalcond[2]=((((0.21)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1313))+(((-0.03)*x1327))+(((0.03)*x1326))+(((-1.0)*r21*x1319))+(((0.2215)*x1325))+(((0.2215)*x1324)));
evalcond[3]=(x1326+((x1311*x1315))+((x1320*x1322))+((x1314*x1322))+(((-1.0)*x1327))+(((-1.0)*cj4*r12*x1312))+(((-1.0)*x1316*x1317))+((x1315*x1321)));
evalcond[4]=((((-1.0)*cj4*r10*sj5*x1312))+x1329+(((-1.0)*cj4*cj5*r11*x1312))+(((-1.0)*sj5*x1316*x1320))+(((-1.0)*r12*sj4*x1312))+(((-1.0)*x1311*x1328))+(((-1.0)*x1317*x1323)));
evalcond[5]=((((-1.0)*x1311*x1319))+(((-1.0)*x1319*x1321))+(((-1.0)*x1313*x1314))+(((-1.0)*x1313*x1320))+(((-0.03)*x1325))+(((-0.03)*x1324))+(((-1.0)*py*x1312))+(((-0.2215)*x1327))+(((-0.21)*sj1))+(((-1.0)*cj0*px))+(((0.2215)*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1330=(cj4*sj5);
IkReal x1331=((1.0)*sj4);
IkReal x1332=(cj4*cj5);
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x1331))+(((-1.0)*cj5*r21*x1331)))),-1);
if(!x1333.valid){
continue;
}
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal((((r11*x1332))+((r10*x1330))+((r12*sj4)))),IkReal((((r00*x1330))+((r01*x1332))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1333.value)))+(x1334.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1335=IKcos(j0);
IkReal x1336=IKsin(j0);
IkReal x1337=(r11*sj5);
IkReal x1338=((1.0)*sj4);
IkReal x1339=(r00*sj5);
IkReal x1340=(r01*sj5);
IkReal x1341=((1.0)*x1336);
IkReal x1342=(cj5*x1336);
IkReal x1343=(cj5*x1335);
IkReal x1344=(r12*x1335);
IkReal x1345=(r10*sj5*x1335);
evalcond[0]=(((r00*x1343))+(((-1.0)*x1337*x1341))+(((-1.0)*x1335*x1340))+((r10*x1342)));
evalcond[1]=((-1.0)+(((-1.0)*x1340*x1341))+(((-1.0)*r10*x1343))+((x1335*x1337))+((r00*x1342)));
evalcond[2]=(((py*x1335))+(((-1.0)*px*x1341))+(((0.0055)*r11*x1343))+(((-0.0055)*x1336*x1339))+(((-0.0055)*r01*x1342))+(((0.0055)*x1345)));
evalcond[3]=((((-1.0)*x1338*x1345))+((sj4*x1336*x1339))+(((-1.0)*r11*x1338*x1343))+((cj4*x1344))+((r01*sj4*x1342))+(((-1.0)*cj4*r02*x1341)));
evalcond[4]=((((-1.0)*cj4*x1339*x1341))+((sj4*x1344))+(((-1.0)*cj4*cj5*r01*x1341))+((cj4*x1345))+(((-1.0)*r02*x1336*x1338))+((cj4*r11*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1346=((12.0)*pz);
IkReal x1347=((0.36)*pz);
IkReal x1348=(cj4*r22);
IkReal x1349=(cj5*r21);
IkReal x1350=((0.36)*cj4);
IkReal x1351=((0.886)*sj4);
IkReal x1352=(cj0*px);
IkReal x1353=((0.014619)*cj5);
IkReal x1354=(cj0*r01);
IkReal x1355=(r22*sj4);
IkReal x1356=(r11*sj0);
IkReal x1357=(r20*sj5);
IkReal x1358=((2.658)*sj4);
IkReal x1359=((0.004873)*cj5);
IkReal x1360=(py*sj0);
IkReal x1361=((0.36)*x1355);
IkReal x1362=((0.066)*x1357);
IkReal x1363=((0.066)*x1349);
IkReal x1364=((2.658)*x1348);
IkReal x1365=((2.658)*x1352);
IkReal x1366=((0.00198)*x1357);
IkReal x1367=((0.599547)*x1355);
IkReal x1368=((2.658)*x1360);
IkReal x1369=((0.00198)*x1349);
IkReal x1370=(cj0*r00*sj5);
IkReal x1371=(cj4*x1357);
IkReal x1372=(r10*sj0*sj5);
IkReal x1373=(x1357*x1358);
IkReal x1374=(x1350*x1357);
IkReal x1375=(x1349*x1358);
IkReal x1376=(x1349*x1350);
IkReal x1377=(x1353*x1356);
IkReal x1378=((0.014619)*x1370);
IkReal x1379=((0.599547)*cj4*x1349);
IkReal x1380=(x1353*x1354);
IkReal x1381=((0.014619)*x1372);
IkReal x1382=((0.599547)*x1371);
IkReal x1383=(x1346+x1362+x1363+x1361+x1373+x1375+x1374+x1376);
IkReal x1384=(x1347+x1366+x1367+x1365+x1368+x1369+x1377+x1379+x1378+x1380+x1381+x1382);
j1eval[0]=((1.48848)+(IKabs(((0.0252)+(((0.12)*pz))+(((0.004873)*x1370))+(((0.004873)*x1372))+(((0.199849)*x1355))+(((0.00066)*x1357))+(((0.199849)*cj4*x1349))+((x1354*x1359))+(((0.00066)*x1349))+(((0.199849)*x1371))+(((0.886)*x1352))+(((0.886)*x1360))+((x1356*x1359)))))+(IKabs(((0.84)+x1383+(((-1.0)*x1364)))))+(IKabs(((0.0252)+x1384)))+(IKabs(((-0.84)+x1383+(((-1.0)*x1364)))))+(IKabs(((0.84)+(((4.0)*pz))+(((0.12)*cj4*x1349))+((x1349*x1351))+(((0.022)*x1357))+(((0.022)*x1349))+((x1351*x1357))+(((-0.886)*x1348))+(((0.12)*x1371))+(((0.12)*x1355)))))+(IKabs(((-0.0252)+x1384))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1385=((12.0)*pz);
IkReal x1386=((4.0)*pz);
IkReal x1387=(cj4*r22);
IkReal x1388=(cj5*r21);
IkReal x1389=((0.36)*cj4);
IkReal x1390=((0.886)*sj4);
IkReal x1391=(r20*sj5);
IkReal x1392=((2.658)*sj4);
IkReal x1393=((0.12)*cj4);
IkReal x1394=(r22*sj4);
IkReal x1395=((0.36)*x1394);
IkReal x1396=((0.066)*x1391);
IkReal x1397=((0.066)*x1388);
IkReal x1398=((2.658)*x1387);
IkReal x1399=((0.022)*x1388);
IkReal x1400=((0.12)*x1394);
IkReal x1401=((0.022)*x1391);
IkReal x1402=((0.886)*x1387);
IkReal x1403=(x1391*x1392);
IkReal x1404=(x1389*x1391);
IkReal x1405=(x1388*x1392);
IkReal x1406=(x1388*x1389);
IkReal x1407=(x1391*x1393);
IkReal x1408=(x1390*x1391);
IkReal x1409=(x1388*x1390);
IkReal x1410=(x1388*x1393);
IkReal x1411=(x1385+x1397+x1396+x1395+x1403+x1406+x1405+x1404);
IkReal x1412=(x1386+x1399+x1410+x1409+x1408+x1401+x1400+x1407);
op[0]=((0.84)+(((-1.0)*x1402))+x1412);
op[1]=0;
op[2]=((0.84)+x1411+(((-1.0)*x1398)));
op[3]=0;
op[4]=((-0.84)+x1411+(((-1.0)*x1398)));
op[5]=0;
op[6]=((-0.84)+(((-1.0)*x1402))+x1412);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1413=((0.12)*pz);
IkReal x1414=((0.36)*pz);
IkReal x1415=(cj0*px);
IkReal x1416=(r22*sj4);
IkReal x1417=((0.014619)*cj5);
IkReal x1418=(cj0*r01);
IkReal x1419=(r20*sj5);
IkReal x1420=((0.599547)*cj4);
IkReal x1421=(r11*sj0);
IkReal x1422=(cj5*r21);
IkReal x1423=((0.199849)*cj4);
IkReal x1424=((0.004873)*cj5);
IkReal x1425=(py*sj0);
IkReal x1426=((0.00066)*x1422);
IkReal x1427=((2.658)*x1415);
IkReal x1428=((0.00198)*x1419);
IkReal x1429=((0.599547)*x1416);
IkReal x1430=((2.658)*x1425);
IkReal x1431=((0.00198)*x1422);
IkReal x1432=((0.886)*x1425);
IkReal x1433=((0.00066)*x1419);
IkReal x1434=((0.886)*x1415);
IkReal x1435=((0.199849)*x1416);
IkReal x1436=(cj0*r00*sj5);
IkReal x1437=(r10*sj0*sj5);
IkReal x1438=(x1417*x1421);
IkReal x1439=((0.014619)*x1436);
IkReal x1440=(x1420*x1422);
IkReal x1441=(x1417*x1418);
IkReal x1442=((0.014619)*x1437);
IkReal x1443=(x1419*x1420);
IkReal x1444=((0.004873)*x1436);
IkReal x1445=(x1418*x1424);
IkReal x1446=(x1422*x1423);
IkReal x1447=(x1421*x1424);
IkReal x1448=(x1419*x1423);
IkReal x1449=((0.004873)*x1437);
IkReal x1450=(x1426+x1413+x1434+x1435+x1432+x1433+x1447+x1446+x1445+x1444+x1449+x1448);
IkReal x1451=(x1427+x1429+x1428+x1414+x1430+x1431+x1438+x1439+x1443+x1442+x1441+x1440);
j1evalpoly[0]=((-0.0252)+(((htj1*htj1)*(((-0.0252)+x1451))))+(((0.37212)*htj1))+(((0.74424)*(htj1*htj1*htj1)))+x1450+(((htj1*htj1*htj1*htj1)*(((0.0252)+x1451))))+(((0.37212)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0252)+x1450)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1452=(cj4*r22);
IkReal x1453=((1.0)*cj1);
IkReal x1454=(sj1*sj4);
IkReal x1455=(cj5*r21);
IkReal x1456=(cj4*r20*sj5);
IkReal x1457=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*x1452))+((cj4*sj1*x1455))+(((-1.0)*sj4*x1453*x1455))+((sj1*x1456))+((r22*x1454))+(((-1.0)*r20*sj4*sj5*x1453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1454))+(((-1.0)*r22*sj4*x1453))+(((-1.0)*x1454*x1455))+(((-1.0)*cj4*x1453*x1455))+(((-1.0)*x1453*x1456))+((sj1*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1452))+((cj4*sj1*x1455))+(((-1.0)*sj4*x1453*x1455))+((sj1*x1456))+((r22*x1454))+(((-1.0)*r20*sj4*sj5*x1453))))+IKsqr(((((-1.0)*r20*sj5*x1454))+(((-1.0)*r22*sj4*x1453))+(((-1.0)*x1454*x1455))+(((-1.0)*cj4*x1453*x1455))+(((-1.0)*x1453*x1456))+((sj1*x1452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1452))+((cj4*sj1*x1455))+(((-1.0)*sj4*x1453*x1455))+((sj1*x1456))+((r22*x1454))+(((-1.0)*r20*sj4*sj5*x1453))), ((((-1.0)*r20*sj5*x1454))+(((-1.0)*r22*sj4*x1453))+(((-1.0)*x1454*x1455))+(((-1.0)*cj4*x1453*x1455))+(((-1.0)*x1453*x1456))+((sj1*x1452))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1458=IKsin(j2);
IkReal x1459=IKcos(j2);
IkReal x1460=(cj0*r01);
IkReal x1461=((1.0)*sj0);
IkReal x1462=((0.0055)*sj5);
IkReal x1463=(r10*sj0);
IkReal x1464=(cj5*sj4);
IkReal x1465=((1.0)*cj4);
IkReal x1466=(cj0*r02);
IkReal x1467=(r20*sj5);
IkReal x1468=((0.0055)*cj5);
IkReal x1469=(cj0*r00);
IkReal x1470=(r11*sj0);
IkReal x1471=(sj4*sj5);
IkReal x1472=((1.0)*sj4);
IkReal x1473=(sj1*x1459);
IkReal x1474=(cj1*x1458);
IkReal x1475=(cj1*x1459);
IkReal x1476=(sj1*x1458);
IkReal x1477=(cj5*x1465);
IkReal x1478=(x1473+x1474);
evalcond[0]=((((-1.0)*r22*x1465))+x1478+((sj4*x1467))+((r21*x1464)));
evalcond[1]=((((-1.0)*r22*x1472))+(((-1.0)*r21*x1477))+(((-1.0)*x1475))+x1476+(((-1.0)*x1465*x1467)));
evalcond[2]=((((0.21)*cj1))+(((0.03)*x1475))+(((-1.0)*pz))+(((-1.0)*r21*x1468))+(((-1.0)*r20*x1462))+(((0.2215)*x1474))+(((0.2215)*x1473))+(((-0.03)*x1476)));
evalcond[3]=((((-1.0)*x1476))+((x1463*x1471))+((x1460*x1464))+(((-1.0)*cj4*r12*x1461))+x1475+(((-1.0)*x1465*x1466))+((x1469*x1471))+((x1464*x1470)));
evalcond[4]=((((-1.0)*cj4*r10*sj5*x1461))+(((-1.0)*r12*sj4*x1461))+(((-1.0)*x1460*x1477))+(((-1.0)*cj4*cj5*r11*x1461))+(((-1.0)*sj5*x1465*x1469))+x1478+(((-1.0)*x1466*x1472)));
evalcond[5]=((((-1.0)*py*x1461))+(((-1.0)*x1462*x1463))+(((-1.0)*x1462*x1469))+(((-1.0)*x1468*x1470))+(((0.2215)*x1475))+(((-1.0)*x1460*x1468))+(((-0.21)*sj1))+(((-0.03)*x1474))+(((-0.03)*x1473))+(((-0.2215)*x1476))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1479=((0.0055)*cj5);
IkReal x1480=((0.0055)*sj5);
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign((((cj5*rxp0_2))+(((-1.0)*rxp1_2*sj5))+(((0.0055)*r22)))),-1);
if(!x1481.valid){
continue;
}
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal((((r10*x1480))+((r11*x1479))+py)),IkReal((((r00*x1480))+px+((r01*x1479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1481.value)))+(x1482.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1483=IKcos(j0);
IkReal x1484=IKsin(j0);
IkReal x1485=(r11*sj5);
IkReal x1486=((1.0)*sj4);
IkReal x1487=(r00*sj5);
IkReal x1488=(r01*sj5);
IkReal x1489=((1.0)*x1484);
IkReal x1490=(cj5*x1484);
IkReal x1491=(cj5*x1483);
IkReal x1492=(r12*x1483);
IkReal x1493=(r10*sj5*x1483);
evalcond[0]=(((r10*x1490))+(((-1.0)*x1483*x1488))+((r00*x1491))+(((-1.0)*x1485*x1489)));
evalcond[1]=((-1.0)+((r00*x1490))+(((-1.0)*r10*x1491))+((x1483*x1485))+(((-1.0)*x1488*x1489)));
evalcond[2]=((((-0.0055)*r01*x1490))+(((0.0055)*r11*x1491))+((py*x1483))+(((-1.0)*px*x1489))+(((-0.0055)*x1484*x1487))+(((0.0055)*x1493)));
evalcond[3]=((((-1.0)*cj4*r02*x1489))+(((-1.0)*x1486*x1493))+((r01*sj4*x1490))+((sj4*x1484*x1487))+(((-1.0)*r11*x1486*x1491))+((cj4*x1492)));
evalcond[4]=((((-1.0)*cj4*cj5*r01*x1489))+(((-1.0)*r02*x1484*x1486))+((sj4*x1492))+((cj4*x1493))+(((-1.0)*cj4*x1487*x1489))+((cj4*r11*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1494=((12.0)*pz);
IkReal x1495=((0.36)*pz);
IkReal x1496=(cj4*r22);
IkReal x1497=(cj5*r21);
IkReal x1498=((0.36)*cj4);
IkReal x1499=((0.886)*sj4);
IkReal x1500=(cj0*px);
IkReal x1501=((0.014619)*cj5);
IkReal x1502=(cj0*r01);
IkReal x1503=(r22*sj4);
IkReal x1504=(r11*sj0);
IkReal x1505=(r20*sj5);
IkReal x1506=((2.658)*sj4);
IkReal x1507=((0.004873)*cj5);
IkReal x1508=(py*sj0);
IkReal x1509=((0.36)*x1503);
IkReal x1510=((0.066)*x1505);
IkReal x1511=((0.066)*x1497);
IkReal x1512=((2.658)*x1496);
IkReal x1513=((2.658)*x1500);
IkReal x1514=((0.00198)*x1505);
IkReal x1515=((0.599547)*x1503);
IkReal x1516=((2.658)*x1508);
IkReal x1517=((0.00198)*x1497);
IkReal x1518=(cj0*r00*sj5);
IkReal x1519=(cj4*x1505);
IkReal x1520=(r10*sj0*sj5);
IkReal x1521=(x1505*x1506);
IkReal x1522=(x1498*x1505);
IkReal x1523=(x1497*x1506);
IkReal x1524=(x1497*x1498);
IkReal x1525=(x1501*x1504);
IkReal x1526=((0.014619)*x1518);
IkReal x1527=((0.599547)*cj4*x1497);
IkReal x1528=(x1501*x1502);
IkReal x1529=((0.014619)*x1520);
IkReal x1530=((0.599547)*x1519);
IkReal x1531=(x1524+x1521+x1522+x1523+x1509+x1511+x1510+x1494);
IkReal x1532=(x1525+x1526+x1527+x1528+x1529+x1530+x1515+x1514+x1517+x1516+x1513+x1495);
j1eval[0]=((1.48848)+(IKabs(((0.0252)+(((0.12)*pz))+(((0.886)*x1500))+(((0.886)*x1508))+((x1504*x1507))+(((0.199849)*x1503))+(((0.004873)*x1518))+(((0.199849)*x1519))+(((0.004873)*x1520))+(((0.199849)*cj4*x1497))+((x1502*x1507))+(((0.00066)*x1505))+(((0.00066)*x1497)))))+(IKabs(((0.0252)+x1532)))+(IKabs(((0.84)+((x1499*x1505))+(((-0.886)*x1496))+(((0.12)*cj4*x1497))+(((4.0)*pz))+(((0.022)*x1497))+(((0.022)*x1505))+((x1497*x1499))+(((0.12)*x1503))+(((0.12)*x1519)))))+(IKabs(((-0.84)+(((-1.0)*x1512))+x1531)))+(IKabs(((0.84)+(((-1.0)*x1512))+x1531)))+(IKabs(((-0.0252)+x1532))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1533=((12.0)*pz);
IkReal x1534=((4.0)*pz);
IkReal x1535=(cj4*r22);
IkReal x1536=(cj5*r21);
IkReal x1537=((0.36)*cj4);
IkReal x1538=((0.886)*sj4);
IkReal x1539=(r20*sj5);
IkReal x1540=((2.658)*sj4);
IkReal x1541=((0.12)*cj4);
IkReal x1542=(r22*sj4);
IkReal x1543=((0.36)*x1542);
IkReal x1544=((0.066)*x1539);
IkReal x1545=((0.066)*x1536);
IkReal x1546=((2.658)*x1535);
IkReal x1547=((0.022)*x1536);
IkReal x1548=((0.12)*x1542);
IkReal x1549=((0.022)*x1539);
IkReal x1550=((0.886)*x1535);
IkReal x1551=(x1539*x1540);
IkReal x1552=(x1537*x1539);
IkReal x1553=(x1536*x1540);
IkReal x1554=(x1536*x1537);
IkReal x1555=(x1539*x1541);
IkReal x1556=(x1538*x1539);
IkReal x1557=(x1536*x1538);
IkReal x1558=(x1536*x1541);
IkReal x1559=(x1544+x1545+x1543+x1551+x1553+x1552+x1554+x1533);
IkReal x1560=(x1547+x1548+x1549+x1555+x1557+x1556+x1558+x1534);
op[0]=((0.84)+x1560+(((-1.0)*x1550)));
op[1]=0;
op[2]=((0.84)+x1559+(((-1.0)*x1546)));
op[3]=0;
op[4]=((-0.84)+x1559+(((-1.0)*x1546)));
op[5]=0;
op[6]=((-0.84)+x1560+(((-1.0)*x1550)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1561=((0.12)*pz);
IkReal x1562=((0.36)*pz);
IkReal x1563=(cj0*px);
IkReal x1564=(r22*sj4);
IkReal x1565=((0.014619)*cj5);
IkReal x1566=(cj0*r01);
IkReal x1567=(r20*sj5);
IkReal x1568=((0.599547)*cj4);
IkReal x1569=(r11*sj0);
IkReal x1570=(cj5*r21);
IkReal x1571=((0.199849)*cj4);
IkReal x1572=((0.004873)*cj5);
IkReal x1573=(py*sj0);
IkReal x1574=((0.00066)*x1570);
IkReal x1575=((2.658)*x1563);
IkReal x1576=((0.00198)*x1567);
IkReal x1577=((0.599547)*x1564);
IkReal x1578=((2.658)*x1573);
IkReal x1579=((0.00198)*x1570);
IkReal x1580=((0.886)*x1573);
IkReal x1581=((0.00066)*x1567);
IkReal x1582=((0.886)*x1563);
IkReal x1583=((0.199849)*x1564);
IkReal x1584=(cj0*r00*sj5);
IkReal x1585=(r10*sj0*sj5);
IkReal x1586=(x1565*x1569);
IkReal x1587=((0.014619)*x1584);
IkReal x1588=(x1568*x1570);
IkReal x1589=(x1565*x1566);
IkReal x1590=((0.014619)*x1585);
IkReal x1591=(x1567*x1568);
IkReal x1592=((0.004873)*x1584);
IkReal x1593=(x1566*x1572);
IkReal x1594=(x1570*x1571);
IkReal x1595=(x1569*x1572);
IkReal x1596=(x1567*x1571);
IkReal x1597=((0.004873)*x1585);
IkReal x1598=(x1561+x1574+x1582+x1583+x1580+x1581+x1595+x1594+x1597+x1596+x1593+x1592);
IkReal x1599=(x1562+x1579+x1578+x1577+x1576+x1575+x1588+x1589+x1586+x1587+x1591+x1590);
j1evalpoly[0]=((-0.0252)+(((htj1*htj1)*(((-0.0252)+x1599))))+(((htj1*htj1*htj1*htj1)*(((0.0252)+x1599))))+x1598+(((0.37212)*htj1))+(((0.74424)*(htj1*htj1*htj1)))+(((0.37212)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0252)+x1598)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1600=(cj4*r22);
IkReal x1601=((1.0)*cj1);
IkReal x1602=(sj1*sj4);
IkReal x1603=(cj5*r21);
IkReal x1604=(cj4*r20*sj5);
IkReal x1605=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*x1600))+(((-1.0)*sj4*x1601*x1603))+((cj4*sj1*x1603))+((sj1*x1604))+(((-1.0)*r20*sj4*sj5*x1601))+((r22*x1602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1602))+(((-1.0)*r22*sj4*x1601))+(((-1.0)*x1601*x1604))+((sj1*x1600))+(((-1.0)*x1602*x1603))+(((-1.0)*cj4*x1601*x1603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1600))+(((-1.0)*sj4*x1601*x1603))+((cj4*sj1*x1603))+((sj1*x1604))+(((-1.0)*r20*sj4*sj5*x1601))+((r22*x1602))))+IKsqr(((((-1.0)*r20*sj5*x1602))+(((-1.0)*r22*sj4*x1601))+(((-1.0)*x1601*x1604))+((sj1*x1600))+(((-1.0)*x1602*x1603))+(((-1.0)*cj4*x1601*x1603))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1600))+(((-1.0)*sj4*x1601*x1603))+((cj4*sj1*x1603))+((sj1*x1604))+(((-1.0)*r20*sj4*sj5*x1601))+((r22*x1602))), ((((-1.0)*r20*sj5*x1602))+(((-1.0)*r22*sj4*x1601))+(((-1.0)*x1601*x1604))+((sj1*x1600))+(((-1.0)*x1602*x1603))+(((-1.0)*cj4*x1601*x1603))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1606=IKsin(j2);
IkReal x1607=IKcos(j2);
IkReal x1608=(cj0*r01);
IkReal x1609=((1.0)*sj0);
IkReal x1610=((0.0055)*sj5);
IkReal x1611=(r10*sj0);
IkReal x1612=(cj5*sj4);
IkReal x1613=((1.0)*cj4);
IkReal x1614=(cj0*r02);
IkReal x1615=(r20*sj5);
IkReal x1616=((0.0055)*cj5);
IkReal x1617=(cj0*r00);
IkReal x1618=(r11*sj0);
IkReal x1619=(sj4*sj5);
IkReal x1620=((1.0)*sj4);
IkReal x1621=(sj1*x1607);
IkReal x1622=(cj1*x1606);
IkReal x1623=(cj1*x1607);
IkReal x1624=(sj1*x1606);
IkReal x1625=(cj5*x1613);
IkReal x1626=(x1622+x1621);
evalcond[0]=(((r21*x1612))+x1626+(((-1.0)*r22*x1613))+((sj4*x1615)));
evalcond[1]=((((-1.0)*x1623))+(((-1.0)*r21*x1625))+x1624+(((-1.0)*r22*x1620))+(((-1.0)*x1613*x1615)));
evalcond[2]=((((-1.0)*r21*x1616))+(((-1.0)*r20*x1610))+(((0.21)*cj1))+(((0.2215)*x1621))+(((0.2215)*x1622))+(((-0.03)*x1624))+(((-1.0)*pz))+(((0.03)*x1623)));
evalcond[3]=((((-1.0)*x1624))+(((-1.0)*cj4*r12*x1609))+x1623+((x1617*x1619))+((x1608*x1612))+((x1612*x1618))+(((-1.0)*x1613*x1614))+((x1611*x1619)));
evalcond[4]=((((-1.0)*sj5*x1613*x1617))+(((-1.0)*r12*sj4*x1609))+(((-1.0)*cj4*r10*sj5*x1609))+x1626+(((-1.0)*cj4*cj5*r11*x1609))+(((-1.0)*x1608*x1625))+(((-1.0)*x1614*x1620)));
evalcond[5]=((((-1.0)*x1616*x1618))+(((0.2215)*x1623))+(((-1.0)*x1610*x1611))+(((-1.0)*x1610*x1617))+(((-1.0)*py*x1609))+(((-0.03)*x1622))+(((-0.03)*x1621))+(((-1.0)*x1608*x1616))+(((-0.21)*sj1))+(((-0.2215)*x1624))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1627=((1.0)*cj5);
IkReal x1628=(((cj4*r22))+(((-1.0)*r20*sj4*sj5))+(((-1.0)*r21*sj4*x1627)));
j0eval[0]=x1628;
j0eval[1]=IKsign(x1628);
j0eval[2]=((IKabs((((r11*sj5))+(((-1.0)*r10*x1627)))))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1627))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1629=((1.0)*sj4*sj5);
IkReal x1630=((1.0)*cj5*sj4);
IkReal x1631=(((cj5*r20))+(((-1.0)*r21*sj5)));
j0eval[0]=x1631;
j0eval[1]=((IKabs(((((-1.0)*r11*x1630))+(((-1.0)*r10*x1629))+((cj4*r12)))))+(IKabs(((((-1.0)*r01*x1630))+(((-1.0)*r00*x1629))+((cj4*r02))))));
j0eval[2]=IKsign(x1631);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1632=((181.818181818182)*cj4);
IkReal x1633=(rxp0_2*sj5);
IkReal x1634=((0.0055)*cj5);
IkReal x1635=(cj5*rxp1_2);
IkReal x1636=(rxp2_2*sj4);
IkReal x1637=(r20*sj4);
IkReal x1638=((0.0055)*sj5);
IkReal x1639=(r21*sj4);
j0eval[0]=(((sj5*x1639))+((x1632*x1635))+((x1632*x1633))+(((-1.0)*cj5*x1637))+(((181.818181818182)*x1636)));
j0eval[1]=IKsign(((((-1.0)*x1634*x1637))+x1636+((cj4*x1635))+((cj4*x1633))+((x1638*x1639))));
j0eval[2]=((IKabs((((r01*x1634))+((r00*x1638))+px)))+(IKabs((((r11*x1634))+((r10*x1638))+py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1640=((-1.0)*r21);
IkReal x1642 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1642)==0){
continue;
}
IkReal x1641=pow(x1642,-0.5);
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal(r20),IkReal(x1640),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
IkReal gconst146=((-1.0)*(x1643.value));
IkReal gconst147=((-1.0)*r20*x1641);
IkReal gconst148=(x1640*x1641);
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1644.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1645=((-1.0)*r21);
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal(r20),IkReal(x1645),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
IkReal x1646=((-1.0)*(x1648.value));
IkReal x1647=x1641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1646;
IkReal gconst146=x1646;
IkReal gconst147=((-1.0)*r20*x1647);
IkReal gconst148=(x1645*x1647);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1649=((-1.0)*r21);
CheckValue<IkReal> x1652 = IKatan2WithCheck(IkReal(r20),IkReal(x1649),IKFAST_ATAN2_MAGTHRESH);
if(!x1652.valid){
continue;
}
IkReal x1650=((-1.0)*(x1652.value));
IkReal x1651=x1641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1650;
IkReal gconst146=x1650;
IkReal gconst147=((-1.0)*r20*x1651);
IkReal gconst148=(x1649*x1651);
IkReal x1653=(rxp2_2*sj4);
IkReal x1654=x1641;
IkReal x1655=(cj4*r20*rxp0_2*x1654);
IkReal x1656=(cj4*r21*rxp1_2*x1654);
j0eval[0]=((((181.818181818182)*x1653))+(((-181.818181818182)*x1656))+(((-181.818181818182)*x1655)));
j0eval[1]=IKsign((x1653+(((-1.0)*x1655))+(((-1.0)*x1656))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1657=((-1.0)*r21);
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal(r20),IkReal(x1657),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
IkReal x1658=((-1.0)*(x1660.value));
IkReal x1659=x1641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1658;
IkReal gconst146=x1658;
IkReal gconst147=((-1.0)*r20*x1659);
IkReal gconst148=(x1657*x1659);
IkReal x1661=cj4*cj4;
IkReal x1662=r22*r22;
IkReal x1663=r20*r20;
IkReal x1664=r21*r21;
IkReal x1665=((1.0)+(((-1.0)*x1662)));
IkReal x1666=((1.0)*x1661);
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(x1665,-1);
if(!x1675.valid){
continue;
}
IkReal x1667=x1675.value;
IkReal x1668=(x1661*x1667);
IkReal x1669=(x1666*x1667);
IkReal x1676 = x1665;
if(IKabs(x1676)==0){
continue;
}
IkReal x1670=pow(x1676,-0.5);
IkReal x1671=(x1664*x1668);
IkReal x1672=(x1663*x1668);
IkReal x1673=((2.0)*cj4*r22*sj4*x1670);
IkReal x1674=((-1.0)+(((-1.0)*x1662*x1666))+(((-1.0)*x1663*x1673))+x1662+x1661+(((2.0)*x1663*x1671))+(((-1.0)*x1663*x1669))+(((-1.0)*x1664*x1673))+((x1663*x1672))+(((-1.0)*x1664*x1669))+((x1664*x1671)));
j0eval[0]=x1674;
j0eval[1]=IKsign(x1674);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1677=cj4*cj4;
IkReal x1678=gconst147*gconst147;
IkReal x1679=gconst148*gconst148;
IkReal x1680=(gconst148*r21);
IkReal x1681=(cj4*gconst147);
IkReal x1682=(cj4*gconst148);
IkReal x1683=((1.0)*x1677);
IkReal x1684=((2.0)*gconst147*r20);
IkReal x1685=(cj4*r22*sj4);
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign(((-1.0)+((x1677*x1680*x1684))+((x1677*x1679*(r21*r21)))+x1677+(((2.0)*r20*r22*sj4*x1681))+(((-1.0)*x1678*x1683))+(((-1.0)*x1679*x1683))+((x1677*x1678*(r20*r20)))+(((2.0)*x1680*x1685))+(((r22*r22)*(((1.0)+(((-1.0)*x1683)))))))),-1);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1682))+(((-1.0)*r02*sj4))+(((-1.0)*r00*x1681)))),IkReal((((r11*x1682))+((r10*x1681))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1686.value)))+(x1687.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1688=IKcos(j0);
IkReal x1689=IKsin(j0);
IkReal x1690=((0.0055)*gconst147);
IkReal x1691=((1.0)*sj4);
IkReal x1692=((1.0)*gconst148);
IkReal x1693=(cj4*gconst147);
IkReal x1694=(gconst148*r11);
IkReal x1695=(r00*x1689);
IkReal x1696=(r10*x1688);
IkReal x1697=(cj4*x1688);
IkReal x1698=((1.0)*x1689);
IkReal x1699=(cj4*x1689);
IkReal x1700=(gconst148*r01*x1689);
evalcond[0]=((((-1.0)*x1692*x1696))+((gconst147*r11*x1688))+((gconst148*x1695))+(((-1.0)*gconst147*r01*x1698)));
evalcond[1]=(((x1690*x1696))+(((-1.0)*x1690*x1695))+(((0.0055)*x1688*x1694))+((py*x1688))+(((-0.0055)*x1700))+(((-1.0)*px*x1698)));
evalcond[2]=(((r12*x1697))+((sj4*x1700))+(((-1.0)*x1688*x1691*x1694))+(((-1.0)*cj4*r02*x1698))+(((-1.0)*gconst147*x1691*x1696))+((gconst147*sj4*x1695)));
evalcond[3]=((1.0)+(((-1.0)*x1693*x1695))+(((-1.0)*r02*x1689*x1691))+((r12*sj4*x1688))+((x1693*x1696))+((x1694*x1697))+(((-1.0)*r01*x1692*x1699)));
evalcond[4]=((((-1.0)*r12*x1689*x1691))+(((-1.0)*r02*x1688*x1691))+(((-1.0)*r00*x1688*x1693))+(((-1.0)*r10*x1693*x1698))+(((-1.0)*r11*x1692*x1699))+(((-1.0)*r01*x1692*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1701=((-1.0)*r21);
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal(r20),IkReal(x1701),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
IkReal x1702=((-1.0)*(x1704.value));
IkReal x1703=x1641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1702;
IkReal gconst146=x1702;
IkReal gconst147=((-1.0)*r20*x1703);
IkReal gconst148=(x1701*x1703);
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(cj4,-1);
if(!x1728.valid){
continue;
}
IkReal x1705=x1728.value;
IkReal x1706=((6000.0)*pz);
IkReal x1707=(gconst148*r20);
IkReal x1708=(cj4*r22);
IkReal x1709=(cj0*px);
IkReal x1710=(gconst147*r21);
IkReal x1711=((0.022)*gconst148);
IkReal x1712=(cj0*r01);
IkReal x1713=(py*sj0);
IkReal x1714=((0.066)*gconst147);
IkReal x1715=(cj0*r00);
IkReal x1716=(r10*sj0);
IkReal x1717=(r11*sj0);
IkReal x1718=((0.066)*gconst148);
IkReal x1719=((0.022)*gconst147);
IkReal x1720=((180.0)*x1710);
IkReal x1721=(gconst147*r20*sj4);
IkReal x1722=(gconst148*r21*sj4);
IkReal x1723=(r22*sj4*x1705);
IkReal x1724=((1329.0)*x1722);
IkReal x1725=((1329.0)*x1721);
IkReal x1726=((((1329.0)*x1708))+(((33.0)*x1723))+(((180.0)*x1707)));
IkReal x1727=(x1724+x1725+x1720+x1706);
j1eval[0]=((6.72)+(((0.002)*(IKabs(((420.0)+(((60.0)*x1710))+(((443.0)*x1721))+(((443.0)*x1722))+(((-443.0)*x1708))+(((-60.0)*x1707))+(((-11.0)*x1723))+(((2000.0)*pz)))))))+(((0.002)*(IKabs(((420.0)+x1727+(((-1.0)*x1726)))))))+(IKabs(((((-0.886)*x1707))+((x1716*x1719))+(((0.12)*x1708))+(((4.0)*x1713))+((x1711*x1712))+((x1711*x1717))+(((4.0)*x1709))+(((0.886)*x1710))+(((-0.12)*x1721))+(((-0.12)*x1722))+((x1715*x1719)))))+(((2.0)*(IKabs(((((0.36)*x1708))+((x1712*x1718))+(((12.0)*x1709))+((x1714*x1715))+((x1714*x1716))+(((-2.658)*x1707))+(((12.0)*x1713))+(((2.658)*x1710))+(((-0.36)*x1722))+(((-0.36)*x1721))+((x1717*x1718)))))))+(((0.002)*(IKabs(((-420.0)+x1727+(((-1.0)*x1726))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1760=IKPowWithIntegerCheck(cj4,-1);
if(!x1760.valid){
continue;
}
IkReal x1729=x1760.value;
IkReal x1730=((420.0)*cj4);
IkReal x1731=cj4*cj4;
IkReal x1732=(cj4*pz);
IkReal x1733=(r22*sj4);
IkReal x1734=((0.002)*x1729);
IkReal x1735=(gconst148*r21);
IkReal x1736=(gconst147*r20);
IkReal x1737=((6000.0)*x1732);
IkReal x1738=((33.0)*x1733);
IkReal x1739=((2000.0)*x1732);
IkReal x1740=((11.0)*x1733);
IkReal x1741=((443.0)*cj4*sj4);
IkReal x1742=(cj4*gconst148*r20);
IkReal x1743=(cj4*gconst147*r21);
IkReal x1744=(r22*x1731);
IkReal x1745=((1329.0)*cj4*sj4);
IkReal x1746=((180.0)*x1743);
IkReal x1747=((180.0)*x1742);
IkReal x1748=((1329.0)*x1744);
IkReal x1749=((60.0)*x1743);
IkReal x1750=((443.0)*x1744);
IkReal x1751=((60.0)*x1742);
IkReal x1752=(x1736*x1745);
IkReal x1753=(x1735*x1745);
IkReal x1754=(x1735*x1741);
IkReal x1755=(x1736*x1741);
IkReal x1756=(x1738+x1748+x1747);
IkReal x1757=(x1740+x1751+x1750);
IkReal x1758=(x1739+x1749+x1755+x1754);
IkReal x1759=(x1737+x1746+x1753+x1752);
op[0]=(x1734*((x1730+x1758+(((-1.0)*x1757)))));
op[1]=0;
op[2]=(x1734*((x1730+x1759+(((-1.0)*x1756)))));
op[3]=0;
op[4]=(x1734*((x1759+(((-1.0)*x1756))+(((-1.0)*x1730)))));
op[5]=0;
op[6]=(x1734*((x1758+(((-1.0)*x1757))+(((-1.0)*x1730)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1761=((0.066)*sj0);
IkReal x1762=(gconst148*r11);
IkReal x1763=(gconst148*r20);
IkReal x1764=(cj0*px);
IkReal x1765=(gconst147*r21);
IkReal x1766=(py*sj0);
IkReal x1767=(cj4*r22);
IkReal x1768=(gconst147*r10);
IkReal x1769=((0.022)*sj0);
IkReal x1770=((4.0)*x1764);
IkReal x1771=((0.12)*x1767);
IkReal x1772=((4.0)*x1766);
IkReal x1773=((0.886)*x1765);
IkReal x1774=(gconst148*r21*sj4);
IkReal x1775=(cj0*gconst148*r01);
IkReal x1776=(cj0*gconst147*r00);
IkReal x1777=(gconst147*r20*sj4);
IkReal x1778=((0.022)*x1775);
IkReal x1779=(x1768*x1769);
IkReal x1780=(x1762*x1769);
IkReal x1781=((0.022)*x1776);
IkReal x1782=((((0.886)*x1763))+(((0.12)*x1777))+(((0.12)*x1774)));
IkReal x1783=(x1780+x1781+x1771+x1770+x1773+x1772+x1779+x1778);
IkReal x1784=((((0.066)*x1775))+(((0.066)*x1776))+(((-0.36)*x1777))+(((-0.36)*x1774))+(((12.0)*x1764))+(((12.0)*x1766))+(((-2.658)*x1763))+(((2.658)*x1765))+((x1761*x1768))+((x1761*x1762))+(((0.36)*x1767)));
j1evalpoly[0]=((((-1.0)*x1782))+(((1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((1.68)*htj1))+x1783+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1782))+x1783))))+((x1784*(htj1*htj1)))+(((3.36)*(htj1*htj1*htj1)))+((x1784*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1785=(cj4*r22);
IkReal x1786=((1.0)*r21);
IkReal x1787=(cj1*gconst147);
IkReal x1788=(sj1*sj4);
IkReal x1789=((1.0)*r20);
IkReal x1790=(cj1*gconst148);
if( IKabs(((((-1.0)*gconst148*sj1*x1789))+((gconst147*r21*sj1))+((cj1*x1785))+(((-1.0)*sj4*x1786*x1790))+(((-1.0)*sj4*x1787*x1789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst147*x1788*x1789))+((sj1*x1785))+(((-1.0)*x1786*x1787))+(((-1.0)*gconst148*x1786*x1788))+((r20*x1790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst148*sj1*x1789))+((gconst147*r21*sj1))+((cj1*x1785))+(((-1.0)*sj4*x1786*x1790))+(((-1.0)*sj4*x1787*x1789))))+IKsqr(((((-1.0)*gconst147*x1788*x1789))+((sj1*x1785))+(((-1.0)*x1786*x1787))+(((-1.0)*gconst148*x1786*x1788))+((r20*x1790))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst148*sj1*x1789))+((gconst147*r21*sj1))+((cj1*x1785))+(((-1.0)*sj4*x1786*x1790))+(((-1.0)*sj4*x1787*x1789))), ((((-1.0)*gconst147*x1788*x1789))+((sj1*x1785))+(((-1.0)*x1786*x1787))+(((-1.0)*gconst148*x1786*x1788))+((r20*x1790))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1791=IKcos(j2);
IkReal x1792=IKsin(j2);
IkReal x1793=(r11*sj0);
IkReal x1794=((1.0)*gconst147);
IkReal x1795=((0.0055)*gconst148);
IkReal x1796=(cj0*r01);
IkReal x1797=(cj0*r00);
IkReal x1798=(gconst148*sj4);
IkReal x1799=((1.0)*cj4);
IkReal x1800=((0.0055)*gconst147);
IkReal x1801=(gconst147*sj4);
IkReal x1802=(r10*sj0);
IkReal x1803=(sj1*x1791);
IkReal x1804=(cj1*x1792);
IkReal x1805=(cj1*x1791);
IkReal x1806=(sj1*x1792);
IkReal x1807=(x1804+x1803);
evalcond[0]=(((gconst148*r20))+x1806+(((-1.0)*r21*x1794))+(((-1.0)*x1805)));
evalcond[1]=((((-1.0)*r22*x1799))+((r21*x1798))+x1807+((r20*x1801)));
evalcond[2]=(((gconst148*x1797))+(((-1.0)*x1793*x1794))+((gconst148*x1802))+x1807+(((-1.0)*x1794*x1796)));
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(cj4,-1);
if(!x1808.valid){
continue;
}
evalcond[3]=((((-0.03)*x1806))+(((0.21)*cj1))+(((0.2215)*x1804))+(((0.2215)*x1803))+(((0.0055)*r22*sj4*(x1808.value)))+(((0.03)*x1805))+(((-1.0)*pz)));
evalcond[4]=(((x1793*x1798))+((x1801*x1802))+(((-1.0)*cj0*r02*x1799))+((x1796*x1798))+((x1797*x1801))+(((-1.0)*r12*sj0*x1799))+x1805+(((-1.0)*x1806)));
evalcond[5]=((((-1.0)*x1795*x1796))+(((-0.2215)*x1806))+(((-0.03)*x1803))+(((-0.03)*x1804))+(((-1.0)*x1797*x1800))+(((0.2215)*x1805))+(((-1.0)*x1793*x1795))+(((-1.0)*x1800*x1802))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1809=((0.0055)*sj4);
IkReal x1810=((0.0055)*gconst148);
IkReal x1811=((0.0055)*gconst147);
CheckValue<IkReal> x1812 = IKatan2WithCheck(IkReal((py+((r11*x1810))+((r10*x1811)))),IkReal((px+((r01*x1810))+((r00*x1811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1812.valid){
continue;
}
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(IKsign((((gconst147*r21*x1809))+((cj4*gconst147*rxp0_2))+((cj4*gconst148*rxp1_2))+(((-1.0)*gconst148*r20*x1809))+((rxp2_2*sj4)))),-1);
if(!x1813.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1812.value)+(((1.5707963267949)*(x1813.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1814=IKcos(j0);
IkReal x1815=IKsin(j0);
IkReal x1816=((0.0055)*gconst147);
IkReal x1817=((1.0)*sj4);
IkReal x1818=((1.0)*gconst148);
IkReal x1819=(cj4*gconst147);
IkReal x1820=(gconst148*r11);
IkReal x1821=(r00*x1815);
IkReal x1822=(r10*x1814);
IkReal x1823=(cj4*x1814);
IkReal x1824=((1.0)*x1815);
IkReal x1825=(cj4*x1815);
IkReal x1826=(gconst148*r01*x1815);
evalcond[0]=((((-1.0)*gconst147*r01*x1824))+(((-1.0)*x1818*x1822))+((gconst148*x1821))+((gconst147*r11*x1814)));
evalcond[1]=((((-0.0055)*x1826))+((py*x1814))+(((-1.0)*x1816*x1821))+((x1816*x1822))+(((0.0055)*x1814*x1820))+(((-1.0)*px*x1824)));
evalcond[2]=(((gconst147*sj4*x1821))+((sj4*x1826))+(((-1.0)*gconst147*x1817*x1822))+(((-1.0)*x1814*x1817*x1820))+(((-1.0)*cj4*r02*x1824))+((r12*x1823)));
evalcond[3]=((1.0)+(((-1.0)*r02*x1815*x1817))+((x1819*x1822))+(((-1.0)*x1819*x1821))+(((-1.0)*r01*x1818*x1825))+((x1820*x1823))+((r12*sj4*x1814)));
evalcond[4]=((((-1.0)*r10*x1819*x1824))+(((-1.0)*r01*x1818*x1823))+(((-1.0)*r00*x1814*x1819))+(((-1.0)*r02*x1814*x1817))+(((-1.0)*r11*x1818*x1825))+(((-1.0)*r12*x1815*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1827=((-1.0)*r21);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(r20),IkReal(x1827),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
IkReal x1828=((-1.0)*(x1830.value));
IkReal x1829=x1641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1828;
IkReal gconst146=x1828;
IkReal gconst147=((-1.0)*r20*x1829);
IkReal gconst148=(x1827*x1829);
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(cj4,-1);
if(!x1854.valid){
continue;
}
IkReal x1831=x1854.value;
IkReal x1832=((6000.0)*pz);
IkReal x1833=(gconst148*r20);
IkReal x1834=(cj4*r22);
IkReal x1835=(cj0*px);
IkReal x1836=(gconst147*r21);
IkReal x1837=((0.022)*gconst148);
IkReal x1838=(cj0*r01);
IkReal x1839=(py*sj0);
IkReal x1840=((0.066)*gconst147);
IkReal x1841=(cj0*r00);
IkReal x1842=(r10*sj0);
IkReal x1843=(r11*sj0);
IkReal x1844=((0.066)*gconst148);
IkReal x1845=((0.022)*gconst147);
IkReal x1846=((180.0)*x1836);
IkReal x1847=(gconst147*r20*sj4);
IkReal x1848=(gconst148*r21*sj4);
IkReal x1849=(r22*sj4*x1831);
IkReal x1850=((1329.0)*x1848);
IkReal x1851=((1329.0)*x1847);
IkReal x1852=((((33.0)*x1849))+(((1329.0)*x1834))+(((180.0)*x1833)));
IkReal x1853=(x1850+x1851+x1846+x1832);
j1eval[0]=((6.72)+(((2.0)*(IKabs((((x1838*x1844))+(((0.36)*x1834))+(((-2.658)*x1833))+((x1840*x1842))+((x1840*x1841))+(((-0.36)*x1848))+(((-0.36)*x1847))+((x1843*x1844))+(((12.0)*x1839))+(((12.0)*x1835))+(((2.658)*x1836)))))))+(IKabs(((((0.886)*x1836))+((x1837*x1843))+(((-0.886)*x1833))+(((0.12)*x1834))+(((4.0)*x1835))+(((4.0)*x1839))+((x1837*x1838))+(((-0.12)*x1848))+(((-0.12)*x1847))+((x1842*x1845))+((x1841*x1845)))))+(((0.002)*(IKabs(((420.0)+x1853+(((-1.0)*x1852)))))))+(((0.002)*(IKabs(((420.0)+(((-60.0)*x1833))+(((-11.0)*x1849))+(((-443.0)*x1834))+(((60.0)*x1836))+(((443.0)*x1847))+(((443.0)*x1848))+(((2000.0)*pz)))))))+(((0.002)*(IKabs(((-420.0)+x1853+(((-1.0)*x1852))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1886=IKPowWithIntegerCheck(cj4,-1);
if(!x1886.valid){
continue;
}
IkReal x1855=x1886.value;
IkReal x1856=((420.0)*cj4);
IkReal x1857=cj4*cj4;
IkReal x1858=(cj4*pz);
IkReal x1859=(r22*sj4);
IkReal x1860=((0.002)*x1855);
IkReal x1861=(gconst148*r21);
IkReal x1862=(gconst147*r20);
IkReal x1863=((6000.0)*x1858);
IkReal x1864=((33.0)*x1859);
IkReal x1865=((2000.0)*x1858);
IkReal x1866=((11.0)*x1859);
IkReal x1867=((443.0)*cj4*sj4);
IkReal x1868=(cj4*gconst148*r20);
IkReal x1869=(cj4*gconst147*r21);
IkReal x1870=(r22*x1857);
IkReal x1871=((1329.0)*cj4*sj4);
IkReal x1872=((180.0)*x1869);
IkReal x1873=((180.0)*x1868);
IkReal x1874=((1329.0)*x1870);
IkReal x1875=((60.0)*x1869);
IkReal x1876=((443.0)*x1870);
IkReal x1877=((60.0)*x1868);
IkReal x1878=(x1862*x1871);
IkReal x1879=(x1861*x1871);
IkReal x1880=(x1861*x1867);
IkReal x1881=(x1862*x1867);
IkReal x1882=(x1864+x1874+x1873);
IkReal x1883=(x1866+x1876+x1877);
IkReal x1884=(x1865+x1875+x1881+x1880);
IkReal x1885=(x1863+x1872+x1878+x1879);
op[0]=(x1860*((x1856+x1884+(((-1.0)*x1883)))));
op[1]=0;
op[2]=(x1860*((x1856+x1885+(((-1.0)*x1882)))));
op[3]=0;
op[4]=(x1860*((x1885+(((-1.0)*x1882))+(((-1.0)*x1856)))));
op[5]=0;
op[6]=(x1860*((x1884+(((-1.0)*x1883))+(((-1.0)*x1856)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1887=((0.066)*sj0);
IkReal x1888=(gconst148*r11);
IkReal x1889=(gconst148*r20);
IkReal x1890=(cj0*px);
IkReal x1891=(gconst147*r21);
IkReal x1892=(py*sj0);
IkReal x1893=(cj4*r22);
IkReal x1894=(gconst147*r10);
IkReal x1895=((0.022)*sj0);
IkReal x1896=((4.0)*x1890);
IkReal x1897=((0.12)*x1893);
IkReal x1898=((4.0)*x1892);
IkReal x1899=((0.886)*x1891);
IkReal x1900=(gconst148*r21*sj4);
IkReal x1901=(cj0*gconst148*r01);
IkReal x1902=(cj0*gconst147*r00);
IkReal x1903=(gconst147*r20*sj4);
IkReal x1904=((0.022)*x1901);
IkReal x1905=(x1894*x1895);
IkReal x1906=(x1888*x1895);
IkReal x1907=((0.022)*x1902);
IkReal x1908=((((0.12)*x1903))+(((0.12)*x1900))+(((0.886)*x1889)));
IkReal x1909=(x1906+x1907+x1904+x1905+x1898+x1899+x1896+x1897);
IkReal x1910=(((x1887*x1888))+(((12.0)*x1892))+(((12.0)*x1890))+(((-0.36)*x1900))+(((-0.36)*x1903))+(((0.36)*x1893))+(((2.658)*x1891))+(((-2.658)*x1889))+(((0.066)*x1901))+(((0.066)*x1902))+((x1887*x1894)));
j1evalpoly[0]=((((1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((1.68)*htj1))+(((3.36)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1909+(((-1.0)*x1908))))))+((x1910*(htj1*htj1*htj1*htj1)))+x1909+((x1910*(htj1*htj1)))+(((-1.0)*x1908)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1911=(cj4*r22);
IkReal x1912=((1.0)*r21);
IkReal x1913=(cj1*gconst147);
IkReal x1914=(sj1*sj4);
IkReal x1915=((1.0)*r20);
IkReal x1916=(cj1*gconst148);
if( IKabs(((((-1.0)*sj4*x1912*x1916))+(((-1.0)*sj4*x1913*x1915))+((cj1*x1911))+((gconst147*r21*sj1))+(((-1.0)*gconst148*sj1*x1915)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst147*x1914*x1915))+(((-1.0)*gconst148*x1912*x1914))+((sj1*x1911))+((r20*x1916))+(((-1.0)*x1912*x1913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1912*x1916))+(((-1.0)*sj4*x1913*x1915))+((cj1*x1911))+((gconst147*r21*sj1))+(((-1.0)*gconst148*sj1*x1915))))+IKsqr(((((-1.0)*gconst147*x1914*x1915))+(((-1.0)*gconst148*x1912*x1914))+((sj1*x1911))+((r20*x1916))+(((-1.0)*x1912*x1913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1912*x1916))+(((-1.0)*sj4*x1913*x1915))+((cj1*x1911))+((gconst147*r21*sj1))+(((-1.0)*gconst148*sj1*x1915))), ((((-1.0)*gconst147*x1914*x1915))+(((-1.0)*gconst148*x1912*x1914))+((sj1*x1911))+((r20*x1916))+(((-1.0)*x1912*x1913))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1917=IKcos(j2);
IkReal x1918=IKsin(j2);
IkReal x1919=(r11*sj0);
IkReal x1920=((1.0)*gconst147);
IkReal x1921=((0.0055)*gconst148);
IkReal x1922=(cj0*r01);
IkReal x1923=(cj0*r00);
IkReal x1924=(gconst148*sj4);
IkReal x1925=((1.0)*cj4);
IkReal x1926=((0.0055)*gconst147);
IkReal x1927=(gconst147*sj4);
IkReal x1928=(r10*sj0);
IkReal x1929=(sj1*x1917);
IkReal x1930=(cj1*x1918);
IkReal x1931=(cj1*x1917);
IkReal x1932=(sj1*x1918);
IkReal x1933=(x1929+x1930);
evalcond[0]=((((-1.0)*r21*x1920))+(((-1.0)*x1931))+((gconst148*r20))+x1932);
evalcond[1]=(((r20*x1927))+(((-1.0)*r22*x1925))+x1933+((r21*x1924)));
evalcond[2]=(x1933+(((-1.0)*x1919*x1920))+(((-1.0)*x1920*x1922))+((gconst148*x1928))+((gconst148*x1923)));
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(cj4,-1);
if(!x1934.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x1934.value)))+(((-0.03)*x1932))+(((0.03)*x1931))+(((0.2215)*x1929))+(((-1.0)*pz))+(((0.2215)*x1930)));
evalcond[4]=(((x1927*x1928))+(((-1.0)*x1932))+x1931+((x1923*x1927))+(((-1.0)*r12*sj0*x1925))+((x1919*x1924))+(((-1.0)*cj0*r02*x1925))+((x1922*x1924)));
evalcond[5]=((((-0.03)*x1930))+(((-0.03)*x1929))+(((-1.0)*x1926*x1928))+(((-1.0)*x1919*x1921))+(((-1.0)*py*sj0))+(((-1.0)*x1921*x1922))+(((-0.21)*sj1))+(((0.2215)*x1931))+(((-1.0)*x1923*x1926))+(((-1.0)*cj0*px))+(((-0.2215)*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1935=((1.0)*gconst148);
CheckValue<IkReal> x1936=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst147*r20*sj4))+(((-1.0)*r21*sj4*x1935))+((r22*((((cj4*(gconst147*gconst147)))+((cj4*(gconst148*gconst148))))))))),-1);
if(!x1936.valid){
continue;
}
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1935))+((gconst147*r11)))),IkReal((((gconst147*r01))+(((-1.0)*r00*x1935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1936.value)))+(x1937.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1938=IKcos(j0);
IkReal x1939=IKsin(j0);
IkReal x1940=((0.0055)*gconst147);
IkReal x1941=((1.0)*sj4);
IkReal x1942=((1.0)*gconst148);
IkReal x1943=(cj4*gconst147);
IkReal x1944=(gconst148*r11);
IkReal x1945=(r00*x1939);
IkReal x1946=(r10*x1938);
IkReal x1947=(cj4*x1938);
IkReal x1948=((1.0)*x1939);
IkReal x1949=(cj4*x1939);
IkReal x1950=(gconst148*r01*x1939);
evalcond[0]=((((-1.0)*x1942*x1946))+(((-1.0)*gconst147*r01*x1948))+((gconst147*r11*x1938))+((gconst148*x1945)));
evalcond[1]=((((-1.0)*x1940*x1945))+(((-1.0)*px*x1948))+((x1940*x1946))+((py*x1938))+(((-0.0055)*x1950))+(((0.0055)*x1938*x1944)));
evalcond[2]=((((-1.0)*x1938*x1941*x1944))+((gconst147*sj4*x1945))+(((-1.0)*cj4*r02*x1948))+((r12*x1947))+((sj4*x1950))+(((-1.0)*gconst147*x1941*x1946)));
evalcond[3]=((1.0)+((x1943*x1946))+(((-1.0)*r02*x1939*x1941))+((x1944*x1947))+(((-1.0)*x1943*x1945))+(((-1.0)*r01*x1942*x1949))+((r12*sj4*x1938)));
evalcond[4]=((((-1.0)*r12*x1939*x1941))+(((-1.0)*r00*x1938*x1943))+(((-1.0)*r01*x1942*x1947))+(((-1.0)*r11*x1942*x1949))+(((-1.0)*r10*x1943*x1948))+(((-1.0)*r02*x1938*x1941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1951=((-1.0)*r21);
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(r20),IkReal(x1951),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
IkReal x1952=((-1.0)*(x1954.value));
IkReal x1953=x1641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1952;
IkReal gconst146=x1952;
IkReal gconst147=((-1.0)*r20*x1953);
IkReal gconst148=(x1951*x1953);
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(cj4,-1);
if(!x1978.valid){
continue;
}
IkReal x1955=x1978.value;
IkReal x1956=((6000.0)*pz);
IkReal x1957=(gconst148*r20);
IkReal x1958=(cj4*r22);
IkReal x1959=(cj0*px);
IkReal x1960=(gconst147*r21);
IkReal x1961=((0.022)*gconst148);
IkReal x1962=(cj0*r01);
IkReal x1963=(py*sj0);
IkReal x1964=((0.066)*gconst147);
IkReal x1965=(cj0*r00);
IkReal x1966=(r10*sj0);
IkReal x1967=(r11*sj0);
IkReal x1968=((0.066)*gconst148);
IkReal x1969=((0.022)*gconst147);
IkReal x1970=((180.0)*x1960);
IkReal x1971=(gconst147*r20*sj4);
IkReal x1972=(gconst148*r21*sj4);
IkReal x1973=(r22*sj4*x1955);
IkReal x1974=((1329.0)*x1972);
IkReal x1975=((1329.0)*x1971);
IkReal x1976=((((180.0)*x1957))+(((1329.0)*x1958))+(((33.0)*x1973)));
IkReal x1977=(x1975+x1974+x1970+x1956);
j1eval[0]=((6.72)+(IKabs(((((-0.886)*x1957))+(((4.0)*x1959))+(((4.0)*x1963))+(((0.886)*x1960))+((x1961*x1967))+((x1961*x1962))+((x1965*x1969))+((x1966*x1969))+(((0.12)*x1958))+(((-0.12)*x1971))+(((-0.12)*x1972)))))+(((0.002)*(IKabs(((-420.0)+(((-1.0)*x1976))+x1977)))))+(((0.002)*(IKabs(((420.0)+(((443.0)*x1971))+(((443.0)*x1972))+(((60.0)*x1960))+(((-60.0)*x1957))+(((2000.0)*pz))+(((-11.0)*x1973))+(((-443.0)*x1958)))))))+(((0.002)*(IKabs(((420.0)+(((-1.0)*x1976))+x1977)))))+(((2.0)*(IKabs(((((12.0)*x1959))+((x1964*x1965))+((x1964*x1966))+(((-2.658)*x1957))+((x1962*x1968))+(((2.658)*x1960))+(((12.0)*x1963))+(((0.36)*x1958))+((x1967*x1968))+(((-0.36)*x1971))+(((-0.36)*x1972))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(cj4,-1);
if(!x2010.valid){
continue;
}
IkReal x1979=x2010.value;
IkReal x1980=((420.0)*cj4);
IkReal x1981=cj4*cj4;
IkReal x1982=(cj4*pz);
IkReal x1983=(r22*sj4);
IkReal x1984=((0.002)*x1979);
IkReal x1985=(gconst148*r21);
IkReal x1986=(gconst147*r20);
IkReal x1987=((6000.0)*x1982);
IkReal x1988=((33.0)*x1983);
IkReal x1989=((2000.0)*x1982);
IkReal x1990=((11.0)*x1983);
IkReal x1991=((443.0)*cj4*sj4);
IkReal x1992=(cj4*gconst148*r20);
IkReal x1993=(cj4*gconst147*r21);
IkReal x1994=(r22*x1981);
IkReal x1995=((1329.0)*cj4*sj4);
IkReal x1996=((180.0)*x1993);
IkReal x1997=((180.0)*x1992);
IkReal x1998=((1329.0)*x1994);
IkReal x1999=((60.0)*x1993);
IkReal x2000=((443.0)*x1994);
IkReal x2001=((60.0)*x1992);
IkReal x2002=(x1986*x1995);
IkReal x2003=(x1985*x1995);
IkReal x2004=(x1985*x1991);
IkReal x2005=(x1986*x1991);
IkReal x2006=(x1988+x1997+x1998);
IkReal x2007=(x2000+x2001+x1990);
IkReal x2008=(x2004+x2005+x1989+x1999);
IkReal x2009=(x2002+x2003+x1987+x1996);
op[0]=(x1984*((x2008+x1980+(((-1.0)*x2007)))));
op[1]=0;
op[2]=(x1984*((x2009+x1980+(((-1.0)*x2006)))));
op[3]=0;
op[4]=(x1984*(((((-1.0)*x1980))+x2009+(((-1.0)*x2006)))));
op[5]=0;
op[6]=(x1984*(((((-1.0)*x1980))+x2008+(((-1.0)*x2007)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2011=((0.066)*sj0);
IkReal x2012=(gconst148*r11);
IkReal x2013=(gconst148*r20);
IkReal x2014=(cj0*px);
IkReal x2015=(gconst147*r21);
IkReal x2016=(py*sj0);
IkReal x2017=(cj4*r22);
IkReal x2018=(gconst147*r10);
IkReal x2019=((0.022)*sj0);
IkReal x2020=((4.0)*x2014);
IkReal x2021=((0.12)*x2017);
IkReal x2022=((4.0)*x2016);
IkReal x2023=((0.886)*x2015);
IkReal x2024=(gconst148*r21*sj4);
IkReal x2025=(cj0*gconst148*r01);
IkReal x2026=(cj0*gconst147*r00);
IkReal x2027=(gconst147*r20*sj4);
IkReal x2028=((0.022)*x2025);
IkReal x2029=(x2018*x2019);
IkReal x2030=(x2012*x2019);
IkReal x2031=((0.022)*x2026);
IkReal x2032=((((0.12)*x2027))+(((0.12)*x2024))+(((0.886)*x2013)));
IkReal x2033=(x2020+x2021+x2022+x2023+x2028+x2029+x2031+x2030);
IkReal x2034=((((2.658)*x2015))+(((-0.36)*x2024))+(((-0.36)*x2027))+(((0.36)*x2017))+(((12.0)*x2016))+(((12.0)*x2014))+((x2011*x2012))+((x2011*x2018))+(((-2.658)*x2013))+(((0.066)*x2025))+(((0.066)*x2026)));
j1evalpoly[0]=((((1.68)*(htj1*htj1*htj1*htj1*htj1)))+((x2034*(htj1*htj1*htj1*htj1)))+((x2034*(htj1*htj1)))+(((1.68)*htj1))+x2033+(((3.36)*(htj1*htj1*htj1)))+(((-1.0)*x2032))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2033+(((-1.0)*x2032)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2035=(cj4*r22);
IkReal x2036=((1.0)*r21);
IkReal x2037=(cj1*gconst147);
IkReal x2038=(sj1*sj4);
IkReal x2039=((1.0)*r20);
IkReal x2040=(cj1*gconst148);
if( IKabs((((gconst147*r21*sj1))+(((-1.0)*gconst148*sj1*x2039))+(((-1.0)*sj4*x2036*x2040))+(((-1.0)*sj4*x2037*x2039))+((cj1*x2035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst147*x2038*x2039))+(((-1.0)*x2036*x2037))+((r20*x2040))+((sj1*x2035))+(((-1.0)*gconst148*x2036*x2038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst147*r21*sj1))+(((-1.0)*gconst148*sj1*x2039))+(((-1.0)*sj4*x2036*x2040))+(((-1.0)*sj4*x2037*x2039))+((cj1*x2035))))+IKsqr(((((-1.0)*gconst147*x2038*x2039))+(((-1.0)*x2036*x2037))+((r20*x2040))+((sj1*x2035))+(((-1.0)*gconst148*x2036*x2038))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((gconst147*r21*sj1))+(((-1.0)*gconst148*sj1*x2039))+(((-1.0)*sj4*x2036*x2040))+(((-1.0)*sj4*x2037*x2039))+((cj1*x2035))), ((((-1.0)*gconst147*x2038*x2039))+(((-1.0)*x2036*x2037))+((r20*x2040))+((sj1*x2035))+(((-1.0)*gconst148*x2036*x2038))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2041=IKcos(j2);
IkReal x2042=IKsin(j2);
IkReal x2043=(r11*sj0);
IkReal x2044=((1.0)*gconst147);
IkReal x2045=((0.0055)*gconst148);
IkReal x2046=(cj0*r01);
IkReal x2047=(cj0*r00);
IkReal x2048=(gconst148*sj4);
IkReal x2049=((1.0)*cj4);
IkReal x2050=((0.0055)*gconst147);
IkReal x2051=(gconst147*sj4);
IkReal x2052=(r10*sj0);
IkReal x2053=(sj1*x2041);
IkReal x2054=(cj1*x2042);
IkReal x2055=(cj1*x2041);
IkReal x2056=(sj1*x2042);
IkReal x2057=(x2053+x2054);
evalcond[0]=(x2056+((gconst148*r20))+(((-1.0)*x2055))+(((-1.0)*r21*x2044)));
evalcond[1]=(((r21*x2048))+(((-1.0)*r22*x2049))+x2057+((r20*x2051)));
evalcond[2]=(((gconst148*x2047))+x2057+((gconst148*x2052))+(((-1.0)*x2044*x2046))+(((-1.0)*x2043*x2044)));
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(cj4,-1);
if(!x2058.valid){
continue;
}
evalcond[3]=((((0.03)*x2055))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x2058.value)))+(((0.2215)*x2053))+(((0.2215)*x2054))+(((-1.0)*pz))+(((-0.03)*x2056)));
evalcond[4]=(((x2043*x2048))+x2055+((x2047*x2051))+(((-1.0)*x2056))+((x2046*x2048))+(((-1.0)*r12*sj0*x2049))+((x2051*x2052))+(((-1.0)*cj0*r02*x2049)));
evalcond[5]=((((-1.0)*x2045*x2046))+(((0.2215)*x2055))+(((-0.2215)*x2056))+(((-0.03)*x2053))+(((-0.03)*x2054))+(((-1.0)*x2050*x2052))+(((-1.0)*x2043*x2045))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*x2047*x2050))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2061 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2061)==0){
continue;
}
IkReal x2059=pow(x2061,-0.5);
IkReal x2060=((1.0)*x2059);
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
IkReal gconst149=((3.14159265358979)+(((-1.0)*(x2062.value))));
IkReal gconst150=(r20*x2060);
IkReal gconst151=(r21*x2060);
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2063.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
IkReal x2064=((1.0)*(x2067.value));
IkReal x2065=x2059;
IkReal x2066=((1.0)*x2065);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2064)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2064)));
IkReal gconst150=(r20*x2066);
IkReal gconst151=(r21*x2066);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
IkReal x2068=((1.0)*(x2071.value));
IkReal x2069=x2059;
IkReal x2070=((1.0)*x2069);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2068)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2068)));
IkReal gconst150=(r20*x2070);
IkReal gconst151=(r21*x2070);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2075 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2075.valid){
continue;
}
IkReal x2072=((1.0)*(x2075.value));
IkReal x2073=x2059;
IkReal x2074=((1.0)*x2073);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2072)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2072)));
IkReal gconst150=(r20*x2074);
IkReal gconst151=(r21*x2074);
IkReal x2076=(rxp2_2*sj4);
IkReal x2077=x2059;
IkReal x2078=(cj4*r20*rxp0_2*x2077);
IkReal x2079=(cj4*r21*rxp1_2*x2077);
j0eval[0]=((((181.818181818182)*x2076))+(((181.818181818182)*x2079))+(((181.818181818182)*x2078)));
j0eval[1]=IKsign((x2076+(((1.0)*x2079))+(((1.0)*x2078))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2080=((0.0055)*gconst151);
IkReal x2081=((0.0055)*gconst150);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign((((cj4*gconst150*rxp0_2))+(((-1.0)*r20*sj4*x2080))+((cj4*gconst151*rxp1_2))+((r21*sj4*x2081))+((rxp2_2*sj4)))),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal((((r10*x2081))+py+((r11*x2080)))),IkReal((px+((r01*x2080))+((r00*x2081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2084=IKsin(j0);
IkReal x2085=IKcos(j0);
IkReal x2086=(r12*sj4);
IkReal x2087=(gconst150*r10);
IkReal x2088=(gconst151*r11);
IkReal x2089=(gconst150*r00);
IkReal x2090=(r02*sj4);
IkReal x2091=(gconst151*r01);
IkReal x2092=((1.0)*x2084);
IkReal x2093=(cj4*x2085);
IkReal x2094=(r00*x2084);
IkReal x2095=((1.0)*x2085);
IkReal x2096=((0.0055)*x2085);
evalcond[0]=(((gconst150*r11*x2085))+(((-1.0)*gconst150*r01*x2092))+((gconst151*x2094))+(((-1.0)*gconst151*r10*x2095)));
evalcond[1]=((((-0.0055)*x2084*x2091))+((py*x2085))+((x2087*x2096))+((x2088*x2096))+(((-0.0055)*x2084*x2089))+(((-1.0)*px*x2092)));
evalcond[2]=(((sj4*x2084*x2089))+(((-1.0)*sj4*x2087*x2095))+(((-1.0)*sj4*x2088*x2095))+(((-1.0)*cj4*r02*x2092))+((r12*x2093))+((sj4*x2084*x2091)));
evalcond[3]=((1.0)+(((-1.0)*x2090*x2092))+(((-1.0)*cj4*x2091*x2092))+((x2085*x2086))+((x2087*x2093))+((x2088*x2093))+(((-1.0)*cj4*x2089*x2092)));
evalcond[4]=((((-1.0)*x2090*x2095))+(((-1.0)*x2086*x2092))+(((-1.0)*x2089*x2093))+(((-1.0)*x2091*x2093))+(((-1.0)*cj4*x2088*x2092))+(((-1.0)*cj4*x2087*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2097=(gconst151*r20);
IkReal x2098=((1.0)*r21);
IkReal x2099=(gconst150*x2098);
CheckValue<IkReal> x2105 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2105.valid){
continue;
}
IkReal x2100=((1.0)*(x2105.value));
IkReal x2101=((-1.0)+(((-1.0)*x2099))+x2097);
IkReal x2102=((1.0)+(((-1.0)*x2099))+x2097);
IkReal x2103=x2059;
IkReal x2104=(((gconst150*r20*sj4))+((gconst151*r21*sj4))+(((-1.0)*cj4*r22)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2100)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2100)));
IkReal gconst150=((1.0)*r20*x2103);
IkReal gconst151=(x2098*x2103);
IkReal gconst152=x2101;
IkReal gconst153=x2102;
IkReal gconst154=x2104;
IkReal gconst155=x2104;
IkReal gconst156=x2101;
IkReal gconst157=x2102;
IkReal gconst158=x2104;
IkReal gconst159=x2104;
IkReal gconst160=x2102;
IkReal gconst161=x2101;
IkReal gconst162=x2104;
IkReal gconst163=x2104;
IkReal gconst164=x2102;
IkReal gconst165=x2101;
IkReal gconst166=x2104;
IkReal gconst167=x2104;
IkReal x2106=gconst150*gconst150;
IkReal x2107=r20*r20;
IkReal x2108=sj4*sj4;
IkReal x2109=gconst151*gconst151;
IkReal x2110=r21*r21;
IkReal x2111=cj4*cj4;
IkReal x2112=r22*r22;
IkReal x2113=((24.0)*x2109);
IkReal x2114=((4.0)*x2107);
IkReal x2115=((16.0)*x2107);
IkReal x2116=(gconst150*gconst151*r20*r21);
IkReal x2117=(x2108*x2110);
IkReal x2118=(x2106*x2108);
IkReal x2119=(x2111*x2112);
IkReal x2120=(x2106*x2110);
IkReal x2121=(cj4*gconst151*r21*r22*sj4);
IkReal x2122=(cj4*gconst150*r20*r22*sj4);
j1eval[0]=((((0.5)*(IKabs(((4.0)+(((-1.0)*x2114*x2118))+(((-4.0)*x2119))+(((8.0)*x2122))+(((8.0)*x2121))+(((-1.0)*x2109*x2114))+(((8.0)*x2116))+(((-4.0)*x2109*x2117))+(((-4.0)*x2120))+(((-8.0)*x2108*x2116)))))))+(IKabs(((16.0)+(((32.0)*x2122))+(((32.0)*x2121))+(((-16.0)*x2109*x2117))+(((32.0)*x2116))+(((-16.0)*x2120))+(((-1.0)*x2109*x2115))+(((-1.0)*x2115*x2118))+(((-16.0)*x2119))+(((-32.0)*x2108*x2116)))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x2107*x2113))+(((-48.0)*x2108*x2116))+(((-24.0)*x2107*x2118))+(((48.0)*x2116))+(((-24.0)*x2120))+(((-24.0)*x2119))+(((48.0)*x2122))+(((48.0)*x2121))+(((-1.0)*x2113*x2117))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x2123=((16.0)*gconst161);
IkReal x2124=((16.0)*gconst164);
IkReal x2125=((16.0)*gconst153);
IkReal x2126=((16.0)*gconst156);
IkReal x2127=(gconst163*gconst166);
IkReal x2128=(gconst152*gconst167);
IkReal x2129=((2.0)*gconst159);
IkReal x2130=(gconst160*gconst164);
IkReal x2131=((4.0)*gconst165);
IkReal x2132=(gconst156*gconst161);
IkReal x2133=(gconst159*gconst160);
IkReal x2134=((2.0)*gconst157);
IkReal x2135=(gconst153*gconst162);
IkReal x2136=(gconst156*gconst159);
IkReal x2137=(gconst152*gconst155);
IkReal x2138=((4.0)*gconst152);
IkReal x2139=(gconst153*gconst154);
IkReal x2140=((2.0)*gconst164);
IkReal x2141=(gconst161*gconst167);
IkReal x2142=(gconst155*gconst160);
IkReal x2143=(gconst157*gconst158);
IkReal x2144=((8.0)*gconst158);
IkReal x2145=((4.0)*gconst160);
IkReal x2146=(gconst152*gconst163);
IkReal x2147=(gconst158*gconst165);
IkReal x2148=(gconst160*gconst163);
IkReal x2149=((2.0)*gconst165);
IkReal x2150=((8.0)*gconst156);
IkReal x2151=(gconst161*gconst162);
IkReal x2152=(gconst159*gconst164);
IkReal x2153=(gconst152*gconst166);
IkReal x2154=(gconst165*gconst166);
IkReal x2155=((2.0)*gconst153);
IkReal x2156=((2.0)*gconst156);
IkReal x2157=(gconst160*gconst167);
IkReal x2158=((16.0)*gconst155);
IkReal x2159=((1.0)*gconst163);
IkReal x2160=(gconst154*gconst161);
IkReal x2161=(gconst153*gconst164);
IkReal x2162=(gconst160*gconst166);
IkReal x2163=(gconst156*gconst167);
IkReal x2164=(gconst157*gconst166);
IkReal x2165=((8.0)*gconst164);
IkReal x2166=(gconst161*gconst164);
IkReal x2167=((2.0)*gconst167);
IkReal x2168=(gconst153*gconst166);
IkReal x2169=((4.0)*gconst157);
IkReal x2170=(gconst161*gconst166);
IkReal x2171=(gconst153*gconst156);
IkReal x2172=(gconst164*gconst167);
IkReal x2173=((4.0)*x2166);
IkReal x2174=((8.0)*x2170);
IkReal x2175=(gconst163*x2165);
IkReal x2176=((4.0)*x2132);
IkReal x2177=((4.0)*x2161);
IkReal x2178=(gconst161*x2144);
IkReal x2179=((8.0)*x2168);
IkReal x2180=(gconst163*x2150);
IkReal x2181=(gconst155*x2165);
IkReal x2182=((4.0)*x2171);
IkReal x2183=(gconst153*x2144);
IkReal x2184=(gconst155*x2150);
IkReal x2185=(gconst161*x2149);
IkReal x2186=((1.0)*gconst155*gconst164);
IkReal x2187=((1.0)*gconst155*gconst156);
IkReal x2188=(x2125+x2182);
IkReal x2189=(x2124+x2173);
IkReal x2190=(x2176+x2177);
IkReal x2191=(x2174+x2175);
IkReal x2192=(x2183+x2184);
IkReal x2193=(x2178+x2179+x2181+x2180);
op[0]=(((gconst162*gconst164*x2141))+((gconst160*gconst165*x2127))+(((-1.0)*x2151*x2154))+(((-1.0)*gconst167*x2130*x2159))+(((-1.0)*x2173)));
op[1]=((((-1.0)*x2149*x2162))+(((-1.0)*x2149*x2151))+(((2.0)*gconst163*x2130))+(((-1.0)*x2140*x2151))+((x2140*x2141))+((x2148*x2149))+(((-1.0)*x2191))+(((-1.0)*x2149*x2170))+((x2130*x2167)));
op[2]=(((x2135*x2172))+(((-4.0)*x2130))+((gconst162*gconst167*x2132))+((gconst157*gconst160*x2127))+x2189+((gconst152*gconst165*x2127))+((x2142*x2154))+(((-1.0)*gconst161*x2131))+(((-1.0)*x2123))+(((-16.0)*x2127))+((x2151*x2152))+(((-1.0)*gconst160*x2131))+(((-1.0)*x2135*x2154))+(((-1.0)*gconst159*x2130*x2159))+(((-1.0)*gconst164*x2128*x2159))+(((-1.0)*x2190))+(((-1.0)*x2147*x2151))+(((-1.0)*x2151*x2164))+(((-1.0)*x2154*x2160))+(((-1.0)*x2148*x2163))+(((-1.0)*gconst155*gconst167*x2130))+((gconst154*gconst164*x2141))+((x2147*x2148)));
op[3]=(((x2146*x2149))+(((-1.0)*x2149*x2160))+(((-1.0)*x2149*x2168))+((x2132*x2167))+(((-1.0)*x2149*x2153))+(((-1.0)*x2134*x2162))+(((-1.0)*x2135*x2149))+(((-1.0)*x2135*x2140))+(((-32.0)*gconst163))+(((-1.0)*x2134*x2170))+x2191+((x2156*x2157))+((x2128*x2140))+((x2142*x2149))+(((-2.0)*gconst160*x2147))+(((-2.0)*gconst162*x2132))+((x2140*x2146))+((x2129*x2166))+(((32.0)*gconst166))+(((-1.0)*x2140*x2160))+(((2.0)*gconst155*x2130))+(((-1.0)*x2134*x2151))+((gconst153*gconst167*x2140))+(((-1.0)*x2193))+((x2148*x2156))+((x2129*x2130))+((x2134*x2148))+(((-2.0)*gconst161*x2147)));
op[4]=((64.0)+((x2146*x2147))+(((-1.0)*gconst164*x2138))+(((-16.0)*gconst158*gconst163))+(((-1.0)*x2128*x2186))+(((-1.0)*x2142*x2163))+(((-1.0)*x2147*x2160))+(((-1.0)*gconst152*x2131))+((x2135*x2163))+(((-1.0)*gconst153*x2131))+((x2139*x2172))+((x2143*x2148))+x2123+x2126+x2190+(((-1.0)*gconst161*x2169))+(((-1.0)*gconst156*x2145))+(((-1.0)*x2143*x2151))+((x2142*x2147))+((x2142*x2164))+(((-1.0)*gconst166*x2158))+(((-1.0)*x2135*x2164))+(((-1.0)*x2188))+(((-1.0)*x2189))+(((-1.0)*x2135*x2147))+(((-1.0)*gconst156*x2133*x2159))+((gconst159*gconst162*x2132))+((x2137*x2154))+((x2152*x2160))+(((-1.0)*x2139*x2154))+(((-1.0)*gconst157*x2145))+((gconst152*gconst157*x2127))+(((-1.0)*x2160*x2164))+((x2135*x2152))+((gconst154*gconst167*x2132))+(((-1.0)*x2146*x2152))+(((-1.0)*gconst156*x2128*x2159))+(((-1.0)*gconst155*gconst159*x2130)));
op[5]=((((-1.0)*gconst158*gconst160*x2134))+((x2146*x2156))+(((-32.0)*gconst155))+(((-1.0)*x2134*x2168))+(((-1.0)*x2134*x2160))+(((-1.0)*gconst158*gconst161*x2134))+(((-1.0)*x2135*x2156))+(((-2.0)*gconst152*x2147))+((x2128*x2156))+(((-1.0)*x2134*x2135))+x2193+((x2142*x2156))+(((-2.0)*gconst154*x2132))+(((32.0)*gconst158))+((gconst152*gconst164*x2129))+((x2129*x2161))+((x2137*x2149))+((x2137*x2140))+((x2155*x2163))+(((-1.0)*x2134*x2153))+(((-1.0)*x2192))+((x2129*x2132))+(((-1.0)*x2147*x2155))+((x2134*x2142))+((x2134*x2146))+((gconst156*gconst160*x2129))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2149)));
op[6]=(((x2139*x2152))+(((-1.0)*x2128*x2187))+(((-1.0)*x2136*x2146))+(((-1.0)*x2137*x2152))+(((-1.0)*x2133*x2187))+(((-1.0)*gconst158*x2158))+((x2139*x2163))+((gconst154*gconst159*x2132))+((x2143*x2146))+x2188+((x2142*x2143))+(((-1.0)*gconst157*x2138))+((x2135*x2136))+(((-1.0)*x2126))+(((-1.0)*gconst153*x2169))+((x2137*x2147))+(((-1.0)*x2135*x2143))+(((-1.0)*x2190))+(((-1.0)*gconst156*x2138))+(((-1.0)*x2143*x2160))+(((-1.0)*x2139*x2147))+((x2137*x2164))+(((-1.0)*x2139*x2164)));
op[7]=((((-1.0)*x2139*x2156))+(((-1.0)*gconst152*gconst158*x2134))+(((-1.0)*gconst153*gconst158*x2134))+((gconst152*gconst156*x2129))+(((-1.0)*x2134*x2139))+x2192+((x2134*x2137))+((x2137*x2156))+((x2129*x2171)));
op[8]=(((x2136*x2139))+(((-1.0)*x2136*x2137))+(((-1.0)*x2182))+((x2137*x2143))+(((-1.0)*x2139*x2143)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2194=(gconst150*sj1);
IkReal x2195=((1.0)*r20);
IkReal x2196=(cj1*sj4);
IkReal x2197=(cj4*r22);
IkReal x2198=(gconst151*sj1);
IkReal x2199=((1.0)*r21);
if( IKabs(((((-1.0)*x2195*x2198))+(((-1.0)*gconst150*x2195*x2196))+((cj1*x2197))+((r21*x2194))+(((-1.0)*gconst151*x2196*x2199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*gconst150*x2199))+(((-1.0)*sj4*x2198*x2199))+((sj1*x2197))+((cj1*gconst151*r20))+(((-1.0)*sj4*x2194*x2195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2195*x2198))+(((-1.0)*gconst150*x2195*x2196))+((cj1*x2197))+((r21*x2194))+(((-1.0)*gconst151*x2196*x2199))))+IKsqr(((((-1.0)*cj1*gconst150*x2199))+(((-1.0)*sj4*x2198*x2199))+((sj1*x2197))+((cj1*gconst151*r20))+(((-1.0)*sj4*x2194*x2195))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2195*x2198))+(((-1.0)*gconst150*x2195*x2196))+((cj1*x2197))+((r21*x2194))+(((-1.0)*gconst151*x2196*x2199))), ((((-1.0)*cj1*gconst150*x2199))+(((-1.0)*sj4*x2198*x2199))+((sj1*x2197))+((cj1*gconst151*r20))+(((-1.0)*sj4*x2194*x2195))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2200=IKcos(j2);
IkReal x2201=IKsin(j2);
IkReal x2202=(r10*sj0);
IkReal x2203=(gconst150*sj4);
IkReal x2204=(cj0*r00);
IkReal x2205=((1.0)*cj4);
IkReal x2206=((0.0055)*gconst150);
IkReal x2207=((1.0)*gconst150);
IkReal x2208=(gconst151*sj4);
IkReal x2209=(r11*sj0);
IkReal x2210=(cj0*r01);
IkReal x2211=((0.0055)*gconst151);
IkReal x2212=(sj1*x2200);
IkReal x2213=(cj1*x2201);
IkReal x2214=(cj1*x2200);
IkReal x2215=(sj1*x2201);
IkReal x2216=(x2213+x2212);
evalcond[0]=((((-1.0)*x2214))+x2215+((gconst151*r20))+(((-1.0)*r21*x2207)));
evalcond[1]=(x2216+((r20*x2203))+(((-1.0)*r22*x2205))+((r21*x2208)));
evalcond[2]=((((-1.0)*x2207*x2209))+x2216+(((-1.0)*x2207*x2210))+((gconst151*x2204))+((gconst151*x2202)));
CheckValue<IkReal> x2217=IKPowWithIntegerCheck(cj4,-1);
if(!x2217.valid){
continue;
}
evalcond[3]=((((0.2215)*x2212))+(((0.2215)*x2213))+(((-0.03)*x2215))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x2217.value)))+(((-1.0)*pz))+(((0.03)*x2214)));
evalcond[4]=(((x2202*x2203))+(((-1.0)*x2215))+(((-1.0)*r12*sj0*x2205))+x2214+((x2203*x2204))+(((-1.0)*cj0*r02*x2205))+((x2208*x2209))+((x2208*x2210)));
evalcond[5]=((((-1.0)*x2210*x2211))+(((0.2215)*x2214))+(((-0.03)*x2212))+(((-0.03)*x2213))+(((-1.0)*x2204*x2206))+(((-0.2215)*x2215))+(((-1.0)*x2202*x2206))+(((-1.0)*x2209*x2211))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2218=((1.0)*gconst151);
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2218))+((gconst150*r11)))),IkReal((((gconst150*r01))+(((-1.0)*r00*x2218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst150*r20*sj4))+((r22*((((cj4*(gconst150*gconst150)))+((cj4*(gconst151*gconst151)))))))+(((-1.0)*r21*sj4*x2218)))),-1);
if(!x2220.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2219.value)+(((1.5707963267949)*(x2220.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2221=IKsin(j0);
IkReal x2222=IKcos(j0);
IkReal x2223=(r12*sj4);
IkReal x2224=(gconst150*r10);
IkReal x2225=(gconst151*r11);
IkReal x2226=(gconst150*r00);
IkReal x2227=(r02*sj4);
IkReal x2228=(gconst151*r01);
IkReal x2229=((1.0)*x2221);
IkReal x2230=(cj4*x2222);
IkReal x2231=(r00*x2221);
IkReal x2232=((1.0)*x2222);
IkReal x2233=((0.0055)*x2222);
evalcond[0]=(((gconst151*x2231))+(((-1.0)*gconst151*r10*x2232))+(((-1.0)*gconst150*r01*x2229))+((gconst150*r11*x2222)));
evalcond[1]=((((-0.0055)*x2221*x2228))+(((-0.0055)*x2221*x2226))+((py*x2222))+((x2225*x2233))+((x2224*x2233))+(((-1.0)*px*x2229)));
evalcond[2]=((((-1.0)*cj4*r02*x2229))+(((-1.0)*sj4*x2224*x2232))+(((-1.0)*sj4*x2225*x2232))+((sj4*x2221*x2226))+((sj4*x2221*x2228))+((r12*x2230)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x2228*x2229))+(((-1.0)*x2227*x2229))+((x2222*x2223))+((x2225*x2230))+((x2224*x2230))+(((-1.0)*cj4*x2226*x2229)));
evalcond[4]=((((-1.0)*cj4*x2225*x2229))+(((-1.0)*x2227*x2232))+(((-1.0)*x2223*x2229))+(((-1.0)*cj4*x2224*x2229))+(((-1.0)*x2228*x2230))+(((-1.0)*x2226*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2234=(gconst151*r20);
IkReal x2235=((1.0)*r21);
IkReal x2236=(gconst150*x2235);
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
IkReal x2237=((1.0)*(x2242.value));
IkReal x2238=((-1.0)+x2234+(((-1.0)*x2236)));
IkReal x2239=((1.0)+x2234+(((-1.0)*x2236)));
IkReal x2240=x2059;
IkReal x2241=(((gconst150*r20*sj4))+((gconst151*r21*sj4))+(((-1.0)*cj4*r22)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2237)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2237)));
IkReal gconst150=((1.0)*r20*x2240);
IkReal gconst151=(x2235*x2240);
IkReal gconst152=x2238;
IkReal gconst153=x2239;
IkReal gconst154=x2241;
IkReal gconst155=x2241;
IkReal gconst156=x2238;
IkReal gconst157=x2239;
IkReal gconst158=x2241;
IkReal gconst159=x2241;
IkReal gconst160=x2239;
IkReal gconst161=x2238;
IkReal gconst162=x2241;
IkReal gconst163=x2241;
IkReal gconst164=x2239;
IkReal gconst165=x2238;
IkReal gconst166=x2241;
IkReal gconst167=x2241;
IkReal x2243=gconst150*gconst150;
IkReal x2244=r20*r20;
IkReal x2245=sj4*sj4;
IkReal x2246=gconst151*gconst151;
IkReal x2247=r21*r21;
IkReal x2248=cj4*cj4;
IkReal x2249=r22*r22;
IkReal x2250=((24.0)*x2246);
IkReal x2251=((4.0)*x2244);
IkReal x2252=((16.0)*x2244);
IkReal x2253=(gconst150*gconst151*r20*r21);
IkReal x2254=(x2245*x2247);
IkReal x2255=(x2243*x2245);
IkReal x2256=(x2248*x2249);
IkReal x2257=(x2243*x2247);
IkReal x2258=(cj4*gconst151*r21*r22*sj4);
IkReal x2259=(cj4*gconst150*r20*r22*sj4);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-24.0)*x2244*x2255))+(((48.0)*x2253))+(((48.0)*x2258))+(((48.0)*x2259))+(((-1.0)*x2244*x2250))+(((-48.0)*x2245*x2253))+(((-1.0)*x2250*x2254))+(((-24.0)*x2256))+(((-24.0)*x2257)))))))+(IKabs(((16.0)+(((-16.0)*x2246*x2254))+(((32.0)*x2253))+(((32.0)*x2258))+(((32.0)*x2259))+(((-1.0)*x2252*x2255))+(((-16.0)*x2256))+(((-16.0)*x2257))+(((-1.0)*x2246*x2252))+(((-32.0)*x2245*x2253)))))+(((0.5)*(IKabs(((4.0)+(((-4.0)*x2246*x2254))+(((8.0)*x2258))+(((8.0)*x2259))+(((8.0)*x2253))+(((-8.0)*x2245*x2253))+(((-1.0)*x2246*x2251))+(((-1.0)*x2251*x2255))+(((-4.0)*x2257))+(((-4.0)*x2256))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x2260=((16.0)*gconst161);
IkReal x2261=((16.0)*gconst164);
IkReal x2262=((16.0)*gconst153);
IkReal x2263=((16.0)*gconst156);
IkReal x2264=(gconst163*gconst166);
IkReal x2265=(gconst152*gconst167);
IkReal x2266=((2.0)*gconst159);
IkReal x2267=(gconst160*gconst164);
IkReal x2268=((4.0)*gconst165);
IkReal x2269=(gconst156*gconst161);
IkReal x2270=(gconst159*gconst160);
IkReal x2271=((2.0)*gconst157);
IkReal x2272=(gconst153*gconst162);
IkReal x2273=(gconst156*gconst159);
IkReal x2274=(gconst152*gconst155);
IkReal x2275=((4.0)*gconst152);
IkReal x2276=(gconst153*gconst154);
IkReal x2277=((2.0)*gconst164);
IkReal x2278=(gconst161*gconst167);
IkReal x2279=(gconst155*gconst160);
IkReal x2280=(gconst157*gconst158);
IkReal x2281=((8.0)*gconst158);
IkReal x2282=((4.0)*gconst160);
IkReal x2283=(gconst152*gconst163);
IkReal x2284=(gconst158*gconst165);
IkReal x2285=(gconst160*gconst163);
IkReal x2286=((2.0)*gconst165);
IkReal x2287=((8.0)*gconst156);
IkReal x2288=(gconst161*gconst162);
IkReal x2289=(gconst159*gconst164);
IkReal x2290=(gconst152*gconst166);
IkReal x2291=(gconst165*gconst166);
IkReal x2292=((2.0)*gconst153);
IkReal x2293=((2.0)*gconst156);
IkReal x2294=(gconst160*gconst167);
IkReal x2295=((16.0)*gconst155);
IkReal x2296=((1.0)*gconst163);
IkReal x2297=(gconst154*gconst161);
IkReal x2298=(gconst153*gconst164);
IkReal x2299=(gconst160*gconst166);
IkReal x2300=(gconst156*gconst167);
IkReal x2301=(gconst157*gconst166);
IkReal x2302=((8.0)*gconst164);
IkReal x2303=(gconst161*gconst164);
IkReal x2304=((2.0)*gconst167);
IkReal x2305=(gconst153*gconst166);
IkReal x2306=((4.0)*gconst157);
IkReal x2307=(gconst161*gconst166);
IkReal x2308=(gconst153*gconst156);
IkReal x2309=(gconst164*gconst167);
IkReal x2310=((4.0)*x2303);
IkReal x2311=((8.0)*x2307);
IkReal x2312=(gconst163*x2302);
IkReal x2313=((4.0)*x2269);
IkReal x2314=((4.0)*x2298);
IkReal x2315=(gconst161*x2281);
IkReal x2316=((8.0)*x2305);
IkReal x2317=(gconst163*x2287);
IkReal x2318=(gconst155*x2302);
IkReal x2319=((4.0)*x2308);
IkReal x2320=(gconst153*x2281);
IkReal x2321=(gconst155*x2287);
IkReal x2322=(gconst161*x2286);
IkReal x2323=((1.0)*gconst155*gconst164);
IkReal x2324=((1.0)*gconst155*gconst156);
IkReal x2325=(x2262+x2319);
IkReal x2326=(x2261+x2310);
IkReal x2327=(x2314+x2313);
IkReal x2328=(x2312+x2311);
IkReal x2329=(x2321+x2320);
IkReal x2330=(x2318+x2316+x2317+x2315);
op[0]=((((-1.0)*gconst167*x2267*x2296))+((gconst162*gconst164*x2278))+(((-1.0)*x2288*x2291))+((gconst160*gconst165*x2264))+(((-1.0)*x2310)));
op[1]=((((-1.0)*x2277*x2288))+(((-1.0)*x2286*x2307))+(((-1.0)*x2286*x2299))+((x2267*x2304))+(((-1.0)*x2286*x2288))+((x2277*x2278))+(((2.0)*gconst163*x2267))+((x2285*x2286))+(((-1.0)*x2328)));
op[2]=((((-1.0)*gconst159*x2267*x2296))+(((-1.0)*x2288*x2301))+(((-1.0)*x2284*x2288))+((gconst154*gconst164*x2278))+(((-16.0)*x2264))+(((-1.0)*gconst155*gconst167*x2267))+x2326+(((-1.0)*gconst160*x2268))+(((-1.0)*gconst164*x2265*x2296))+((x2279*x2291))+(((-1.0)*gconst161*x2268))+((gconst162*gconst167*x2269))+((gconst157*gconst160*x2264))+(((-1.0)*x2272*x2291))+((x2272*x2309))+(((-4.0)*x2267))+((gconst152*gconst165*x2264))+(((-1.0)*x2291*x2297))+(((-1.0)*x2285*x2300))+(((-1.0)*x2260))+((x2288*x2289))+((x2284*x2285))+(((-1.0)*x2327)));
op[3]=((((-1.0)*x2271*x2299))+(((-2.0)*gconst162*x2269))+(((-1.0)*x2330))+(((-1.0)*x2271*x2307))+(((-32.0)*gconst163))+x2328+(((-1.0)*x2277*x2297))+(((-1.0)*x2272*x2286))+(((-1.0)*x2286*x2305))+(((-1.0)*x2286*x2290))+(((-1.0)*x2286*x2297))+((x2277*x2283))+((x2271*x2285))+(((-2.0)*gconst161*x2284))+(((-1.0)*x2271*x2288))+((x2279*x2286))+((x2266*x2303))+((gconst153*gconst167*x2277))+(((32.0)*gconst166))+((x2283*x2286))+((x2285*x2293))+((x2265*x2277))+((x2266*x2267))+((x2293*x2294))+(((-1.0)*x2272*x2277))+(((-2.0)*gconst160*x2284))+(((2.0)*gconst155*x2267))+((x2269*x2304)));
op[4]=((64.0)+(((-1.0)*gconst152*x2268))+(((-1.0)*gconst161*x2306))+(((-1.0)*x2283*x2289))+(((-16.0)*gconst158*gconst163))+((x2272*x2289))+(((-1.0)*gconst166*x2295))+((x2279*x2301))+x2263+x2260+(((-1.0)*x2276*x2291))+(((-1.0)*x2280*x2288))+(((-1.0)*x2272*x2301))+x2327+(((-1.0)*gconst164*x2275))+(((-1.0)*gconst156*x2265*x2296))+((x2280*x2285))+(((-1.0)*x2272*x2284))+((gconst159*gconst162*x2269))+((gconst154*gconst167*x2269))+(((-1.0)*x2284*x2297))+(((-1.0)*gconst155*gconst159*x2267))+((gconst152*gconst157*x2264))+((x2279*x2284))+(((-1.0)*gconst156*x2270*x2296))+((x2272*x2300))+((x2289*x2297))+(((-1.0)*x2297*x2301))+(((-1.0)*x2265*x2323))+((x2283*x2284))+((x2276*x2309))+(((-1.0)*gconst156*x2282))+(((-1.0)*gconst157*x2282))+((x2274*x2291))+(((-1.0)*gconst153*x2268))+(((-1.0)*x2279*x2300))+(((-1.0)*x2325))+(((-1.0)*x2326)));
op[5]=((((-2.0)*gconst152*x2284))+(((-1.0)*x2271*x2290))+(((-1.0)*x2271*x2297))+(((-1.0)*x2276*x2286))+(((-32.0)*gconst155))+((x2283*x2293))+(((-1.0)*x2271*x2305))+(((-1.0)*x2272*x2293))+((x2292*x2300))+x2330+(((-1.0)*gconst158*gconst161*x2271))+(((-2.0)*gconst154*x2269))+((x2279*x2293))+((gconst156*gconst160*x2266))+((x2271*x2283))+(((32.0)*gconst158))+((x2274*x2286))+((gconst152*gconst164*x2266))+(((-1.0)*x2276*x2277))+(((-1.0)*gconst158*gconst160*x2271))+(((-1.0)*x2284*x2292))+((x2266*x2269))+((x2266*x2298))+(((-1.0)*x2271*x2272))+((x2274*x2277))+((x2265*x2293))+((x2271*x2279))+(((-1.0)*x2329)));
op[6]=((((-1.0)*x2273*x2283))+((x2274*x2301))+(((-1.0)*x2280*x2297))+(((-1.0)*gconst153*x2306))+(((-1.0)*gconst156*x2275))+(((-1.0)*x2276*x2301))+(((-1.0)*gconst157*x2275))+(((-1.0)*x2270*x2324))+x2325+((x2280*x2283))+(((-1.0)*x2272*x2280))+(((-1.0)*gconst158*x2295))+(((-1.0)*x2276*x2284))+((gconst154*gconst159*x2269))+((x2274*x2284))+((x2279*x2280))+(((-1.0)*x2265*x2324))+((x2272*x2273))+(((-1.0)*x2274*x2289))+((x2276*x2300))+(((-1.0)*x2263))+((x2276*x2289))+(((-1.0)*x2327)));
op[7]=(x2329+((gconst152*gconst156*x2266))+(((-1.0)*x2276*x2293))+(((-1.0)*gconst152*gconst158*x2271))+((x2266*x2308))+((x2274*x2293))+(((-1.0)*x2271*x2276))+(((-1.0)*gconst153*gconst158*x2271))+((x2271*x2274)));
op[8]=(((x2273*x2276))+(((-1.0)*x2276*x2280))+((x2274*x2280))+(((-1.0)*x2273*x2274))+(((-1.0)*x2319)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2331=(gconst150*sj1);
IkReal x2332=((1.0)*r20);
IkReal x2333=(cj1*sj4);
IkReal x2334=(cj4*r22);
IkReal x2335=(gconst151*sj1);
IkReal x2336=((1.0)*r21);
if( IKabs((((r21*x2331))+(((-1.0)*x2332*x2335))+(((-1.0)*gconst151*x2333*x2336))+((cj1*x2334))+(((-1.0)*gconst150*x2332*x2333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2334))+(((-1.0)*sj4*x2331*x2332))+(((-1.0)*cj1*gconst150*x2336))+((cj1*gconst151*r20))+(((-1.0)*sj4*x2335*x2336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2331))+(((-1.0)*x2332*x2335))+(((-1.0)*gconst151*x2333*x2336))+((cj1*x2334))+(((-1.0)*gconst150*x2332*x2333))))+IKsqr((((sj1*x2334))+(((-1.0)*sj4*x2331*x2332))+(((-1.0)*cj1*gconst150*x2336))+((cj1*gconst151*r20))+(((-1.0)*sj4*x2335*x2336))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2331))+(((-1.0)*x2332*x2335))+(((-1.0)*gconst151*x2333*x2336))+((cj1*x2334))+(((-1.0)*gconst150*x2332*x2333))), (((sj1*x2334))+(((-1.0)*sj4*x2331*x2332))+(((-1.0)*cj1*gconst150*x2336))+((cj1*gconst151*r20))+(((-1.0)*sj4*x2335*x2336))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2337=IKcos(j2);
IkReal x2338=IKsin(j2);
IkReal x2339=(r10*sj0);
IkReal x2340=(gconst150*sj4);
IkReal x2341=(cj0*r00);
IkReal x2342=((1.0)*cj4);
IkReal x2343=((0.0055)*gconst150);
IkReal x2344=((1.0)*gconst150);
IkReal x2345=(gconst151*sj4);
IkReal x2346=(r11*sj0);
IkReal x2347=(cj0*r01);
IkReal x2348=((0.0055)*gconst151);
IkReal x2349=(sj1*x2337);
IkReal x2350=(cj1*x2338);
IkReal x2351=(cj1*x2337);
IkReal x2352=(sj1*x2338);
IkReal x2353=(x2350+x2349);
evalcond[0]=((((-1.0)*r21*x2344))+x2352+(((-1.0)*x2351))+((gconst151*r20)));
evalcond[1]=(x2353+(((-1.0)*r22*x2342))+((r20*x2340))+((r21*x2345)));
evalcond[2]=((((-1.0)*x2344*x2346))+(((-1.0)*x2344*x2347))+x2353+((gconst151*x2339))+((gconst151*x2341)));
CheckValue<IkReal> x2354=IKPowWithIntegerCheck(cj4,-1);
if(!x2354.valid){
continue;
}
evalcond[3]=((((0.2215)*x2349))+(((0.2215)*x2350))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x2354.value)))+(((-1.0)*pz))+(((-0.03)*x2352))+(((0.03)*x2351)));
evalcond[4]=(((x2340*x2341))+(((-1.0)*cj0*r02*x2342))+x2351+(((-1.0)*x2352))+((x2345*x2347))+((x2345*x2346))+((x2339*x2340))+(((-1.0)*r12*sj0*x2342)));
evalcond[5]=((((-1.0)*x2346*x2348))+(((-1.0)*x2339*x2343))+(((0.2215)*x2351))+(((-0.2215)*x2352))+(((-1.0)*x2341*x2343))+(((-0.03)*x2350))+(((-0.03)*x2349))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*x2347*x2348))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2355=((1.0)*gconst150);
IkReal x2356=((1.0)*gconst151*sj4);
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2355))+((gconst151*r20)))),-1);
if(!x2357.valid){
continue;
}
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2355))+(((-1.0)*r11*x2356))+((cj4*r12)))),IkReal(((((-1.0)*r00*sj4*x2355))+(((-1.0)*r01*x2356))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2357.value)))+(x2358.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2359=IKsin(j0);
IkReal x2360=IKcos(j0);
IkReal x2361=(r12*sj4);
IkReal x2362=(gconst150*r10);
IkReal x2363=(gconst151*r11);
IkReal x2364=(gconst150*r00);
IkReal x2365=(r02*sj4);
IkReal x2366=(gconst151*r01);
IkReal x2367=((1.0)*x2359);
IkReal x2368=(cj4*x2360);
IkReal x2369=(r00*x2359);
IkReal x2370=((1.0)*x2360);
IkReal x2371=((0.0055)*x2360);
evalcond[0]=((((-1.0)*gconst151*r10*x2370))+((gconst150*r11*x2360))+((gconst151*x2369))+(((-1.0)*gconst150*r01*x2367)));
evalcond[1]=(((py*x2360))+(((-1.0)*px*x2367))+((x2363*x2371))+((x2362*x2371))+(((-0.0055)*x2359*x2366))+(((-0.0055)*x2359*x2364)));
evalcond[2]=(((r12*x2368))+((sj4*x2359*x2364))+((sj4*x2359*x2366))+(((-1.0)*sj4*x2363*x2370))+(((-1.0)*cj4*r02*x2367))+(((-1.0)*sj4*x2362*x2370)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x2364*x2367))+((x2360*x2361))+(((-1.0)*x2365*x2367))+(((-1.0)*cj4*x2366*x2367))+((x2362*x2368))+((x2363*x2368)));
evalcond[4]=((((-1.0)*cj4*x2362*x2367))+(((-1.0)*x2366*x2368))+(((-1.0)*x2365*x2370))+(((-1.0)*x2364*x2368))+(((-1.0)*x2361*x2367))+(((-1.0)*cj4*x2363*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2372=(gconst151*r20);
IkReal x2373=((1.0)*r21);
IkReal x2374=(gconst150*x2373);
CheckValue<IkReal> x2380 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2380.valid){
continue;
}
IkReal x2375=((1.0)*(x2380.value));
IkReal x2376=((-1.0)+x2372+(((-1.0)*x2374)));
IkReal x2377=((1.0)+x2372+(((-1.0)*x2374)));
IkReal x2378=x2059;
IkReal x2379=(((gconst150*r20*sj4))+((gconst151*r21*sj4))+(((-1.0)*cj4*r22)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2375)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2375)));
IkReal gconst150=((1.0)*r20*x2378);
IkReal gconst151=(x2373*x2378);
IkReal gconst152=x2376;
IkReal gconst153=x2377;
IkReal gconst154=x2379;
IkReal gconst155=x2379;
IkReal gconst156=x2376;
IkReal gconst157=x2377;
IkReal gconst158=x2379;
IkReal gconst159=x2379;
IkReal gconst160=x2377;
IkReal gconst161=x2376;
IkReal gconst162=x2379;
IkReal gconst163=x2379;
IkReal gconst164=x2377;
IkReal gconst165=x2376;
IkReal gconst166=x2379;
IkReal gconst167=x2379;
IkReal x2381=gconst150*gconst150;
IkReal x2382=r20*r20;
IkReal x2383=sj4*sj4;
IkReal x2384=gconst151*gconst151;
IkReal x2385=r21*r21;
IkReal x2386=cj4*cj4;
IkReal x2387=r22*r22;
IkReal x2388=((24.0)*x2384);
IkReal x2389=((4.0)*x2382);
IkReal x2390=((16.0)*x2382);
IkReal x2391=(gconst150*gconst151*r20*r21);
IkReal x2392=(x2383*x2385);
IkReal x2393=(x2381*x2383);
IkReal x2394=(x2386*x2387);
IkReal x2395=(x2381*x2385);
IkReal x2396=(cj4*gconst151*r21*r22*sj4);
IkReal x2397=(cj4*gconst150*r20*r22*sj4);
j1eval[0]=((((0.5)*(IKabs(((4.0)+(((-1.0)*x2389*x2393))+(((-8.0)*x2383*x2391))+(((-4.0)*x2384*x2392))+(((8.0)*x2391))+(((8.0)*x2396))+(((8.0)*x2397))+(((-1.0)*x2384*x2389))+(((-4.0)*x2394))+(((-4.0)*x2395)))))))+(((0.5)*(IKabs(((24.0)+(((-48.0)*x2383*x2391))+(((-24.0)*x2382*x2393))+(((-1.0)*x2382*x2388))+(((48.0)*x2397))+(((48.0)*x2396))+(((48.0)*x2391))+(((-1.0)*x2388*x2392))+(((-24.0)*x2394))+(((-24.0)*x2395)))))))+(IKabs(((16.0)+(((-16.0)*x2395))+(((-16.0)*x2394))+(((-1.0)*x2390*x2393))+(((-32.0)*x2383*x2391))+(((32.0)*x2391))+(((32.0)*x2397))+(((32.0)*x2396))+(((-16.0)*x2384*x2392))+(((-1.0)*x2384*x2390))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x2398=((16.0)*gconst161);
IkReal x2399=((16.0)*gconst164);
IkReal x2400=((16.0)*gconst153);
IkReal x2401=((16.0)*gconst156);
IkReal x2402=(gconst163*gconst166);
IkReal x2403=(gconst152*gconst167);
IkReal x2404=((2.0)*gconst159);
IkReal x2405=(gconst160*gconst164);
IkReal x2406=((4.0)*gconst165);
IkReal x2407=(gconst156*gconst161);
IkReal x2408=(gconst159*gconst160);
IkReal x2409=((2.0)*gconst157);
IkReal x2410=(gconst153*gconst162);
IkReal x2411=(gconst156*gconst159);
IkReal x2412=(gconst152*gconst155);
IkReal x2413=((4.0)*gconst152);
IkReal x2414=(gconst153*gconst154);
IkReal x2415=((2.0)*gconst164);
IkReal x2416=(gconst161*gconst167);
IkReal x2417=(gconst155*gconst160);
IkReal x2418=(gconst157*gconst158);
IkReal x2419=((8.0)*gconst158);
IkReal x2420=((4.0)*gconst160);
IkReal x2421=(gconst152*gconst163);
IkReal x2422=(gconst158*gconst165);
IkReal x2423=(gconst160*gconst163);
IkReal x2424=((2.0)*gconst165);
IkReal x2425=((8.0)*gconst156);
IkReal x2426=(gconst161*gconst162);
IkReal x2427=(gconst159*gconst164);
IkReal x2428=(gconst152*gconst166);
IkReal x2429=(gconst165*gconst166);
IkReal x2430=((2.0)*gconst153);
IkReal x2431=((2.0)*gconst156);
IkReal x2432=(gconst160*gconst167);
IkReal x2433=((16.0)*gconst155);
IkReal x2434=((1.0)*gconst163);
IkReal x2435=(gconst154*gconst161);
IkReal x2436=(gconst153*gconst164);
IkReal x2437=(gconst160*gconst166);
IkReal x2438=(gconst156*gconst167);
IkReal x2439=(gconst157*gconst166);
IkReal x2440=((8.0)*gconst164);
IkReal x2441=(gconst161*gconst164);
IkReal x2442=((2.0)*gconst167);
IkReal x2443=(gconst153*gconst166);
IkReal x2444=((4.0)*gconst157);
IkReal x2445=(gconst161*gconst166);
IkReal x2446=(gconst153*gconst156);
IkReal x2447=(gconst164*gconst167);
IkReal x2448=((4.0)*x2441);
IkReal x2449=((8.0)*x2445);
IkReal x2450=(gconst163*x2440);
IkReal x2451=((4.0)*x2407);
IkReal x2452=((4.0)*x2436);
IkReal x2453=(gconst161*x2419);
IkReal x2454=((8.0)*x2443);
IkReal x2455=(gconst163*x2425);
IkReal x2456=(gconst155*x2440);
IkReal x2457=((4.0)*x2446);
IkReal x2458=(gconst153*x2419);
IkReal x2459=(gconst155*x2425);
IkReal x2460=(gconst161*x2424);
IkReal x2461=((1.0)*gconst155*gconst164);
IkReal x2462=((1.0)*gconst155*gconst156);
IkReal x2463=(x2400+x2457);
IkReal x2464=(x2448+x2399);
IkReal x2465=(x2451+x2452);
IkReal x2466=(x2449+x2450);
IkReal x2467=(x2459+x2458);
IkReal x2468=(x2455+x2454+x2456+x2453);
op[0]=((((-1.0)*gconst167*x2405*x2434))+((gconst160*gconst165*x2402))+(((-1.0)*x2426*x2429))+((gconst162*gconst164*x2416))+(((-1.0)*x2448)));
op[1]=(((x2405*x2442))+((x2423*x2424))+(((-1.0)*x2424*x2426))+(((2.0)*gconst163*x2405))+(((-1.0)*x2424*x2445))+((x2415*x2416))+(((-1.0)*x2424*x2437))+(((-1.0)*x2466))+(((-1.0)*x2415*x2426)));
op[2]=(((x2410*x2447))+((gconst152*gconst165*x2402))+x2464+((gconst157*gconst160*x2402))+((x2426*x2427))+(((-1.0)*x2423*x2438))+((x2417*x2429))+((gconst154*gconst164*x2416))+(((-1.0)*x2426*x2439))+(((-16.0)*x2402))+(((-1.0)*gconst155*gconst167*x2405))+(((-1.0)*x2429*x2435))+((x2422*x2423))+(((-1.0)*gconst164*x2403*x2434))+((gconst162*gconst167*x2407))+(((-1.0)*x2398))+(((-1.0)*x2422*x2426))+(((-1.0)*x2465))+(((-1.0)*gconst159*x2405*x2434))+(((-4.0)*x2405))+(((-1.0)*x2410*x2429))+(((-1.0)*gconst160*x2406))+(((-1.0)*gconst161*x2406)));
op[3]=((((-1.0)*x2409*x2426))+x2466+(((-2.0)*gconst162*x2407))+((x2407*x2442))+((x2404*x2441))+((x2417*x2424))+(((-32.0)*gconst163))+(((-1.0)*x2424*x2428))+((x2415*x2421))+(((2.0)*gconst155*x2405))+(((-1.0)*x2410*x2424))+(((-1.0)*x2424*x2443))+((x2431*x2432))+(((-1.0)*x2415*x2435))+((x2409*x2423))+(((-2.0)*gconst161*x2422))+(((32.0)*gconst166))+((x2423*x2431))+(((-1.0)*x2424*x2435))+(((-1.0)*x2409*x2437))+(((-1.0)*x2468))+((x2404*x2405))+((gconst153*gconst167*x2415))+((x2421*x2424))+(((-1.0)*x2410*x2415))+((x2403*x2415))+(((-2.0)*gconst160*x2422))+(((-1.0)*x2409*x2445)));
op[4]=((64.0)+((gconst154*gconst167*x2407))+(((-1.0)*x2422*x2435))+(((-1.0)*x2414*x2429))+(((-16.0)*gconst158*gconst163))+((x2418*x2423))+x2465+x2401+(((-1.0)*x2418*x2426))+(((-1.0)*gconst153*x2406))+((x2417*x2422))+(((-1.0)*gconst155*gconst159*x2405))+(((-1.0)*gconst161*x2444))+(((-1.0)*x2421*x2427))+((x2414*x2447))+x2398+(((-1.0)*gconst156*x2420))+(((-1.0)*x2403*x2461))+(((-1.0)*gconst152*x2406))+((x2412*x2429))+(((-1.0)*x2417*x2438))+(((-1.0)*x2435*x2439))+((x2410*x2438))+(((-1.0)*x2410*x2439))+(((-1.0)*gconst166*x2433))+(((-1.0)*gconst156*x2408*x2434))+((x2417*x2439))+(((-1.0)*x2464))+(((-1.0)*x2463))+(((-1.0)*gconst164*x2413))+((x2427*x2435))+((gconst152*gconst157*x2402))+((gconst159*gconst162*x2407))+((x2421*x2422))+(((-1.0)*x2410*x2422))+(((-1.0)*gconst157*x2420))+((x2410*x2427))+(((-1.0)*gconst156*x2403*x2434)));
op[5]=((((-2.0)*gconst152*x2422))+((gconst156*gconst160*x2404))+(((-1.0)*x2409*x2428))+(((-2.0)*gconst154*x2407))+x2468+((x2403*x2431))+(((-32.0)*gconst155))+(((-1.0)*gconst158*gconst161*x2409))+((x2412*x2424))+(((-1.0)*x2414*x2415))+((x2409*x2417))+((x2421*x2431))+(((32.0)*gconst158))+((x2409*x2421))+((x2417*x2431))+(((-1.0)*x2409*x2435))+(((-1.0)*x2422*x2430))+(((-1.0)*gconst158*gconst160*x2409))+(((-1.0)*x2467))+(((-1.0)*x2410*x2431))+((x2404*x2407))+((x2430*x2438))+((x2404*x2436))+((gconst152*gconst164*x2404))+(((-1.0)*x2409*x2410))+(((-1.0)*x2409*x2443))+((x2412*x2415))+(((-1.0)*x2414*x2424)));
op[6]=((((-1.0)*gconst158*x2433))+(((-1.0)*x2414*x2422))+((x2418*x2421))+x2463+(((-1.0)*x2401))+(((-1.0)*x2403*x2462))+((x2410*x2411))+((x2412*x2422))+(((-1.0)*x2411*x2421))+((x2414*x2427))+((x2417*x2418))+(((-1.0)*x2418*x2435))+(((-1.0)*x2414*x2439))+(((-1.0)*x2465))+((gconst154*gconst159*x2407))+(((-1.0)*gconst157*x2413))+(((-1.0)*gconst156*x2413))+(((-1.0)*x2412*x2427))+(((-1.0)*gconst153*x2444))+((x2414*x2438))+(((-1.0)*x2408*x2462))+((x2412*x2439))+(((-1.0)*x2410*x2418)));
op[7]=(x2467+((x2404*x2446))+((x2409*x2412))+(((-1.0)*x2414*x2431))+(((-1.0)*gconst153*gconst158*x2409))+((gconst152*gconst156*x2404))+((x2412*x2431))+(((-1.0)*x2409*x2414))+(((-1.0)*gconst152*gconst158*x2409)));
op[8]=((((-1.0)*x2414*x2418))+(((-1.0)*x2411*x2412))+((x2411*x2414))+(((-1.0)*x2457))+((x2412*x2418)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2469=(gconst150*sj1);
IkReal x2470=((1.0)*r20);
IkReal x2471=(cj1*sj4);
IkReal x2472=(cj4*r22);
IkReal x2473=(gconst151*sj1);
IkReal x2474=((1.0)*r21);
if( IKabs(((((-1.0)*gconst150*x2470*x2471))+((r21*x2469))+(((-1.0)*gconst151*x2471*x2474))+(((-1.0)*x2470*x2473))+((cj1*x2472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2469*x2470))+(((-1.0)*sj4*x2473*x2474))+(((-1.0)*cj1*gconst150*x2474))+((sj1*x2472))+((cj1*gconst151*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst150*x2470*x2471))+((r21*x2469))+(((-1.0)*gconst151*x2471*x2474))+(((-1.0)*x2470*x2473))+((cj1*x2472))))+IKsqr(((((-1.0)*sj4*x2469*x2470))+(((-1.0)*sj4*x2473*x2474))+(((-1.0)*cj1*gconst150*x2474))+((sj1*x2472))+((cj1*gconst151*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst150*x2470*x2471))+((r21*x2469))+(((-1.0)*gconst151*x2471*x2474))+(((-1.0)*x2470*x2473))+((cj1*x2472))), ((((-1.0)*sj4*x2469*x2470))+(((-1.0)*sj4*x2473*x2474))+(((-1.0)*cj1*gconst150*x2474))+((sj1*x2472))+((cj1*gconst151*r20))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2475=IKcos(j2);
IkReal x2476=IKsin(j2);
IkReal x2477=(r10*sj0);
IkReal x2478=(gconst150*sj4);
IkReal x2479=(cj0*r00);
IkReal x2480=((1.0)*cj4);
IkReal x2481=((0.0055)*gconst150);
IkReal x2482=((1.0)*gconst150);
IkReal x2483=(gconst151*sj4);
IkReal x2484=(r11*sj0);
IkReal x2485=(cj0*r01);
IkReal x2486=((0.0055)*gconst151);
IkReal x2487=(sj1*x2475);
IkReal x2488=(cj1*x2476);
IkReal x2489=(cj1*x2475);
IkReal x2490=(sj1*x2476);
IkReal x2491=(x2488+x2487);
evalcond[0]=(x2490+(((-1.0)*x2489))+((gconst151*r20))+(((-1.0)*r21*x2482)));
evalcond[1]=((((-1.0)*r22*x2480))+x2491+((r20*x2478))+((r21*x2483)));
evalcond[2]=(x2491+((gconst151*x2477))+((gconst151*x2479))+(((-1.0)*x2482*x2484))+(((-1.0)*x2482*x2485)));
CheckValue<IkReal> x2492=IKPowWithIntegerCheck(cj4,-1);
if(!x2492.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x2492.value)))+(((-0.03)*x2490))+(((-1.0)*pz))+(((0.2215)*x2487))+(((0.2215)*x2488))+(((0.03)*x2489)));
evalcond[4]=(x2489+((x2478*x2479))+(((-1.0)*cj0*r02*x2480))+(((-1.0)*x2490))+((x2483*x2485))+((x2483*x2484))+((x2477*x2478))+(((-1.0)*r12*sj0*x2480)));
evalcond[5]=((((-1.0)*x2477*x2481))+(((-0.03)*x2487))+(((-0.03)*x2488))+(((-0.2215)*x2490))+(((-1.0)*x2485*x2486))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((0.2215)*x2489))+(((-1.0)*x2484*x2486))+(((-1.0)*x2479*x2481))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2493=((0.0055)*cj5);
IkReal x2494=((0.0055)*sj5);
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal((((r11*x2493))+py+((r10*x2494)))),IkReal((((r00*x2494))+px+((r01*x2493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x2493))+((cj4*cj5*rxp1_2))+((cj4*rxp0_2*sj5))+((r21*sj4*x2494))+((rxp2_2*sj4)))),-1);
if(!x2496.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2495.value)+(((1.5707963267949)*(x2496.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2497=IKsin(j0);
IkReal x2498=IKcos(j0);
IkReal x2499=(cj5*r01);
IkReal x2500=((1.0)*sj4);
IkReal x2501=(cj4*r10);
IkReal x2502=((1.0)*cj4);
IkReal x2503=(r00*sj5);
IkReal x2504=(cj5*r11);
IkReal x2505=((0.0055)*x2497);
IkReal x2506=(sj5*x2498);
IkReal x2507=(cj4*x2498);
IkReal x2508=(sj4*x2497);
IkReal x2509=(r02*x2497);
IkReal x2510=(cj5*x2498);
IkReal x2511=((1.0)*x2497);
evalcond[0]=((((-1.0)*r10*x2510))+(((-1.0)*r01*sj5*x2511))+((cj5*r00*x2497))+((r11*x2506)));
evalcond[1]=((((-1.0)*x2503*x2505))+(((0.0055)*x2498*x2504))+(((0.0055)*r10*x2506))+(((-1.0)*x2499*x2505))+(((-1.0)*px*x2511))+((py*x2498)));
evalcond[2]=(((r12*x2507))+(((-1.0)*x2498*x2500*x2504))+(((-1.0)*x2502*x2509))+((x2499*x2508))+(((-1.0)*r10*x2500*x2506))+((x2503*x2508)));
evalcond[3]=((1.0)+((x2504*x2507))+((r12*sj4*x2498))+((x2501*x2506))+(((-1.0)*x2500*x2509))+(((-1.0)*x2497*x2499*x2502))+(((-1.0)*x2497*x2502*x2503)));
evalcond[4]=((((-1.0)*r02*x2498*x2500))+(((-1.0)*x2498*x2502*x2503))+(((-1.0)*sj5*x2501*x2511))+(((-1.0)*r12*x2497*x2500))+(((-1.0)*x2498*x2499*x2502))+(((-1.0)*x2497*x2502*x2504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(cj4,-1);
if(!x2533.valid){
continue;
}
IkReal x2512=x2533.value;
IkReal x2513=((6000.0)*pz);
IkReal x2514=((0.066)*cj0);
IkReal x2515=(r00*sj5);
IkReal x2516=(cj4*r22);
IkReal x2517=(cj0*px);
IkReal x2518=(cj5*r01);
IkReal x2519=(py*sj0);
IkReal x2520=(cj5*r20);
IkReal x2521=(r21*sj5);
IkReal x2522=((0.022)*cj0);
IkReal x2523=((180.0)*x2521);
IkReal x2524=(r10*sj0*sj5);
IkReal x2525=(cj5*r21*sj4);
IkReal x2526=(cj5*r11*sj0);
IkReal x2527=(r22*sj4*x2512);
IkReal x2528=(r20*sj4*sj5);
IkReal x2529=((1329.0)*x2525);
IkReal x2530=((1329.0)*x2528);
IkReal x2531=((((33.0)*x2527))+(((1329.0)*x2516))+(((180.0)*x2520)));
IkReal x2532=(x2523+x2529+x2513+x2530);
j1eval[0]=((6.72)+(((0.002)*(IKabs(((420.0)+(((443.0)*x2528))+(((443.0)*x2525))+(((60.0)*x2521))+(((-443.0)*x2516))+(((2000.0)*pz))+(((-11.0)*x2527))+(((-60.0)*x2520)))))))+(((0.002)*(IKabs(((-420.0)+x2532+(((-1.0)*x2531)))))))+(((0.002)*(IKabs(((420.0)+x2532+(((-1.0)*x2531)))))))+(((2.0)*(IKabs(((((0.066)*x2526))+(((0.066)*x2524))+(((12.0)*x2517))+(((12.0)*x2519))+((x2514*x2515))+((x2514*x2518))+(((0.36)*x2516))+(((-0.36)*x2525))+(((-0.36)*x2528))+(((-2.658)*x2520))+(((2.658)*x2521)))))))+(IKabs((((x2515*x2522))+(((4.0)*x2517))+(((4.0)*x2519))+(((-0.886)*x2520))+(((-0.12)*x2525))+(((-0.12)*x2528))+(((0.886)*x2521))+((x2518*x2522))+(((0.022)*x2526))+(((0.022)*x2524))+(((0.12)*x2516))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(cj4,-1);
if(!x2563.valid){
continue;
}
IkReal x2534=x2563.value;
IkReal x2535=((420.0)*cj4);
IkReal x2536=cj4*cj4;
IkReal x2537=(cj4*r21);
IkReal x2538=(cj5*sj4);
IkReal x2539=(cj4*pz);
IkReal x2540=((0.002)*x2534);
IkReal x2541=(r22*sj4);
IkReal x2542=(cj4*r20);
IkReal x2543=(sj4*sj5);
IkReal x2544=((6000.0)*x2539);
IkReal x2545=((33.0)*x2541);
IkReal x2546=((2000.0)*x2539);
IkReal x2547=((11.0)*x2541);
IkReal x2548=(r22*x2536);
IkReal x2549=((180.0)*sj5*x2537);
IkReal x2550=((180.0)*cj5*x2542);
IkReal x2551=((1329.0)*x2548);
IkReal x2552=((60.0)*sj5*x2537);
IkReal x2553=((443.0)*x2548);
IkReal x2554=((60.0)*cj5*x2542);
IkReal x2555=((1329.0)*x2537*x2538);
IkReal x2556=((1329.0)*x2542*x2543);
IkReal x2557=((443.0)*x2537*x2538);
IkReal x2558=((443.0)*x2542*x2543);
IkReal x2559=(x2553+x2554+x2547);
IkReal x2560=(x2550+x2551+x2545);
IkReal x2561=(x2552+x2557+x2558+x2546);
IkReal x2562=(x2555+x2556+x2544+x2549);
op[0]=(x2540*((x2561+x2535+(((-1.0)*x2559)))));
op[1]=0;
op[2]=(x2540*((x2562+x2535+(((-1.0)*x2560)))));
op[3]=0;
op[4]=(x2540*((x2562+(((-1.0)*x2535))+(((-1.0)*x2560)))));
op[5]=0;
op[6]=(x2540*((x2561+(((-1.0)*x2535))+(((-1.0)*x2559)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2564=((0.066)*sj5);
IkReal x2565=(cj0*r00);
IkReal x2566=(r10*sj0);
IkReal x2567=(cj0*px);
IkReal x2568=((0.022)*sj5);
IkReal x2569=(py*sj0);
IkReal x2570=(cj5*r20);
IkReal x2571=(cj4*r22);
IkReal x2572=(r21*sj5);
IkReal x2573=((4.0)*x2567);
IkReal x2574=((0.12)*x2571);
IkReal x2575=((0.886)*x2572);
IkReal x2576=((4.0)*x2569);
IkReal x2577=(cj0*cj5*r01);
IkReal x2578=(cj5*r21*sj4);
IkReal x2579=(r20*sj4*sj5);
IkReal x2580=(cj5*r11*sj0);
IkReal x2581=(x2565*x2568);
IkReal x2582=((0.022)*x2580);
IkReal x2583=((0.022)*x2577);
IkReal x2584=(x2566*x2568);
IkReal x2585=((((0.12)*x2579))+(((0.12)*x2578))+(((0.886)*x2570)));
IkReal x2586=(x2584+x2583+x2582+x2581+x2576+x2574+x2575+x2573);
IkReal x2587=((((0.36)*x2571))+(((0.066)*x2577))+(((0.066)*x2580))+(((-0.36)*x2579))+(((-0.36)*x2578))+(((2.658)*x2572))+(((12.0)*x2567))+(((12.0)*x2569))+(((-2.658)*x2570))+((x2564*x2566))+((x2564*x2565)));
j1evalpoly[0]=(x2586+(((1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((1.68)*htj1))+(((3.36)*(htj1*htj1*htj1)))+((x2587*(htj1*htj1*htj1*htj1)))+(((-1.0)*x2585))+((x2587*(htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2586+(((-1.0)*x2585)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2588=(cj4*r22);
IkReal x2589=(cj1*cj5);
IkReal x2590=(cj5*sj1);
IkReal x2591=(r21*sj5);
IkReal x2592=((1.0)*r21*sj4);
IkReal x2593=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*x2588))+(((-1.0)*cj1*x2593))+(((-1.0)*x2589*x2592))+(((-1.0)*r20*x2590))+((sj1*x2591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2590*x2592))+((r20*x2589))+(((-1.0)*sj1*x2593))+((sj1*x2588))+(((-1.0)*cj1*x2591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2588))+(((-1.0)*cj1*x2593))+(((-1.0)*x2589*x2592))+(((-1.0)*r20*x2590))+((sj1*x2591))))+IKsqr(((((-1.0)*x2590*x2592))+((r20*x2589))+(((-1.0)*sj1*x2593))+((sj1*x2588))+(((-1.0)*cj1*x2591))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2588))+(((-1.0)*cj1*x2593))+(((-1.0)*x2589*x2592))+(((-1.0)*r20*x2590))+((sj1*x2591))), ((((-1.0)*x2590*x2592))+((r20*x2589))+(((-1.0)*sj1*x2593))+((sj1*x2588))+(((-1.0)*cj1*x2591))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2594=IKcos(j2);
IkReal x2595=IKsin(j2);
IkReal x2596=((0.2215)*sj1);
IkReal x2597=((0.0055)*sj5);
IkReal x2598=(r10*sj0);
IkReal x2599=(cj5*sj4);
IkReal x2600=(cj0*r00);
IkReal x2601=((1.0)*cj4);
IkReal x2602=(cj0*r01);
IkReal x2603=((1.0)*sj0);
IkReal x2604=(sj4*sj5);
IkReal x2605=((0.0055)*cj5);
IkReal x2606=(r11*sj0);
IkReal x2607=((1.0)*sj5);
IkReal x2608=(sj1*x2594);
IkReal x2609=(cj1*x2595);
IkReal x2610=(cj1*x2594);
IkReal x2611=(sj1*x2595);
IkReal x2612=(x2608+x2609);
evalcond[0]=(((cj5*r20))+(((-1.0)*x2610))+(((-1.0)*r21*x2607))+x2611);
evalcond[1]=(((r20*x2604))+(((-1.0)*r22*x2601))+x2612+((r21*x2599)));
evalcond[2]=(((cj5*x2600))+(((-1.0)*x2602*x2607))+(((-1.0)*r11*sj5*x2603))+((cj5*x2598))+x2612);
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(cj4,-1);
if(!x2613.valid){
continue;
}
evalcond[3]=(((x2594*x2596))+(((0.03)*x2610))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x2613.value)))+(((0.2215)*x2609))+(((-1.0)*pz))+(((-0.03)*x2611)));
evalcond[4]=((((-1.0)*x2611))+((x2600*x2604))+(((-1.0)*cj0*r02*x2601))+((x2598*x2604))+(((-1.0)*r12*sj0*x2601))+((x2599*x2602))+((x2599*x2606))+x2610);
evalcond[5]=((((-0.03)*x2609))+(((-0.03)*x2608))+(((-1.0)*x2597*x2600))+(((0.2215)*x2610))+(((-1.0)*x2595*x2596))+(((-1.0)*x2597*x2598))+(((-1.0)*py*x2603))+(((-0.21)*sj1))+(((-1.0)*x2602*x2605))+(((-1.0)*x2605*x2606))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2614=((1.0)*sj4*sj5);
IkReal x2615=((1.0)*cj5*sj4);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2615))+(((-1.0)*r10*x2614))+((cj4*r12)))),IkReal(((((-1.0)*r00*x2614))+(((-1.0)*r01*x2615))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2617.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2618=IKsin(j0);
IkReal x2619=IKcos(j0);
IkReal x2620=(cj5*r01);
IkReal x2621=((1.0)*sj4);
IkReal x2622=(cj4*r10);
IkReal x2623=((1.0)*cj4);
IkReal x2624=(r00*sj5);
IkReal x2625=(cj5*r11);
IkReal x2626=((0.0055)*x2618);
IkReal x2627=(sj5*x2619);
IkReal x2628=(cj4*x2619);
IkReal x2629=(sj4*x2618);
IkReal x2630=(r02*x2618);
IkReal x2631=(cj5*x2619);
IkReal x2632=((1.0)*x2618);
evalcond[0]=((((-1.0)*r01*sj5*x2632))+((cj5*r00*x2618))+((r11*x2627))+(((-1.0)*r10*x2631)));
evalcond[1]=((((-1.0)*x2624*x2626))+(((-1.0)*px*x2632))+(((0.0055)*x2619*x2625))+(((0.0055)*r10*x2627))+(((-1.0)*x2620*x2626))+((py*x2619)));
evalcond[2]=(((x2624*x2629))+(((-1.0)*r10*x2621*x2627))+(((-1.0)*x2623*x2630))+((x2620*x2629))+(((-1.0)*x2619*x2621*x2625))+((r12*x2628)));
evalcond[3]=((1.0)+((r12*sj4*x2619))+(((-1.0)*x2618*x2620*x2623))+(((-1.0)*x2621*x2630))+(((-1.0)*x2618*x2623*x2624))+((x2622*x2627))+((x2625*x2628)));
evalcond[4]=((((-1.0)*sj5*x2622*x2632))+(((-1.0)*r12*x2618*x2621))+(((-1.0)*x2619*x2623*x2624))+(((-1.0)*x2619*x2620*x2623))+(((-1.0)*r02*x2619*x2621))+(((-1.0)*x2618*x2623*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(cj4,-1);
if(!x2654.valid){
continue;
}
IkReal x2633=x2654.value;
IkReal x2634=((6000.0)*pz);
IkReal x2635=((0.066)*cj0);
IkReal x2636=(r00*sj5);
IkReal x2637=(cj4*r22);
IkReal x2638=(cj0*px);
IkReal x2639=(cj5*r01);
IkReal x2640=(py*sj0);
IkReal x2641=(cj5*r20);
IkReal x2642=(r21*sj5);
IkReal x2643=((0.022)*cj0);
IkReal x2644=((180.0)*x2642);
IkReal x2645=(r10*sj0*sj5);
IkReal x2646=(cj5*r21*sj4);
IkReal x2647=(cj5*r11*sj0);
IkReal x2648=(r22*sj4*x2633);
IkReal x2649=(r20*sj4*sj5);
IkReal x2650=((1329.0)*x2646);
IkReal x2651=((1329.0)*x2649);
IkReal x2652=((((1329.0)*x2637))+(((33.0)*x2648))+(((180.0)*x2641)));
IkReal x2653=(x2634+x2644+x2651+x2650);
j1eval[0]=((6.72)+(((0.002)*(IKabs(((-420.0)+(((-1.0)*x2652))+x2653)))))+(IKabs(((((0.022)*x2645))+(((0.022)*x2647))+((x2639*x2643))+(((4.0)*x2638))+((x2636*x2643))+(((0.886)*x2642))+(((0.12)*x2637))+(((4.0)*x2640))+(((-0.12)*x2646))+(((-0.12)*x2649))+(((-0.886)*x2641)))))+(((0.002)*(IKabs(((420.0)+(((-1.0)*x2652))+x2653)))))+(((0.002)*(IKabs(((420.0)+(((443.0)*x2646))+(((443.0)*x2649))+(((-11.0)*x2648))+(((-443.0)*x2637))+(((60.0)*x2642))+(((2000.0)*pz))+(((-60.0)*x2641)))))))+(((2.0)*(IKabs(((((12.0)*x2640))+(((-2.658)*x2641))+(((0.066)*x2647))+(((0.066)*x2645))+(((2.658)*x2642))+(((-0.36)*x2646))+(((-0.36)*x2649))+(((0.36)*x2637))+((x2635*x2639))+((x2635*x2636))+(((12.0)*x2638))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(cj4,-1);
if(!x2684.valid){
continue;
}
IkReal x2655=x2684.value;
IkReal x2656=((420.0)*cj4);
IkReal x2657=cj4*cj4;
IkReal x2658=(cj4*r21);
IkReal x2659=(cj5*sj4);
IkReal x2660=(cj4*pz);
IkReal x2661=((0.002)*x2655);
IkReal x2662=(r22*sj4);
IkReal x2663=(cj4*r20);
IkReal x2664=(sj4*sj5);
IkReal x2665=((6000.0)*x2660);
IkReal x2666=((33.0)*x2662);
IkReal x2667=((2000.0)*x2660);
IkReal x2668=((11.0)*x2662);
IkReal x2669=(r22*x2657);
IkReal x2670=((180.0)*sj5*x2658);
IkReal x2671=((180.0)*cj5*x2663);
IkReal x2672=((1329.0)*x2669);
IkReal x2673=((60.0)*sj5*x2658);
IkReal x2674=((443.0)*x2669);
IkReal x2675=((60.0)*cj5*x2663);
IkReal x2676=((1329.0)*x2658*x2659);
IkReal x2677=((1329.0)*x2663*x2664);
IkReal x2678=((443.0)*x2658*x2659);
IkReal x2679=((443.0)*x2663*x2664);
IkReal x2680=(x2668+x2675+x2674);
IkReal x2681=(x2666+x2671+x2672);
IkReal x2682=(x2667+x2673+x2679+x2678);
IkReal x2683=(x2665+x2670+x2677+x2676);
op[0]=(x2661*(((((-1.0)*x2680))+x2656+x2682)));
op[1]=0;
op[2]=(x2661*(((((-1.0)*x2681))+x2656+x2683)));
op[3]=0;
op[4]=(x2661*(((((-1.0)*x2681))+(((-1.0)*x2656))+x2683)));
op[5]=0;
op[6]=(x2661*(((((-1.0)*x2680))+(((-1.0)*x2656))+x2682)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2685=((0.066)*sj5);
IkReal x2686=(cj0*r00);
IkReal x2687=(r10*sj0);
IkReal x2688=(cj0*px);
IkReal x2689=((0.022)*sj5);
IkReal x2690=(py*sj0);
IkReal x2691=(cj5*r20);
IkReal x2692=(cj4*r22);
IkReal x2693=(r21*sj5);
IkReal x2694=((4.0)*x2688);
IkReal x2695=((0.12)*x2692);
IkReal x2696=((0.886)*x2693);
IkReal x2697=((4.0)*x2690);
IkReal x2698=(cj0*cj5*r01);
IkReal x2699=(cj5*r21*sj4);
IkReal x2700=(r20*sj4*sj5);
IkReal x2701=(cj5*r11*sj0);
IkReal x2702=(x2686*x2689);
IkReal x2703=((0.022)*x2701);
IkReal x2704=((0.022)*x2698);
IkReal x2705=(x2687*x2689);
IkReal x2706=((((0.886)*x2691))+(((0.12)*x2699))+(((0.12)*x2700)));
IkReal x2707=(x2705+x2704+x2703+x2702+x2697+x2696+x2695+x2694);
IkReal x2708=((((12.0)*x2688))+(((-0.36)*x2700))+(((12.0)*x2690))+(((0.066)*x2701))+(((0.066)*x2698))+(((2.658)*x2693))+((x2685*x2686))+((x2685*x2687))+(((-2.658)*x2691))+(((-0.36)*x2699))+(((0.36)*x2692)));
j1evalpoly[0]=(x2707+(((1.68)*(htj1*htj1*htj1*htj1*htj1)))+((x2708*(htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2707+(((-1.0)*x2706))))))+(((1.68)*htj1))+(((3.36)*(htj1*htj1*htj1)))+(((-1.0)*x2706))+((x2708*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2709=(cj4*r22);
IkReal x2710=(cj1*cj5);
IkReal x2711=(cj5*sj1);
IkReal x2712=(r21*sj5);
IkReal x2713=((1.0)*r21*sj4);
IkReal x2714=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*r20*x2711))+((sj1*x2712))+(((-1.0)*x2710*x2713))+((cj1*x2709))+(((-1.0)*cj1*x2714)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2712))+(((-1.0)*sj1*x2714))+(((-1.0)*x2711*x2713))+((sj1*x2709))+((r20*x2710)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2711))+((sj1*x2712))+(((-1.0)*x2710*x2713))+((cj1*x2709))+(((-1.0)*cj1*x2714))))+IKsqr(((((-1.0)*cj1*x2712))+(((-1.0)*sj1*x2714))+(((-1.0)*x2711*x2713))+((sj1*x2709))+((r20*x2710))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2711))+((sj1*x2712))+(((-1.0)*x2710*x2713))+((cj1*x2709))+(((-1.0)*cj1*x2714))), ((((-1.0)*cj1*x2712))+(((-1.0)*sj1*x2714))+(((-1.0)*x2711*x2713))+((sj1*x2709))+((r20*x2710))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2715=IKcos(j2);
IkReal x2716=IKsin(j2);
IkReal x2717=((0.2215)*sj1);
IkReal x2718=((0.0055)*sj5);
IkReal x2719=(r10*sj0);
IkReal x2720=(cj5*sj4);
IkReal x2721=(cj0*r00);
IkReal x2722=((1.0)*cj4);
IkReal x2723=(cj0*r01);
IkReal x2724=((1.0)*sj0);
IkReal x2725=(sj4*sj5);
IkReal x2726=((0.0055)*cj5);
IkReal x2727=(r11*sj0);
IkReal x2728=((1.0)*sj5);
IkReal x2729=(sj1*x2715);
IkReal x2730=(cj1*x2716);
IkReal x2731=(cj1*x2715);
IkReal x2732=(sj1*x2716);
IkReal x2733=(x2730+x2729);
evalcond[0]=(x2732+((cj5*r20))+(((-1.0)*r21*x2728))+(((-1.0)*x2731)));
evalcond[1]=(x2733+((r21*x2720))+(((-1.0)*r22*x2722))+((r20*x2725)));
evalcond[2]=(x2733+(((-1.0)*x2723*x2728))+(((-1.0)*r11*sj5*x2724))+((cj5*x2719))+((cj5*x2721)));
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(cj4,-1);
if(!x2734.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x2734.value)))+(((0.03)*x2731))+(((-1.0)*pz))+((x2715*x2717))+(((-0.03)*x2732))+(((0.2215)*x2730)));
evalcond[4]=(x2731+(((-1.0)*cj0*r02*x2722))+(((-1.0)*x2732))+((x2721*x2725))+((x2720*x2727))+((x2720*x2723))+((x2719*x2725))+(((-1.0)*r12*sj0*x2722)));
evalcond[5]=((((-1.0)*x2718*x2719))+(((-1.0)*x2718*x2721))+(((-1.0)*x2726*x2727))+(((-1.0)*x2723*x2726))+(((-0.03)*x2729))+(((-0.21)*sj1))+(((-0.03)*x2730))+(((-1.0)*x2716*x2717))+(((0.2215)*x2731))+(((-1.0)*cj0*px))+(((-1.0)*py*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2735=((1.0)*cj5);
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj4*sj5))+(((-1.0)*r21*sj4*x2735)))),-1);
if(!x2736.valid){
continue;
}
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x2735)))),IkReal((((r01*sj5))+(((-1.0)*r00*x2735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2736.value)))+(x2737.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2738=IKsin(j0);
IkReal x2739=IKcos(j0);
IkReal x2740=(cj5*r01);
IkReal x2741=((1.0)*sj4);
IkReal x2742=(cj4*r10);
IkReal x2743=((1.0)*cj4);
IkReal x2744=(r00*sj5);
IkReal x2745=(cj5*r11);
IkReal x2746=((0.0055)*x2738);
IkReal x2747=(sj5*x2739);
IkReal x2748=(cj4*x2739);
IkReal x2749=(sj4*x2738);
IkReal x2750=(r02*x2738);
IkReal x2751=(cj5*x2739);
IkReal x2752=((1.0)*x2738);
evalcond[0]=((((-1.0)*r10*x2751))+((r11*x2747))+((cj5*r00*x2738))+(((-1.0)*r01*sj5*x2752)));
evalcond[1]=(((py*x2739))+(((-1.0)*x2744*x2746))+(((-1.0)*x2740*x2746))+(((0.0055)*x2739*x2745))+(((0.0055)*r10*x2747))+(((-1.0)*px*x2752)));
evalcond[2]=((((-1.0)*r10*x2741*x2747))+((r12*x2748))+(((-1.0)*x2739*x2741*x2745))+((x2744*x2749))+((x2740*x2749))+(((-1.0)*x2743*x2750)));
evalcond[3]=((1.0)+((x2742*x2747))+(((-1.0)*x2738*x2743*x2744))+((x2745*x2748))+(((-1.0)*x2741*x2750))+(((-1.0)*x2738*x2740*x2743))+((r12*sj4*x2739)));
evalcond[4]=((((-1.0)*x2739*x2743*x2744))+(((-1.0)*x2738*x2743*x2745))+(((-1.0)*sj5*x2742*x2752))+(((-1.0)*r02*x2739*x2741))+(((-1.0)*r12*x2738*x2741))+(((-1.0)*x2739*x2740*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2774=IKPowWithIntegerCheck(cj4,-1);
if(!x2774.valid){
continue;
}
IkReal x2753=x2774.value;
IkReal x2754=((6000.0)*pz);
IkReal x2755=((0.066)*cj0);
IkReal x2756=(r00*sj5);
IkReal x2757=(cj4*r22);
IkReal x2758=(cj0*px);
IkReal x2759=(cj5*r01);
IkReal x2760=(py*sj0);
IkReal x2761=(cj5*r20);
IkReal x2762=(r21*sj5);
IkReal x2763=((0.022)*cj0);
IkReal x2764=((180.0)*x2762);
IkReal x2765=(r10*sj0*sj5);
IkReal x2766=(cj5*r21*sj4);
IkReal x2767=(cj5*r11*sj0);
IkReal x2768=(r22*sj4*x2753);
IkReal x2769=(r20*sj4*sj5);
IkReal x2770=((1329.0)*x2766);
IkReal x2771=((1329.0)*x2769);
IkReal x2772=((((33.0)*x2768))+(((180.0)*x2761))+(((1329.0)*x2757)));
IkReal x2773=(x2754+x2770+x2771+x2764);
j1eval[0]=((6.72)+(((0.002)*(IKabs(((420.0)+(((-11.0)*x2768))+(((-60.0)*x2761))+(((60.0)*x2762))+(((-443.0)*x2757))+(((2000.0)*pz))+(((443.0)*x2766))+(((443.0)*x2769)))))))+(((0.002)*(IKabs(((420.0)+x2773+(((-1.0)*x2772)))))))+(((2.0)*(IKabs(((((12.0)*x2760))+(((0.066)*x2765))+(((0.066)*x2767))+(((-0.36)*x2766))+(((-0.36)*x2769))+(((0.36)*x2757))+(((-2.658)*x2761))+((x2755*x2756))+((x2755*x2759))+(((2.658)*x2762))+(((12.0)*x2758)))))))+(IKabs(((((-0.886)*x2761))+((x2759*x2763))+((x2756*x2763))+(((-0.12)*x2766))+(((-0.12)*x2769))+(((0.886)*x2762))+(((0.022)*x2765))+(((0.022)*x2767))+(((4.0)*x2760))+(((0.12)*x2757))+(((4.0)*x2758)))))+(((0.002)*(IKabs(((-420.0)+x2773+(((-1.0)*x2772))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(cj4,-1);
if(!x2804.valid){
continue;
}
IkReal x2775=x2804.value;
IkReal x2776=((420.0)*cj4);
IkReal x2777=cj4*cj4;
IkReal x2778=(cj4*r21);
IkReal x2779=(cj5*sj4);
IkReal x2780=(cj4*pz);
IkReal x2781=((0.002)*x2775);
IkReal x2782=(r22*sj4);
IkReal x2783=(cj4*r20);
IkReal x2784=(sj4*sj5);
IkReal x2785=((6000.0)*x2780);
IkReal x2786=((33.0)*x2782);
IkReal x2787=((2000.0)*x2780);
IkReal x2788=((11.0)*x2782);
IkReal x2789=(r22*x2777);
IkReal x2790=((180.0)*sj5*x2778);
IkReal x2791=((180.0)*cj5*x2783);
IkReal x2792=((1329.0)*x2789);
IkReal x2793=((60.0)*sj5*x2778);
IkReal x2794=((443.0)*x2789);
IkReal x2795=((60.0)*cj5*x2783);
IkReal x2796=((1329.0)*x2778*x2779);
IkReal x2797=((1329.0)*x2783*x2784);
IkReal x2798=((443.0)*x2778*x2779);
IkReal x2799=((443.0)*x2783*x2784);
IkReal x2800=(x2794+x2795+x2788);
IkReal x2801=(x2792+x2791+x2786);
IkReal x2802=(x2798+x2799+x2793+x2787);
IkReal x2803=(x2790+x2796+x2797+x2785);
op[0]=(x2781*((x2776+(((-1.0)*x2800))+x2802)));
op[1]=0;
op[2]=(x2781*((x2776+(((-1.0)*x2801))+x2803)));
op[3]=0;
op[4]=(x2781*(((((-1.0)*x2801))+(((-1.0)*x2776))+x2803)));
op[5]=0;
op[6]=(x2781*(((((-1.0)*x2800))+(((-1.0)*x2776))+x2802)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2805=((0.066)*sj5);
IkReal x2806=(cj0*r00);
IkReal x2807=(r10*sj0);
IkReal x2808=(cj0*px);
IkReal x2809=((0.022)*sj5);
IkReal x2810=(py*sj0);
IkReal x2811=(cj5*r20);
IkReal x2812=(cj4*r22);
IkReal x2813=(r21*sj5);
IkReal x2814=((4.0)*x2808);
IkReal x2815=((0.12)*x2812);
IkReal x2816=((0.886)*x2813);
IkReal x2817=((4.0)*x2810);
IkReal x2818=(cj0*cj5*r01);
IkReal x2819=(cj5*r21*sj4);
IkReal x2820=(r20*sj4*sj5);
IkReal x2821=(cj5*r11*sj0);
IkReal x2822=(x2806*x2809);
IkReal x2823=((0.022)*x2821);
IkReal x2824=((0.022)*x2818);
IkReal x2825=(x2807*x2809);
IkReal x2826=((((0.12)*x2820))+(((0.12)*x2819))+(((0.886)*x2811)));
IkReal x2827=(x2815+x2814+x2817+x2816+x2824+x2825+x2822+x2823);
IkReal x2828=((((-0.36)*x2820))+((x2805*x2807))+((x2805*x2806))+(((-2.658)*x2811))+(((12.0)*x2808))+(((0.066)*x2821))+(((0.066)*x2818))+(((12.0)*x2810))+(((0.36)*x2812))+(((2.658)*x2813))+(((-0.36)*x2819)));
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2826))+x2827))))+(((1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((1.68)*htj1))+(((3.36)*(htj1*htj1*htj1)))+((x2828*(htj1*htj1*htj1*htj1)))+((x2828*(htj1*htj1)))+(((-1.0)*x2826))+x2827);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2829=(cj4*r22);
IkReal x2830=(cj1*cj5);
IkReal x2831=(cj5*sj1);
IkReal x2832=(r21*sj5);
IkReal x2833=((1.0)*r21*sj4);
IkReal x2834=((1.0)*r20*sj4*sj5);
if( IKabs((((sj1*x2832))+(((-1.0)*cj1*x2834))+((cj1*x2829))+(((-1.0)*r20*x2831))+(((-1.0)*x2830*x2833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2834))+(((-1.0)*cj1*x2832))+((r20*x2830))+((sj1*x2829))+(((-1.0)*x2831*x2833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2832))+(((-1.0)*cj1*x2834))+((cj1*x2829))+(((-1.0)*r20*x2831))+(((-1.0)*x2830*x2833))))+IKsqr(((((-1.0)*sj1*x2834))+(((-1.0)*cj1*x2832))+((r20*x2830))+((sj1*x2829))+(((-1.0)*x2831*x2833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2832))+(((-1.0)*cj1*x2834))+((cj1*x2829))+(((-1.0)*r20*x2831))+(((-1.0)*x2830*x2833))), ((((-1.0)*sj1*x2834))+(((-1.0)*cj1*x2832))+((r20*x2830))+((sj1*x2829))+(((-1.0)*x2831*x2833))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2835=IKcos(j2);
IkReal x2836=IKsin(j2);
IkReal x2837=((0.2215)*sj1);
IkReal x2838=((0.0055)*sj5);
IkReal x2839=(r10*sj0);
IkReal x2840=(cj5*sj4);
IkReal x2841=(cj0*r00);
IkReal x2842=((1.0)*cj4);
IkReal x2843=(cj0*r01);
IkReal x2844=((1.0)*sj0);
IkReal x2845=(sj4*sj5);
IkReal x2846=((0.0055)*cj5);
IkReal x2847=(r11*sj0);
IkReal x2848=((1.0)*sj5);
IkReal x2849=(sj1*x2835);
IkReal x2850=(cj1*x2836);
IkReal x2851=(cj1*x2835);
IkReal x2852=(sj1*x2836);
IkReal x2853=(x2849+x2850);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x2848))+(((-1.0)*x2851))+x2852);
evalcond[1]=(((r21*x2840))+((r20*x2845))+(((-1.0)*r22*x2842))+x2853);
evalcond[2]=((((-1.0)*x2843*x2848))+((cj5*x2839))+((cj5*x2841))+x2853+(((-1.0)*r11*sj5*x2844)));
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(cj4,-1);
if(!x2854.valid){
continue;
}
evalcond[3]=((((0.2215)*x2850))+(((0.03)*x2851))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x2854.value)))+(((-1.0)*pz))+(((-0.03)*x2852))+((x2835*x2837)));
evalcond[4]=((((-1.0)*r12*sj0*x2842))+((x2840*x2843))+((x2840*x2847))+(((-1.0)*cj0*r02*x2842))+(((-1.0)*x2852))+x2851+((x2841*x2845))+((x2839*x2845)));
evalcond[5]=((((-1.0)*x2846*x2847))+(((-1.0)*x2843*x2846))+(((0.2215)*x2851))+(((-0.03)*x2849))+(((-1.0)*x2836*x2837))+(((-1.0)*py*x2844))+(((-0.03)*x2850))+(((-1.0)*x2838*x2839))+(((-1.0)*x2838*x2841))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2855=((1.0)*cj5);
IkReal x2856=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j0eval[0]=x2856;
j0eval[1]=IKsign(x2856);
j0eval[2]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2855)))))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2855))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2857=((1.0)*sj4);
IkReal x2858=(((r21*sj5))+(((-1.0)*cj5*r20)));
j0eval[0]=x2858;
j0eval[1]=((IKabs(((((-1.0)*cj5*r01*x2857))+(((-1.0)*r00*sj5*x2857))+((cj4*r02)))))+(IKabs(((((-1.0)*r10*sj5*x2857))+(((-1.0)*cj5*r11*x2857))+((cj4*r12))))));
j0eval[2]=IKsign(x2858);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2859=((0.0055)*cj5);
IkReal x2860=(r20*sj4);
IkReal x2861=((0.0055)*sj5);
IkReal x2862=(rxp2_2*sj4);
IkReal x2863=(r21*sj4);
IkReal x2864=(cj4*rxp0_2*sj5);
IkReal x2865=(cj4*cj5*rxp1_2);
j0eval[0]=(((cj5*x2860))+(((-181.818181818182)*x2862))+(((-181.818181818182)*x2865))+(((-181.818181818182)*x2864))+(((-1.0)*sj5*x2863)));
j0eval[1]=((IKabs((((r11*x2859))+((r10*x2861))+py)))+(IKabs((((r00*x2861))+px+((r01*x2859))))));
j0eval[2]=IKsign(((((-1.0)*x2861*x2863))+(((-1.0)*x2864))+(((-1.0)*x2865))+(((-1.0)*x2862))+((x2859*x2860))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2867 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2867)==0){
continue;
}
IkReal x2866=pow(x2867,-0.5);
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
IkReal gconst184=((-1.0)*(x2868.value));
IkReal gconst185=(r20*x2866);
IkReal gconst186=(r21*x2866);
CheckValue<IkReal> x2869 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x2869.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2869.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
IkReal x2870=((-1.0)*(x2872.value));
IkReal x2871=x2866;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2870;
IkReal gconst184=x2870;
IkReal gconst185=(r20*x2871);
IkReal gconst186=(r21*x2871);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2875 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x2875.valid){
continue;
}
IkReal x2873=((-1.0)*(x2875.value));
IkReal x2874=x2866;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2873;
IkReal gconst184=x2873;
IkReal gconst185=(r20*x2874);
IkReal gconst186=(r21*x2874);
IkReal x2876=(rxp2_2*sj4);
IkReal x2877=x2866;
IkReal x2878=(cj4*r20*rxp0_2*x2877);
IkReal x2879=(cj4*r21*rxp1_2*x2877);
j0eval[0]=((((-181.818181818182)*x2876))+(((-181.818181818182)*x2878))+(((-181.818181818182)*x2879)));
j0eval[1]=IKsign(((((-1.0)*x2879))+(((-1.0)*x2878))+(((-1.0)*x2876))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2882 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x2882.valid){
continue;
}
IkReal x2880=((-1.0)*(x2882.value));
IkReal x2881=x2866;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2880;
IkReal gconst184=x2880;
IkReal gconst185=(r20*x2881);
IkReal gconst186=(r21*x2881);
IkReal x2883=cj4*cj4;
IkReal x2884=r22*r22;
IkReal x2885=r21*r21;
IkReal x2886=r20*r20;
IkReal x2887=((1.0)*x2884);
IkReal x2888=((1.0)+(((-1.0)*x2887)));
IkReal x2889=((1.0)*x2883);
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(x2888,-1);
if(!x2897.valid){
continue;
}
IkReal x2890=x2897.value;
IkReal x2891=(x2883*x2890);
IkReal x2898 = x2888;
if(IKabs(x2898)==0){
continue;
}
IkReal x2892=pow(x2898,-0.5);
IkReal x2893=(x2885*x2891);
IkReal x2894=(x2886*x2891);
IkReal x2895=((2.0)*cj4*r22*sj4*x2892);
IkReal x2896=((1.0)+(((-1.0)*x2885*x2895))+(((-2.0)*x2886*x2893))+(((-1.0)*x2889))+(((-1.0)*x2887))+(((-1.0)*x2886*x2895))+(((-1.0)*x2889*x2890*(x2885*x2885)))+x2894+x2893+(((-1.0)*x2889*x2890*(x2886*x2886)))+((x2883*x2884)));
j0eval[0]=x2896;
j0eval[1]=IKsign(x2896);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2899=cj4*cj4;
IkReal x2900=gconst185*gconst185;
IkReal x2901=gconst186*gconst186;
IkReal x2902=((1.0)*cj4);
IkReal x2903=(gconst186*r21);
IkReal x2904=((1.0)*x2899);
IkReal x2905=((2.0)*gconst185*r20);
IkReal x2906=(cj4*r22*sj4);
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(((((-1.0)*gconst185*r00*x2902))+(((-1.0)*gconst186*r01*x2902))+(((-1.0)*r02*sj4)))),IkReal((((r12*sj4))+((cj4*gconst185*r10))+((cj4*gconst186*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
CheckValue<IkReal> x2908=IKPowWithIntegerCheck(IKsign(((1.0)+((x2899*x2901))+((x2899*x2900))+(((-1.0)*x2905*x2906))+(((-2.0)*x2903*x2906))+(((-1.0)*x2901*x2904*(r21*r21)))+(((r22*r22)*(((-1.0)+x2899))))+(((-1.0)*x2904))+(((-1.0)*x2900*x2904*(r20*r20)))+(((-1.0)*x2899*x2903*x2905)))),-1);
if(!x2908.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2907.value)+(((1.5707963267949)*(x2908.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2909=IKcos(j0);
IkReal x2910=IKsin(j0);
IkReal x2911=(gconst186*r11);
IkReal x2912=((1.0)*cj4);
IkReal x2913=(r12*sj4);
IkReal x2914=(r02*sj4);
IkReal x2915=(gconst185*r10);
IkReal x2916=(gconst186*x2910);
IkReal x2917=((0.0055)*x2909);
IkReal x2918=((1.0)*x2910);
IkReal x2919=((1.0)*x2909);
IkReal x2920=(cj4*x2909);
IkReal x2921=(gconst185*x2909);
IkReal x2922=(gconst185*r00*x2910);
evalcond[0]=(((r00*x2916))+(((-1.0)*gconst186*r10*x2919))+((r11*x2921))+(((-1.0)*gconst185*r01*x2918)));
evalcond[1]=((((-0.0055)*r01*x2916))+(((-0.0055)*x2922))+(((-1.0)*px*x2918))+((py*x2909))+((x2915*x2917))+((x2911*x2917)));
evalcond[2]=((((-1.0)*r02*x2910*x2912))+(((-1.0)*sj4*x2915*x2919))+(((-1.0)*sj4*x2911*x2919))+((r01*sj4*x2916))+((sj4*x2922))+((r12*x2920)));
evalcond[3]=((-1.0)+((x2915*x2920))+((x2909*x2913))+(((-1.0)*r01*x2912*x2916))+(((-1.0)*x2914*x2918))+(((-1.0)*x2912*x2922))+((x2911*x2920)));
evalcond[4]=((((-1.0)*x2910*x2911*x2912))+(((-1.0)*x2913*x2918))+(((-1.0)*x2914*x2919))+(((-1.0)*x2910*x2912*x2915))+(((-1.0)*gconst186*r01*x2909*x2912))+(((-1.0)*r00*x2912*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2923=(gconst186*r20);
IkReal x2924=((1.0)*gconst185*r21);
IkReal x2925=((1.0)+(((-1.0)*x2924))+x2923);
IkReal x2926=((-1.0)+(((-1.0)*x2924))+x2923);
CheckValue<IkReal> x2930 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x2930.valid){
continue;
}
IkReal x2927=((-1.0)*(x2930.value));
IkReal x2928=x2866;
IkReal x2929=(((gconst185*r20*sj4))+((gconst186*r21*sj4))+(((-1.0)*cj4*r22)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2927;
IkReal gconst184=x2927;
IkReal gconst185=(r20*x2928);
IkReal gconst186=(r21*x2928);
IkReal gconst190=x2925;
IkReal gconst191=x2926;
IkReal gconst192=x2929;
IkReal gconst193=x2929;
IkReal gconst194=x2925;
IkReal gconst195=x2926;
IkReal gconst196=x2929;
IkReal gconst197=x2929;
IkReal gconst198=x2926;
IkReal gconst199=x2925;
IkReal gconst200=x2929;
IkReal gconst201=x2929;
IkReal gconst202=x2926;
IkReal gconst203=x2925;
IkReal gconst204=x2929;
IkReal gconst205=x2929;
IkReal x2931=gconst186*gconst186;
IkReal x2932=r21*r21;
IkReal x2933=gconst185*gconst185;
IkReal x2934=r20*r20;
IkReal x2935=sj4*sj4;
IkReal x2936=cj4*cj4;
IkReal x2937=r22*r22;
IkReal x2938=(gconst186*r21);
IkReal x2939=(gconst185*r20);
IkReal x2940=(cj4*r22*sj4);
IkReal x2941=(x2938*x2939);
IkReal x2942=(x2932*x2933);
IkReal x2943=(x2931*x2934);
IkReal x2944=(x2936*x2937);
IkReal x2945=(x2933*x2934*x2935);
IkReal x2946=(x2931*x2932*x2935);
j1eval[0]=((IKabs(((16.0)+(((-16.0)*x2944))+(((-16.0)*x2942))+(((-16.0)*x2943))+(((-16.0)*x2945))+(((-16.0)*x2946))+(((32.0)*x2938*x2940))+(((32.0)*x2939*x2940))+(((-32.0)*x2935*x2941))+(((32.0)*x2941)))))+(((0.5)*(IKabs(((4.0)+(((-8.0)*x2935*x2941))+(((8.0)*x2939*x2940))+(((8.0)*x2938*x2940))+(((-4.0)*x2946))+(((-4.0)*x2945))+(((-4.0)*x2944))+(((-4.0)*x2943))+(((-4.0)*x2942))+(((8.0)*x2941)))))))+(((0.5)*(IKabs(((24.0)+(((-48.0)*x2935*x2941))+(((48.0)*x2938*x2940))+(((48.0)*x2941))+(((-24.0)*x2945))+(((-24.0)*x2946))+(((-24.0)*x2944))+(((-24.0)*x2942))+(((-24.0)*x2943))+(((48.0)*x2939*x2940))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x2947=((16.0)*gconst202);
IkReal x2948=((16.0)*gconst199);
IkReal x2949=((16.0)*gconst194);
IkReal x2950=((16.0)*gconst191);
IkReal x2951=(gconst195*gconst196);
IkReal x2952=(gconst191*gconst192);
IkReal x2953=(gconst194*gconst197);
IkReal x2954=(gconst199*gconst200);
IkReal x2955=(gconst190*gconst193);
IkReal x2956=(gconst198*gconst201);
IkReal x2957=(gconst191*gconst203);
IkReal x2958=((2.0)*gconst198);
IkReal x2959=(gconst203*gconst204);
IkReal x2960=((2.0)*gconst195);
IkReal x2961=(gconst202*gconst205);
IkReal x2962=(gconst192*gconst199);
IkReal x2963=(gconst191*gconst200);
IkReal x2964=(gconst197*gconst202);
IkReal x2965=((2.0)*gconst194);
IkReal x2966=(gconst190*gconst201);
IkReal x2967=((2.0)*gconst202);
IkReal x2968=(gconst193*gconst202);
IkReal x2969=((4.0)*gconst199);
IkReal x2970=(gconst193*gconst198);
IkReal x2971=(gconst194*gconst205);
IkReal x2972=((8.0)*gconst201);
IkReal x2973=((2.0)*gconst190);
IkReal x2974=((2.0)*gconst191);
IkReal x2975=(gconst193*gconst194);
IkReal x2976=((8.0)*gconst191);
IkReal x2977=((1.0)*gconst204);
IkReal x2978=((2.0)*gconst203);
IkReal x2979=((2.0)*gconst199);
IkReal x2980=((4.0)*gconst202);
IkReal x2981=(gconst196*gconst199);
IkReal x2982=(gconst196*gconst203);
IkReal x2983=(gconst195*gconst204);
IkReal x2984=((16.0)*gconst193);
IkReal x2985=((4.0)*gconst195);
IkReal x2986=((16.0)*gconst201);
IkReal x2987=((4.0)*gconst194);
IkReal x2988=((4.0)*gconst203);
IkReal x2989=(gconst199*gconst204);
IkReal x2990=(gconst202*x2969);
IkReal x2991=((8.0)*x2989);
IkReal x2992=(gconst202*x2972);
IkReal x2993=(gconst194*x2969);
IkReal x2994=(gconst191*x2980);
IkReal x2995=(gconst194*x2972);
IkReal x2996=(gconst204*x2976);
IkReal x2997=((8.0)*x2968);
IkReal x2998=((8.0)*x2981);
IkReal x2999=(gconst191*x2987);
IkReal x3000=((8.0)*x2975);
IkReal x3001=(gconst196*x2976);
IkReal x3002=(gconst190*x2982);
IkReal x3003=(x2990+x2948);
IkReal x3004=(x2999+x2949);
IkReal x3005=(x3001+x3000);
IkReal x3006=(x2993+x2994);
IkReal x3007=(x2991+x2992);
IkReal x3008=(x2998+x2995+x2996+x2997);
op[0]=((((-1.0)*x2990))+((x2954*x2961))+(((-1.0)*x2956*x2961))+((x2956*x2959))+(((-1.0)*x2954*x2959)));
op[1]=(((x2956*x2967))+x3007+(((-1.0)*x2954*x2967))+(((-1.0)*x2958*x2959))+((x2956*x2978))+(((-1.0)*x2954*x2978))+((x2961*x2979))+(((-1.0)*x2959*x2979))+((x2958*x2961)));
op[2]=((((-1.0)*gconst195*x2954*x2977))+x3003+((x2954*x2971))+((x2954*x2964))+((x2961*x2962))+((x2961*x2963))+(((-1.0)*x3006))+(((-1.0)*x2961*x2966))+((x2959*x2966))+(((-1.0)*x2947))+(((-1.0)*gconst198*x2988))+(((-1.0)*gconst198*x2980))+(((-1.0)*x2959*x2962))+(((-1.0)*x2961*x2970))+(((-1.0)*gconst200*x2957*x2977))+(((-1.0)*x2956*x2964))+((x2959*x2970))+((x2956*x2982))+((x2956*x2983))+(((-1.0)*gconst204*x2986))+(((-1.0)*x2956*x2971))+(((-1.0)*x2954*x2982))+(((-1.0)*gconst203*x2969)));
op[3]=(((x2964*x2979))+(((-1.0)*x2963*x2967))+(((-1.0)*x2978*x2981))+((gconst199*gconst205*x2965))+((x2956*x2965))+((x2956*x2960))+(((-2.0)*gconst200*x2957))+x3008+(((-1.0)*x2954*x2960))+(((-1.0)*x2954*x2965))+(((32.0)*gconst204))+(((-1.0)*x2958*x2982))+(((-1.0)*x2958*x2983))+(((-1.0)*x2962*x2978))+((x2966*x2967))+(((-1.0)*x3007))+((x2958*x2971))+(((-1.0)*x2960*x2989))+(((-32.0)*gconst201))+(((-1.0)*x2962*x2967))+((x2966*x2978))+((x2961*x2973))+((x2961*x2974))+(((-1.0)*x2959*x2973))+((gconst193*gconst203*x2958))+((x2958*x2964))+((x2958*x2968))+(((-2.0)*gconst204*x2957)));
op[4]=((64.0)+(((-1.0)*gconst195*x2962*x2977))+(((-1.0)*x2964*x2966))+((x2951*x2956))+(((-1.0)*gconst195*x2963*x2977))+x3006+((x2962*x2971))+(((-1.0)*gconst196*x2986))+((x2970*x2982))+((x2970*x2983))+(((-1.0)*x2953*x2956))+(((-1.0)*gconst190*x2980))+(((-1.0)*gconst190*x2988))+((x2966*x2982))+((x2966*x2983))+(((-1.0)*x3003))+(((-1.0)*x3004))+((x2952*x2961))+((x2962*x2964))+(((-1.0)*x2952*x2959))+(((-1.0)*x2966*x2971))+(((-1.0)*gconst196*gconst200*x2957))+((x2953*x2954))+(((-1.0)*x2970*x2971))+(((-1.0)*gconst198*x2985))+(((-1.0)*gconst198*x2987))+(((-1.0)*gconst195*x2969))+(((-4.0)*x2957))+(((-1.0)*x2951*x2954))+((x2963*x2971))+((x2963*x2964))+(((-1.0)*gconst204*x2984))+x2950+x2947+(((-1.0)*x2964*x2970))+(((-1.0)*x2962*x2982))+(((-1.0)*x2955*x2961))+((x2955*x2959)));
op[5]=(((x2964*x2974))+((x2964*x2973))+((x2965*x2966))+(((-1.0)*x2963*x2965))+(((-1.0)*x2952*x2978))+((x2955*x2978))+x3005+(((-1.0)*x2951*x2979))+(((32.0)*gconst196))+((x2955*x2967))+(((-1.0)*gconst190*gconst204*x2960))+(((-2.0)*gconst196*x2957))+(((-32.0)*gconst193))+((gconst191*gconst205*x2965))+(((-1.0)*x3008))+(((-1.0)*gconst191*gconst204*x2960))+((x2960*x2966))+((x2958*x2975))+((x2953*x2958))+(((-1.0)*x2973*x2982))+((x2953*x2979))+(((-1.0)*x2962*x2965))+(((-1.0)*x2951*x2958))+((gconst190*gconst205*x2965))+(((-1.0)*x2960*x2963))+(((-1.0)*x2960*x2962))+(((-1.0)*x2952*x2967))+((gconst193*gconst195*x2958)));
op[6]=(((x2955*x2982))+((x2955*x2983))+(((-1.0)*gconst195*x2952*x2977))+x3004+(((-1.0)*x2950))+(((-1.0)*gconst191*x2985))+(((-1.0)*gconst196*x2984))+(((-1.0)*gconst190*x2985))+(((-1.0)*gconst190*x2987))+(((-1.0)*x2952*x2982))+(((-1.0)*x3006))+((x2952*x2964))+((x2952*x2971))+(((-1.0)*x2953*x2966))+((x2951*x2966))+(((-1.0)*x2955*x2971))+((x2953*x2963))+((x2953*x2962))+(((-1.0)*x2953*x2970))+(((-1.0)*x2951*x2962))+(((-1.0)*x2951*x2963))+((x2951*x2970))+(((-1.0)*x2955*x2964)));
op[7]=((((-1.0)*x2951*x2973))+(((-1.0)*x2951*x2974))+((x2955*x2965))+((x2955*x2960))+(((-1.0)*x3005))+((x2953*x2973))+((x2953*x2974))+(((-1.0)*x2952*x2965))+(((-1.0)*x2952*x2960)));
op[8]=((((-1.0)*x2999))+((x2951*x2955))+(((-1.0)*x2953*x2955))+((x2952*x2953))+(((-1.0)*x2951*x2952)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3009=((1.0)*r21);
IkReal x3010=(gconst185*sj1);
IkReal x3011=(cj4*r22);
IkReal x3012=(cj1*gconst186);
IkReal x3013=((1.0)*r20);
IkReal x3014=(cj1*gconst185);
IkReal x3015=(gconst186*sj1);
if( IKabs(((((-1.0)*sj4*x3009*x3012))+((r20*x3015))+((cj1*x3011))+(((-1.0)*sj4*x3013*x3014))+(((-1.0)*x3009*x3010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x3010*x3013))+(((-1.0)*sj4*x3009*x3015))+((sj1*x3011))+((r21*x3014))+(((-1.0)*x3012*x3013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x3009*x3012))+((r20*x3015))+((cj1*x3011))+(((-1.0)*sj4*x3013*x3014))+(((-1.0)*x3009*x3010))))+IKsqr(((((-1.0)*sj4*x3010*x3013))+(((-1.0)*sj4*x3009*x3015))+((sj1*x3011))+((r21*x3014))+(((-1.0)*x3012*x3013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x3009*x3012))+((r20*x3015))+((cj1*x3011))+(((-1.0)*sj4*x3013*x3014))+(((-1.0)*x3009*x3010))), ((((-1.0)*sj4*x3010*x3013))+(((-1.0)*sj4*x3009*x3015))+((sj1*x3011))+((r21*x3014))+(((-1.0)*x3012*x3013))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3016=IKcos(j2);
IkReal x3017=IKsin(j2);
IkReal x3018=((0.03)*sj1);
IkReal x3019=(gconst185*sj0);
IkReal x3020=(gconst186*sj4);
IkReal x3021=(r11*sj0);
IkReal x3022=(cj0*r00);
IkReal x3023=((1.0)*cj0);
IkReal x3024=((1.0)*sj1);
IkReal x3025=((1.0)*cj4);
IkReal x3026=(gconst185*sj4);
IkReal x3027=(cj0*r01);
IkReal x3028=((0.0055)*gconst186);
IkReal x3029=(cj1*x3016);
IkReal x3030=(cj1*x3017);
IkReal x3031=(sj1*x3016);
IkReal x3032=(x3017*x3024);
evalcond[0]=(((gconst186*r20))+x3029+(((-1.0)*x3032))+(((-1.0)*gconst185*r21)));
evalcond[1]=(x3030+x3031+((r20*x3026))+((r21*x3020))+(((-1.0)*r22*x3025)));
evalcond[2]=((((-1.0)*gconst185*r01*x3023))+(((-1.0)*r11*x3019))+(((-1.0)*x3030))+(((-1.0)*x3016*x3024))+((gconst186*x3022))+((gconst186*r10*sj0)));
CheckValue<IkReal> x3033=IKPowWithIntegerCheck(cj4,-1);
if(!x3033.valid){
continue;
}
evalcond[3]=((((0.03)*x3029))+(((0.21)*cj1))+(((0.2215)*x3030))+(((0.2215)*x3031))+(((0.0055)*r22*sj4*(x3033.value)))+(((-1.0)*pz))+(((-1.0)*x3017*x3018)));
evalcond[4]=(x3029+((x3020*x3027))+((x3020*x3021))+(((-1.0)*x3032))+((r10*sj4*x3019))+(((-1.0)*r12*sj0*x3025))+((x3022*x3026))+(((-1.0)*cj4*r02*x3023)));
evalcond[5]=((((-1.0)*px*x3023))+(((-1.0)*x3027*x3028))+(((-0.2215)*sj1*x3017))+(((-0.03)*x3030))+(((-1.0)*x3021*x3028))+(((-1.0)*py*sj0))+(((-0.0055)*r10*x3019))+(((-0.21)*sj1))+(((0.2215)*x3029))+(((-0.0055)*gconst185*x3022))+(((-1.0)*x3016*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3034=((0.0055)*gconst186);
IkReal x3035=((0.0055)*gconst185);
IkReal x3036=((1.0)*cj4);
CheckValue<IkReal> x3037=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst186*rxp1_2*x3036))+(((-1.0)*gconst185*rxp0_2*x3036))+(((-1.0)*r21*sj4*x3035))+(((-1.0)*rxp2_2*sj4))+((r20*sj4*x3034)))),-1);
if(!x3037.valid){
continue;
}
CheckValue<IkReal> x3038 = IKatan2WithCheck(IkReal((((r11*x3034))+py+((r10*x3035)))),IkReal((((r01*x3034))+((r00*x3035))+px)),IKFAST_ATAN2_MAGTHRESH);
if(!x3038.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3037.value)))+(x3038.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3039=IKcos(j0);
IkReal x3040=IKsin(j0);
IkReal x3041=(gconst186*r11);
IkReal x3042=((1.0)*cj4);
IkReal x3043=(r12*sj4);
IkReal x3044=(r02*sj4);
IkReal x3045=(gconst185*r10);
IkReal x3046=(gconst186*x3040);
IkReal x3047=((0.0055)*x3039);
IkReal x3048=((1.0)*x3040);
IkReal x3049=((1.0)*x3039);
IkReal x3050=(cj4*x3039);
IkReal x3051=(gconst185*x3039);
IkReal x3052=(gconst185*r00*x3040);
evalcond[0]=((((-1.0)*gconst185*r01*x3048))+((r11*x3051))+(((-1.0)*gconst186*r10*x3049))+((r00*x3046)));
evalcond[1]=((((-0.0055)*x3052))+((py*x3039))+(((-1.0)*px*x3048))+(((-0.0055)*r01*x3046))+((x3045*x3047))+((x3041*x3047)));
evalcond[2]=((((-1.0)*sj4*x3045*x3049))+((sj4*x3052))+(((-1.0)*sj4*x3041*x3049))+((r12*x3050))+((r01*sj4*x3046))+(((-1.0)*r02*x3040*x3042)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3042*x3046))+((x3045*x3050))+((x3039*x3043))+((x3041*x3050))+(((-1.0)*x3042*x3052))+(((-1.0)*x3044*x3048)));
evalcond[4]=((((-1.0)*r00*x3042*x3051))+(((-1.0)*x3044*x3049))+(((-1.0)*x3040*x3041*x3042))+(((-1.0)*gconst186*r01*x3039*x3042))+(((-1.0)*x3043*x3048))+(((-1.0)*x3040*x3042*x3045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3053=(gconst186*r20);
IkReal x3054=((1.0)*gconst185*r21);
IkReal x3055=((1.0)+x3053+(((-1.0)*x3054)));
IkReal x3056=((-1.0)+x3053+(((-1.0)*x3054)));
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
IkReal x3057=((-1.0)*(x3060.value));
IkReal x3058=x2866;
IkReal x3059=(((gconst185*r20*sj4))+((gconst186*r21*sj4))+(((-1.0)*cj4*r22)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x3057;
IkReal gconst184=x3057;
IkReal gconst185=(r20*x3058);
IkReal gconst186=(r21*x3058);
IkReal gconst190=x3055;
IkReal gconst191=x3056;
IkReal gconst192=x3059;
IkReal gconst193=x3059;
IkReal gconst194=x3055;
IkReal gconst195=x3056;
IkReal gconst196=x3059;
IkReal gconst197=x3059;
IkReal gconst198=x3056;
IkReal gconst199=x3055;
IkReal gconst200=x3059;
IkReal gconst201=x3059;
IkReal gconst202=x3056;
IkReal gconst203=x3055;
IkReal gconst204=x3059;
IkReal gconst205=x3059;
IkReal x3061=gconst186*gconst186;
IkReal x3062=r21*r21;
IkReal x3063=gconst185*gconst185;
IkReal x3064=r20*r20;
IkReal x3065=sj4*sj4;
IkReal x3066=cj4*cj4;
IkReal x3067=r22*r22;
IkReal x3068=(gconst186*r21);
IkReal x3069=(gconst185*r20);
IkReal x3070=(cj4*r22*sj4);
IkReal x3071=(x3068*x3069);
IkReal x3072=(x3062*x3063);
IkReal x3073=(x3061*x3064);
IkReal x3074=(x3066*x3067);
IkReal x3075=(x3063*x3064*x3065);
IkReal x3076=(x3061*x3062*x3065);
j1eval[0]=((IKabs(((16.0)+(((32.0)*x3071))+(((-16.0)*x3076))+(((-16.0)*x3075))+(((-16.0)*x3072))+(((-16.0)*x3074))+(((-16.0)*x3073))+(((32.0)*x3069*x3070))+(((-32.0)*x3065*x3071))+(((32.0)*x3068*x3070)))))+(((0.5)*(IKabs(((4.0)+(((8.0)*x3071))+(((-8.0)*x3065*x3071))+(((8.0)*x3069*x3070))+(((-4.0)*x3072))+(((-4.0)*x3073))+(((-4.0)*x3074))+(((-4.0)*x3075))+(((-4.0)*x3076))+(((8.0)*x3068*x3070)))))))+(((0.5)*(IKabs(((24.0)+(((-48.0)*x3065*x3071))+(((48.0)*x3068*x3070))+(((48.0)*x3069*x3070))+(((-24.0)*x3072))+(((-24.0)*x3074))+(((-24.0)*x3073))+(((-24.0)*x3076))+(((-24.0)*x3075))+(((48.0)*x3071))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3077=((16.0)*gconst202);
IkReal x3078=((16.0)*gconst199);
IkReal x3079=((16.0)*gconst194);
IkReal x3080=((16.0)*gconst191);
IkReal x3081=(gconst195*gconst196);
IkReal x3082=(gconst191*gconst192);
IkReal x3083=(gconst194*gconst197);
IkReal x3084=(gconst199*gconst200);
IkReal x3085=(gconst190*gconst193);
IkReal x3086=(gconst198*gconst201);
IkReal x3087=(gconst191*gconst203);
IkReal x3088=((2.0)*gconst198);
IkReal x3089=(gconst203*gconst204);
IkReal x3090=((2.0)*gconst195);
IkReal x3091=(gconst202*gconst205);
IkReal x3092=(gconst192*gconst199);
IkReal x3093=(gconst191*gconst200);
IkReal x3094=(gconst197*gconst202);
IkReal x3095=((2.0)*gconst194);
IkReal x3096=(gconst190*gconst201);
IkReal x3097=((2.0)*gconst202);
IkReal x3098=(gconst193*gconst202);
IkReal x3099=((4.0)*gconst199);
IkReal x3100=(gconst193*gconst198);
IkReal x3101=(gconst194*gconst205);
IkReal x3102=((8.0)*gconst201);
IkReal x3103=((2.0)*gconst190);
IkReal x3104=((2.0)*gconst191);
IkReal x3105=(gconst193*gconst194);
IkReal x3106=((8.0)*gconst191);
IkReal x3107=((1.0)*gconst204);
IkReal x3108=((2.0)*gconst203);
IkReal x3109=((2.0)*gconst199);
IkReal x3110=((4.0)*gconst202);
IkReal x3111=(gconst196*gconst199);
IkReal x3112=(gconst196*gconst203);
IkReal x3113=(gconst195*gconst204);
IkReal x3114=((16.0)*gconst193);
IkReal x3115=((4.0)*gconst195);
IkReal x3116=((16.0)*gconst201);
IkReal x3117=((4.0)*gconst194);
IkReal x3118=((4.0)*gconst203);
IkReal x3119=(gconst199*gconst204);
IkReal x3120=(gconst202*x3099);
IkReal x3121=((8.0)*x3119);
IkReal x3122=(gconst202*x3102);
IkReal x3123=(gconst194*x3099);
IkReal x3124=(gconst191*x3110);
IkReal x3125=(gconst194*x3102);
IkReal x3126=(gconst204*x3106);
IkReal x3127=((8.0)*x3098);
IkReal x3128=((8.0)*x3111);
IkReal x3129=(gconst191*x3117);
IkReal x3130=((8.0)*x3105);
IkReal x3131=(gconst196*x3106);
IkReal x3132=(gconst190*x3112);
IkReal x3133=(x3120+x3078);
IkReal x3134=(x3129+x3079);
IkReal x3135=(x3131+x3130);
IkReal x3136=(x3123+x3124);
IkReal x3137=(x3122+x3121);
IkReal x3138=(x3128+x3126+x3127+x3125);
op[0]=(((x3084*x3091))+(((-1.0)*x3084*x3089))+(((-1.0)*x3086*x3091))+(((-1.0)*x3120))+((x3086*x3089)));
op[1]=(x3137+((x3086*x3108))+((x3088*x3091))+((x3086*x3097))+(((-1.0)*x3089*x3109))+((x3091*x3109))+(((-1.0)*x3084*x3108))+(((-1.0)*x3084*x3097))+(((-1.0)*x3088*x3089)));
op[2]=((((-1.0)*x3089*x3092))+x3133+(((-1.0)*x3091*x3096))+((x3086*x3113))+((x3086*x3112))+(((-1.0)*x3084*x3112))+((x3084*x3101))+(((-1.0)*x3086*x3101))+((x3084*x3094))+(((-1.0)*x3077))+(((-1.0)*x3086*x3094))+((x3091*x3092))+((x3091*x3093))+(((-1.0)*x3091*x3100))+(((-1.0)*gconst204*x3116))+((x3089*x3096))+(((-1.0)*gconst195*x3084*x3107))+((x3089*x3100))+(((-1.0)*gconst198*x3118))+(((-1.0)*gconst198*x3110))+(((-1.0)*x3136))+(((-1.0)*gconst200*x3087*x3107))+(((-1.0)*gconst203*x3099)));
op[3]=((((-2.0)*gconst200*x3087))+(((-1.0)*x3090*x3119))+x3138+((x3088*x3101))+((x3094*x3109))+((x3088*x3098))+((x3088*x3094))+((x3086*x3095))+((x3086*x3090))+((gconst193*gconst203*x3088))+(((32.0)*gconst204))+(((-1.0)*x3092*x3097))+(((-1.0)*x3089*x3103))+((x3096*x3108))+((x3091*x3104))+((x3091*x3103))+((x3096*x3097))+(((-1.0)*x3088*x3113))+(((-1.0)*x3088*x3112))+(((-32.0)*gconst201))+((gconst199*gconst205*x3095))+(((-1.0)*x3108*x3111))+(((-2.0)*gconst204*x3087))+(((-1.0)*x3093*x3097))+(((-1.0)*x3092*x3108))+(((-1.0)*x3137))+(((-1.0)*x3084*x3090))+(((-1.0)*x3084*x3095)));
op[4]=((64.0)+(((-1.0)*gconst196*gconst200*x3087))+(((-1.0)*x3100*x3101))+(((-4.0)*x3087))+x3136+((x3081*x3086))+x3080+x3077+((x3083*x3084))+((x3092*x3094))+((x3092*x3101))+(((-1.0)*x3085*x3091))+(((-1.0)*gconst196*x3116))+(((-1.0)*x3094*x3100))+((x3085*x3089))+(((-1.0)*gconst190*x3110))+(((-1.0)*gconst190*x3118))+((x3096*x3112))+((x3096*x3113))+((x3093*x3094))+(((-1.0)*x3092*x3112))+((x3082*x3091))+(((-1.0)*gconst204*x3114))+(((-1.0)*x3094*x3096))+(((-1.0)*x3096*x3101))+(((-1.0)*x3083*x3086))+(((-1.0)*x3082*x3089))+(((-1.0)*gconst195*x3093*x3107))+(((-1.0)*gconst198*x3117))+(((-1.0)*gconst198*x3115))+(((-1.0)*x3134))+(((-1.0)*x3133))+((x3093*x3101))+(((-1.0)*gconst195*x3099))+(((-1.0)*gconst195*x3092*x3107))+(((-1.0)*x3081*x3084))+((x3100*x3112))+((x3100*x3113)));
op[5]=(x3135+((x3088*x3105))+((x3085*x3108))+(((-1.0)*x3103*x3112))+(((-1.0)*gconst190*gconst204*x3090))+((x3094*x3103))+((x3094*x3104))+(((32.0)*gconst196))+(((-1.0)*gconst191*gconst204*x3090))+(((-1.0)*x3082*x3108))+((x3083*x3088))+(((-2.0)*gconst196*x3087))+(((-1.0)*x3082*x3097))+((gconst190*gconst205*x3095))+(((-1.0)*x3092*x3095))+(((-32.0)*gconst193))+((x3085*x3097))+((gconst193*gconst195*x3088))+((gconst191*gconst205*x3095))+(((-1.0)*x3081*x3109))+((x3090*x3096))+(((-1.0)*x3090*x3092))+(((-1.0)*x3090*x3093))+(((-1.0)*x3093*x3095))+(((-1.0)*x3138))+((x3095*x3096))+((x3083*x3109))+(((-1.0)*x3081*x3088)));
op[6]=(((x3081*x3100))+x3134+(((-1.0)*x3080))+((x3085*x3112))+((x3085*x3113))+(((-1.0)*x3082*x3112))+(((-1.0)*x3085*x3094))+(((-1.0)*gconst196*x3114))+(((-1.0)*gconst191*x3115))+(((-1.0)*x3085*x3101))+(((-1.0)*x3081*x3092))+(((-1.0)*x3081*x3093))+(((-1.0)*gconst190*x3115))+(((-1.0)*gconst190*x3117))+(((-1.0)*x3083*x3100))+((x3082*x3094))+(((-1.0)*x3083*x3096))+(((-1.0)*gconst195*x3082*x3107))+((x3083*x3092))+((x3083*x3093))+((x3082*x3101))+((x3081*x3096))+(((-1.0)*x3136)));
op[7]=((((-1.0)*x3082*x3090))+(((-1.0)*x3082*x3095))+((x3085*x3090))+((x3085*x3095))+(((-1.0)*x3081*x3103))+(((-1.0)*x3081*x3104))+(((-1.0)*x3135))+((x3083*x3104))+((x3083*x3103)));
op[8]=(((x3081*x3085))+((x3082*x3083))+(((-1.0)*x3083*x3085))+(((-1.0)*x3129))+(((-1.0)*x3081*x3082)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3139=((1.0)*r21);
IkReal x3140=(gconst185*sj1);
IkReal x3141=(cj4*r22);
IkReal x3142=(cj1*gconst186);
IkReal x3143=((1.0)*r20);
IkReal x3144=(cj1*gconst185);
IkReal x3145=(gconst186*sj1);
if( IKabs(((((-1.0)*sj4*x3143*x3144))+((r20*x3145))+(((-1.0)*x3139*x3140))+(((-1.0)*sj4*x3139*x3142))+((cj1*x3141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3142*x3143))+(((-1.0)*sj4*x3140*x3143))+((sj1*x3141))+((r21*x3144))+(((-1.0)*sj4*x3139*x3145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x3143*x3144))+((r20*x3145))+(((-1.0)*x3139*x3140))+(((-1.0)*sj4*x3139*x3142))+((cj1*x3141))))+IKsqr(((((-1.0)*x3142*x3143))+(((-1.0)*sj4*x3140*x3143))+((sj1*x3141))+((r21*x3144))+(((-1.0)*sj4*x3139*x3145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x3143*x3144))+((r20*x3145))+(((-1.0)*x3139*x3140))+(((-1.0)*sj4*x3139*x3142))+((cj1*x3141))), ((((-1.0)*x3142*x3143))+(((-1.0)*sj4*x3140*x3143))+((sj1*x3141))+((r21*x3144))+(((-1.0)*sj4*x3139*x3145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3146=IKcos(j2);
IkReal x3147=IKsin(j2);
IkReal x3148=((0.03)*sj1);
IkReal x3149=(gconst185*sj0);
IkReal x3150=(gconst186*sj4);
IkReal x3151=(r11*sj0);
IkReal x3152=(cj0*r00);
IkReal x3153=((1.0)*cj0);
IkReal x3154=((1.0)*sj1);
IkReal x3155=((1.0)*cj4);
IkReal x3156=(gconst185*sj4);
IkReal x3157=(cj0*r01);
IkReal x3158=((0.0055)*gconst186);
IkReal x3159=(cj1*x3146);
IkReal x3160=(cj1*x3147);
IkReal x3161=(sj1*x3146);
IkReal x3162=(x3147*x3154);
evalcond[0]=(x3159+((gconst186*r20))+(((-1.0)*gconst185*r21))+(((-1.0)*x3162)));
evalcond[1]=((((-1.0)*r22*x3155))+x3160+x3161+((r20*x3156))+((r21*x3150)));
evalcond[2]=((((-1.0)*x3146*x3154))+((gconst186*x3152))+(((-1.0)*x3160))+(((-1.0)*gconst185*r01*x3153))+((gconst186*r10*sj0))+(((-1.0)*r11*x3149)));
CheckValue<IkReal> x3163=IKPowWithIntegerCheck(cj4,-1);
if(!x3163.valid){
continue;
}
evalcond[3]=((((-1.0)*x3147*x3148))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x3163.value)))+(((0.03)*x3159))+(((-1.0)*pz))+(((0.2215)*x3160))+(((0.2215)*x3161)));
evalcond[4]=(x3159+((x3150*x3151))+((x3150*x3157))+(((-1.0)*r12*sj0*x3155))+((r10*sj4*x3149))+(((-1.0)*cj4*r02*x3153))+((x3152*x3156))+(((-1.0)*x3162)));
evalcond[5]=((((-1.0)*x3157*x3158))+(((-1.0)*x3146*x3148))+(((-0.0055)*r10*x3149))+(((-0.03)*x3160))+(((-0.2215)*sj1*x3147))+(((-0.0055)*gconst185*x3152))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((0.2215)*x3159))+(((-1.0)*x3151*x3158))+(((-1.0)*px*x3153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3164=((1.0)*cj4);
IkReal x3165=((1.0)*gconst186);
CheckValue<IkReal> x3166=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x3164*(gconst186*gconst186)))+(((-1.0)*x3164*(gconst185*gconst185)))))))+((gconst185*r20*sj4))+((gconst186*r21*sj4)))),-1);
if(!x3166.valid){
continue;
}
CheckValue<IkReal> x3167 = IKatan2WithCheck(IkReal((((gconst185*r11))+(((-1.0)*r10*x3165)))),IkReal((((gconst185*r01))+(((-1.0)*r00*x3165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3167.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3166.value)))+(x3167.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3168=IKcos(j0);
IkReal x3169=IKsin(j0);
IkReal x3170=(gconst186*r11);
IkReal x3171=((1.0)*cj4);
IkReal x3172=(r12*sj4);
IkReal x3173=(r02*sj4);
IkReal x3174=(gconst185*r10);
IkReal x3175=(gconst186*x3169);
IkReal x3176=((0.0055)*x3168);
IkReal x3177=((1.0)*x3169);
IkReal x3178=((1.0)*x3168);
IkReal x3179=(cj4*x3168);
IkReal x3180=(gconst185*x3168);
IkReal x3181=(gconst185*r00*x3169);
evalcond[0]=((((-1.0)*gconst186*r10*x3178))+(((-1.0)*gconst185*r01*x3177))+((r11*x3180))+((r00*x3175)));
evalcond[1]=(((x3174*x3176))+((py*x3168))+((x3170*x3176))+(((-0.0055)*r01*x3175))+(((-1.0)*px*x3177))+(((-0.0055)*x3181)));
evalcond[2]=((((-1.0)*sj4*x3170*x3178))+((sj4*x3181))+(((-1.0)*r02*x3169*x3171))+((r01*sj4*x3175))+(((-1.0)*sj4*x3174*x3178))+((r12*x3179)));
evalcond[3]=((-1.0)+((x3174*x3179))+(((-1.0)*x3171*x3181))+(((-1.0)*r01*x3171*x3175))+((x3168*x3172))+((x3170*x3179))+(((-1.0)*x3173*x3177)));
evalcond[4]=((((-1.0)*x3169*x3170*x3171))+(((-1.0)*r00*x3171*x3180))+(((-1.0)*x3169*x3171*x3174))+(((-1.0)*x3173*x3178))+(((-1.0)*x3172*x3177))+(((-1.0)*gconst186*r01*x3168*x3171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3182=(gconst186*r20);
IkReal x3183=((1.0)*gconst185*r21);
IkReal x3184=((1.0)+x3182+(((-1.0)*x3183)));
IkReal x3185=((-1.0)+x3182+(((-1.0)*x3183)));
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
IkReal x3186=((-1.0)*(x3189.value));
IkReal x3187=x2866;
IkReal x3188=(((gconst185*r20*sj4))+((gconst186*r21*sj4))+(((-1.0)*cj4*r22)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x3186;
IkReal gconst184=x3186;
IkReal gconst185=(r20*x3187);
IkReal gconst186=(r21*x3187);
IkReal gconst190=x3184;
IkReal gconst191=x3185;
IkReal gconst192=x3188;
IkReal gconst193=x3188;
IkReal gconst194=x3184;
IkReal gconst195=x3185;
IkReal gconst196=x3188;
IkReal gconst197=x3188;
IkReal gconst198=x3185;
IkReal gconst199=x3184;
IkReal gconst200=x3188;
IkReal gconst201=x3188;
IkReal gconst202=x3185;
IkReal gconst203=x3184;
IkReal gconst204=x3188;
IkReal gconst205=x3188;
IkReal x3190=gconst186*gconst186;
IkReal x3191=r21*r21;
IkReal x3192=gconst185*gconst185;
IkReal x3193=r20*r20;
IkReal x3194=sj4*sj4;
IkReal x3195=cj4*cj4;
IkReal x3196=r22*r22;
IkReal x3197=(gconst186*r21);
IkReal x3198=(gconst185*r20);
IkReal x3199=(cj4*r22*sj4);
IkReal x3200=(x3197*x3198);
IkReal x3201=(x3191*x3192);
IkReal x3202=(x3190*x3193);
IkReal x3203=(x3195*x3196);
IkReal x3204=(x3192*x3193*x3194);
IkReal x3205=(x3190*x3191*x3194);
j1eval[0]=((IKabs(((16.0)+(((-16.0)*x3201))+(((-16.0)*x3203))+(((-16.0)*x3204))+(((-16.0)*x3202))+(((-16.0)*x3205))+(((32.0)*x3198*x3199))+(((-32.0)*x3194*x3200))+(((32.0)*x3200))+(((32.0)*x3197*x3199)))))+(((0.5)*(IKabs(((24.0)+(((-48.0)*x3194*x3200))+(((48.0)*x3200))+(((48.0)*x3198*x3199))+(((48.0)*x3197*x3199))+(((-24.0)*x3201))+(((-24.0)*x3205))+(((-24.0)*x3203))+(((-24.0)*x3204))+(((-24.0)*x3202)))))))+(((0.5)*(IKabs(((4.0)+(((-8.0)*x3194*x3200))+(((8.0)*x3200))+(((-4.0)*x3205))+(((-4.0)*x3204))+(((-4.0)*x3203))+(((-4.0)*x3202))+(((-4.0)*x3201))+(((8.0)*x3198*x3199))+(((8.0)*x3197*x3199))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3206=((16.0)*gconst202);
IkReal x3207=((16.0)*gconst199);
IkReal x3208=((16.0)*gconst194);
IkReal x3209=((16.0)*gconst191);
IkReal x3210=(gconst195*gconst196);
IkReal x3211=(gconst191*gconst192);
IkReal x3212=(gconst194*gconst197);
IkReal x3213=(gconst199*gconst200);
IkReal x3214=(gconst190*gconst193);
IkReal x3215=(gconst198*gconst201);
IkReal x3216=(gconst191*gconst203);
IkReal x3217=((2.0)*gconst198);
IkReal x3218=(gconst203*gconst204);
IkReal x3219=((2.0)*gconst195);
IkReal x3220=(gconst202*gconst205);
IkReal x3221=(gconst192*gconst199);
IkReal x3222=(gconst191*gconst200);
IkReal x3223=(gconst197*gconst202);
IkReal x3224=((2.0)*gconst194);
IkReal x3225=(gconst190*gconst201);
IkReal x3226=((2.0)*gconst202);
IkReal x3227=(gconst193*gconst202);
IkReal x3228=((4.0)*gconst199);
IkReal x3229=(gconst193*gconst198);
IkReal x3230=(gconst194*gconst205);
IkReal x3231=((8.0)*gconst201);
IkReal x3232=((2.0)*gconst190);
IkReal x3233=((2.0)*gconst191);
IkReal x3234=(gconst193*gconst194);
IkReal x3235=((8.0)*gconst191);
IkReal x3236=((1.0)*gconst204);
IkReal x3237=((2.0)*gconst203);
IkReal x3238=((2.0)*gconst199);
IkReal x3239=((4.0)*gconst202);
IkReal x3240=(gconst196*gconst199);
IkReal x3241=(gconst196*gconst203);
IkReal x3242=(gconst195*gconst204);
IkReal x3243=((16.0)*gconst193);
IkReal x3244=((4.0)*gconst195);
IkReal x3245=((16.0)*gconst201);
IkReal x3246=((4.0)*gconst194);
IkReal x3247=((4.0)*gconst203);
IkReal x3248=(gconst199*gconst204);
IkReal x3249=(gconst202*x3228);
IkReal x3250=((8.0)*x3248);
IkReal x3251=(gconst202*x3231);
IkReal x3252=(gconst194*x3228);
IkReal x3253=(gconst191*x3239);
IkReal x3254=(gconst194*x3231);
IkReal x3255=(gconst204*x3235);
IkReal x3256=((8.0)*x3227);
IkReal x3257=((8.0)*x3240);
IkReal x3258=(gconst191*x3246);
IkReal x3259=((8.0)*x3234);
IkReal x3260=(gconst196*x3235);
IkReal x3261=(gconst190*x3241);
IkReal x3262=(x3249+x3207);
IkReal x3263=(x3208+x3258);
IkReal x3264=(x3260+x3259);
IkReal x3265=(x3252+x3253);
IkReal x3266=(x3250+x3251);
IkReal x3267=(x3254+x3255+x3256+x3257);
op[0]=(((x3215*x3218))+(((-1.0)*x3215*x3220))+(((-1.0)*x3213*x3218))+(((-1.0)*x3249))+((x3213*x3220)));
op[1]=(((x3220*x3238))+x3266+(((-1.0)*x3217*x3218))+((x3215*x3237))+(((-1.0)*x3213*x3226))+((x3217*x3220))+(((-1.0)*x3218*x3238))+((x3215*x3226))+(((-1.0)*x3213*x3237)));
op[2]=((((-1.0)*x3213*x3241))+(((-1.0)*gconst195*x3213*x3236))+((x3218*x3229))+((x3218*x3225))+(((-1.0)*x3215*x3223))+x3262+((x3213*x3230))+(((-1.0)*x3265))+(((-1.0)*x3215*x3230))+((x3220*x3221))+((x3220*x3222))+(((-1.0)*gconst198*x3239))+(((-1.0)*x3220*x3225))+(((-1.0)*x3220*x3229))+((x3215*x3242))+((x3215*x3241))+(((-1.0)*gconst203*x3228))+(((-1.0)*x3206))+(((-1.0)*gconst204*x3245))+(((-1.0)*x3218*x3221))+(((-1.0)*gconst200*x3216*x3236))+((x3213*x3223))+(((-1.0)*gconst198*x3247)));
op[3]=(((x3223*x3238))+((x3225*x3237))+(((-1.0)*x3219*x3248))+((x3220*x3233))+((x3220*x3232))+((x3215*x3219))+(((-1.0)*x3237*x3240))+x3267+(((32.0)*gconst204))+(((-1.0)*x3221*x3237))+(((-2.0)*gconst204*x3216))+(((-1.0)*x3266))+(((-2.0)*gconst200*x3216))+(((-1.0)*x3213*x3224))+(((-32.0)*gconst201))+((x3225*x3226))+(((-1.0)*x3217*x3241))+(((-1.0)*x3217*x3242))+((x3217*x3223))+((x3217*x3227))+(((-1.0)*x3218*x3232))+((gconst199*gconst205*x3224))+(((-1.0)*x3221*x3226))+((gconst193*gconst203*x3217))+((x3217*x3230))+(((-1.0)*x3222*x3226))+(((-1.0)*x3213*x3219))+((x3215*x3224)));
op[4]=((64.0)+((x3212*x3213))+(((-1.0)*gconst196*gconst200*x3216))+((x3222*x3223))+((x3225*x3242))+((x3225*x3241))+(((-1.0)*x3221*x3241))+(((-1.0)*gconst195*x3221*x3236))+(((-1.0)*x3223*x3229))+(((-1.0)*x3223*x3225))+(((-1.0)*gconst190*x3247))+(((-1.0)*gconst190*x3239))+(((-1.0)*gconst195*x3228))+x3265+x3206+x3209+((x3214*x3218))+(((-1.0)*x3262))+(((-1.0)*x3263))+(((-1.0)*gconst196*x3245))+(((-4.0)*x3216))+((x3211*x3220))+(((-1.0)*x3212*x3215))+((x3221*x3223))+((x3222*x3230))+((x3221*x3230))+(((-1.0)*x3229*x3230))+(((-1.0)*gconst204*x3243))+(((-1.0)*gconst195*x3222*x3236))+((x3229*x3241))+((x3229*x3242))+(((-1.0)*x3211*x3218))+(((-1.0)*x3210*x3213))+(((-1.0)*x3225*x3230))+(((-1.0)*gconst198*x3246))+(((-1.0)*gconst198*x3244))+((x3210*x3215))+(((-1.0)*x3214*x3220)));
op[5]=(((x3223*x3232))+((x3223*x3233))+((x3212*x3217))+((gconst190*gconst205*x3224))+(((32.0)*gconst196))+(((-1.0)*x3211*x3237))+(((-1.0)*gconst190*gconst204*x3219))+(((-1.0)*x3210*x3238))+x3264+(((-1.0)*gconst191*gconst204*x3219))+(((-1.0)*x3267))+(((-1.0)*x3211*x3226))+((gconst193*gconst195*x3217))+(((-32.0)*gconst193))+(((-1.0)*x3210*x3217))+((x3214*x3237))+((x3224*x3225))+(((-1.0)*x3232*x3241))+(((-1.0)*x3219*x3222))+(((-1.0)*x3219*x3221))+((gconst191*gconst205*x3224))+(((-1.0)*x3221*x3224))+(((-2.0)*gconst196*x3216))+((x3219*x3225))+((x3217*x3234))+(((-1.0)*x3222*x3224))+((x3212*x3238))+((x3214*x3226)));
op[6]=(((x3211*x3230))+(((-1.0)*x3211*x3241))+(((-1.0)*gconst190*x3244))+(((-1.0)*gconst190*x3246))+((x3210*x3225))+((x3210*x3229))+x3263+(((-1.0)*gconst195*x3211*x3236))+((x3212*x3222))+((x3212*x3221))+(((-1.0)*x3265))+(((-1.0)*gconst196*x3243))+(((-1.0)*gconst191*x3244))+((x3211*x3223))+(((-1.0)*x3210*x3222))+(((-1.0)*x3210*x3221))+(((-1.0)*x3214*x3230))+((x3214*x3242))+((x3214*x3241))+(((-1.0)*x3209))+(((-1.0)*x3212*x3225))+(((-1.0)*x3212*x3229))+(((-1.0)*x3214*x3223)));
op[7]=((((-1.0)*x3211*x3219))+(((-1.0)*x3210*x3232))+(((-1.0)*x3210*x3233))+((x3214*x3219))+(((-1.0)*x3264))+(((-1.0)*x3211*x3224))+((x3212*x3232))+((x3212*x3233))+((x3214*x3224)));
op[8]=(((x3211*x3212))+(((-1.0)*x3212*x3214))+(((-1.0)*x3210*x3211))+(((-1.0)*x3258))+((x3210*x3214)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3268=((1.0)*r21);
IkReal x3269=(gconst185*sj1);
IkReal x3270=(cj4*r22);
IkReal x3271=(cj1*gconst186);
IkReal x3272=((1.0)*r20);
IkReal x3273=(cj1*gconst185);
IkReal x3274=(gconst186*sj1);
if( IKabs((((r20*x3274))+((cj1*x3270))+(((-1.0)*sj4*x3268*x3271))+(((-1.0)*sj4*x3272*x3273))+(((-1.0)*x3268*x3269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3270))+((r21*x3273))+(((-1.0)*sj4*x3268*x3274))+(((-1.0)*x3271*x3272))+(((-1.0)*sj4*x3269*x3272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x3274))+((cj1*x3270))+(((-1.0)*sj4*x3268*x3271))+(((-1.0)*sj4*x3272*x3273))+(((-1.0)*x3268*x3269))))+IKsqr((((sj1*x3270))+((r21*x3273))+(((-1.0)*sj4*x3268*x3274))+(((-1.0)*x3271*x3272))+(((-1.0)*sj4*x3269*x3272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x3274))+((cj1*x3270))+(((-1.0)*sj4*x3268*x3271))+(((-1.0)*sj4*x3272*x3273))+(((-1.0)*x3268*x3269))), (((sj1*x3270))+((r21*x3273))+(((-1.0)*sj4*x3268*x3274))+(((-1.0)*x3271*x3272))+(((-1.0)*sj4*x3269*x3272))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3275=IKcos(j2);
IkReal x3276=IKsin(j2);
IkReal x3277=((0.03)*sj1);
IkReal x3278=(gconst185*sj0);
IkReal x3279=(gconst186*sj4);
IkReal x3280=(r11*sj0);
IkReal x3281=(cj0*r00);
IkReal x3282=((1.0)*cj0);
IkReal x3283=((1.0)*sj1);
IkReal x3284=((1.0)*cj4);
IkReal x3285=(gconst185*sj4);
IkReal x3286=(cj0*r01);
IkReal x3287=((0.0055)*gconst186);
IkReal x3288=(cj1*x3275);
IkReal x3289=(cj1*x3276);
IkReal x3290=(sj1*x3275);
IkReal x3291=(x3276*x3283);
evalcond[0]=(((gconst186*r20))+(((-1.0)*x3291))+x3288+(((-1.0)*gconst185*r21)));
evalcond[1]=(((r20*x3285))+((r21*x3279))+(((-1.0)*r22*x3284))+x3290+x3289);
evalcond[2]=((((-1.0)*r11*x3278))+(((-1.0)*gconst185*r01*x3282))+((gconst186*x3281))+(((-1.0)*x3275*x3283))+(((-1.0)*x3289))+((gconst186*r10*sj0)));
CheckValue<IkReal> x3292=IKPowWithIntegerCheck(cj4,-1);
if(!x3292.valid){
continue;
}
evalcond[3]=((((-1.0)*x3276*x3277))+(((0.03)*x3288))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x3292.value)))+(((-1.0)*pz))+(((0.2215)*x3290))+(((0.2215)*x3289)));
evalcond[4]=(((x3279*x3280))+((x3279*x3286))+(((-1.0)*x3291))+x3288+(((-1.0)*cj4*r02*x3282))+(((-1.0)*r12*sj0*x3284))+((r10*sj4*x3278))+((x3281*x3285)));
evalcond[5]=((((-0.0055)*r10*x3278))+(((-0.2215)*sj1*x3276))+(((-1.0)*x3280*x3287))+(((-0.03)*x3289))+(((-1.0)*x3275*x3277))+(((-1.0)*px*x3282))+(((-1.0)*py*sj0))+(((0.2215)*x3288))+(((-0.21)*sj1))+(((-1.0)*x3286*x3287))+(((-0.0055)*gconst185*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3295 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3295)==0){
continue;
}
IkReal x3293=pow(x3295,-0.5);
IkReal x3294=((-1.0)*x3293);
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
IkReal gconst187=((3.14159265358979)+(((-1.0)*(x3296.value))));
IkReal gconst188=(r20*x3294);
IkReal gconst189=(r21*x3294);
CheckValue<IkReal> x3297 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3297.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3297.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x3301 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3301.valid){
continue;
}
IkReal x3298=((1.0)*(x3301.value));
IkReal x3299=x3293;
IkReal x3300=((-1.0)*x3299);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3298)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3298)));
IkReal gconst188=(r20*x3300);
IkReal gconst189=(r21*x3300);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x3305 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3305.valid){
continue;
}
IkReal x3302=((1.0)*(x3305.value));
IkReal x3303=x3293;
IkReal x3304=((-1.0)*x3303);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3302)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3302)));
IkReal gconst188=(r20*x3304);
IkReal gconst189=(r21*x3304);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x3309 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3309.valid){
continue;
}
IkReal x3306=((1.0)*(x3309.value));
IkReal x3307=x3293;
IkReal x3308=((-1.0)*x3307);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3306)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3306)));
IkReal gconst188=(r20*x3308);
IkReal gconst189=(r21*x3308);
IkReal x3310=(rxp2_2*sj4);
IkReal x3311=x3293;
IkReal x3312=(cj4*r20*rxp0_2*x3311);
IkReal x3313=(cj4*r21*rxp1_2*x3311);
j0eval[0]=((((181.818181818182)*x3313))+(((181.818181818182)*x3312))+(((-181.818181818182)*x3310)));
j0eval[1]=IKsign(((((1.0)*x3313))+(((1.0)*x3312))+(((-1.0)*x3310))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3314=((0.0055)*gconst189);
IkReal x3315=((0.0055)*gconst188);
IkReal x3316=((1.0)*cj4);
CheckValue<IkReal> x3317 = IKatan2WithCheck(IkReal((((r10*x3315))+((r11*x3314))+py)),IkReal((px+((r01*x3314))+((r00*x3315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3317.valid){
continue;
}
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x3315))+(((-1.0)*gconst188*rxp0_2*x3316))+(((-1.0)*gconst189*rxp1_2*x3316))+(((-1.0)*rxp2_2*sj4))+((r20*sj4*x3314)))),-1);
if(!x3318.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3317.value)+(((1.5707963267949)*(x3318.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3319=IKsin(j0);
IkReal x3320=IKcos(j0);
IkReal x3321=((1.0)*cj4);
IkReal x3322=((1.0)*sj4);
IkReal x3323=(gconst189*x3319);
IkReal x3324=(gconst188*x3320);
IkReal x3325=(gconst189*x3320);
IkReal x3326=(r12*x3320);
IkReal x3327=(r02*x3319);
IkReal x3328=((1.0)*x3319);
IkReal x3329=(gconst188*x3319);
evalcond[0]=(((r11*x3324))+((r00*x3323))+(((-1.0)*gconst188*r01*x3328))+(((-1.0)*r10*x3325)));
evalcond[1]=((((-0.0055)*r00*x3329))+(((-0.0055)*r01*x3323))+(((0.0055)*r11*x3325))+((py*x3320))+(((-1.0)*px*x3328))+(((0.0055)*r10*x3324)));
evalcond[2]=((((-1.0)*r10*x3322*x3324))+((r00*sj4*x3329))+(((-1.0)*x3321*x3327))+(((-1.0)*r11*x3322*x3325))+((cj4*x3326))+((r01*sj4*x3323)));
evalcond[3]=((-1.0)+((cj4*r10*x3324))+((cj4*r11*x3325))+(((-1.0)*x3322*x3327))+((sj4*x3326))+(((-1.0)*r01*x3321*x3323))+(((-1.0)*r00*x3321*x3329)));
evalcond[4]=((((-1.0)*r12*x3319*x3322))+(((-1.0)*r02*x3320*x3322))+(((-1.0)*r01*x3321*x3325))+(((-1.0)*r11*x3321*x3323))+(((-1.0)*r10*x3321*x3329))+(((-1.0)*r00*x3321*x3324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x3333 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3333.valid){
continue;
}
IkReal x3330=((1.0)*(x3333.value));
IkReal x3331=x3293;
IkReal x3332=((-1.0)*x3331);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3330)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3330)));
IkReal gconst188=(r20*x3332);
IkReal gconst189=(r21*x3332);
CheckValue<IkReal> x3354=IKPowWithIntegerCheck(cj4,-1);
if(!x3354.valid){
continue;
}
IkReal x3334=x3354.value;
IkReal x3335=((0.066)*gconst189);
IkReal x3336=(cj0*r01);
IkReal x3337=(gconst188*r21);
IkReal x3338=(cj0*px);
IkReal x3339=(r11*sj0);
IkReal x3340=((0.022)*gconst189);
IkReal x3341=(py*sj0);
IkReal x3342=(gconst189*r20);
IkReal x3343=(cj4*r22);
IkReal x3344=((180.0)*x3337);
IkReal x3345=((1329.0)*x3343);
IkReal x3346=(gconst189*r21*sj4);
IkReal x3347=(gconst188*r20*sj4);
IkReal x3348=(gconst188*r10*sj0);
IkReal x3349=(cj0*gconst188*r00);
IkReal x3350=(r22*sj4*x3334);
IkReal x3351=((33.0)*x3350);
IkReal x3352=(x3344+x3345+x3351);
IkReal x3353=((((1329.0)*x3346))+(((1329.0)*x3347))+(((6000.0)*pz))+(((180.0)*x3342)));
j1eval[0]=((6.72)+(((2.0)*(IKabs(((((-0.066)*x3349))+(((-0.066)*x3348))+(((-12.0)*x3341))+(((-0.36)*x3343))+(((-12.0)*x3338))+(((-1.0)*x3335*x3336))+(((-1.0)*x3335*x3339))+(((2.658)*x3337))+(((0.36)*x3347))+(((0.36)*x3346))+(((-2.658)*x3342)))))))+(((0.002)*(IKabs(((-420.0)+(((60.0)*x3337))+(((-443.0)*x3347))+(((-443.0)*x3346))+(((11.0)*x3350))+(((-60.0)*x3342))+(((-2000.0)*pz))+(((443.0)*x3343)))))))+(((0.002)*(IKabs(((-420.0)+(((-1.0)*x3353))+x3352)))))+(((0.002)*(IKabs(((420.0)+(((-1.0)*x3353))+x3352)))))+(IKabs(((((-4.0)*x3341))+(((0.886)*x3337))+(((0.12)*x3346))+(((0.12)*x3347))+(((-4.0)*x3338))+(((-0.12)*x3343))+(((-1.0)*x3339*x3340))+(((-0.022)*x3348))+(((-0.022)*x3349))+(((-0.886)*x3342))+(((-1.0)*x3336*x3340))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(cj4,-1);
if(!x3384.valid){
continue;
}
IkReal x3355=x3384.value;
IkReal x3356=cj4*cj4;
IkReal x3357=((420.0)*cj4);
IkReal x3358=((0.002)*x3355);
IkReal x3359=(cj4*pz);
IkReal x3360=(cj4*r20);
IkReal x3361=((1329.0)*sj4);
IkReal x3362=(cj4*r21);
IkReal x3363=(r22*sj4);
IkReal x3364=((443.0)*sj4);
IkReal x3365=((33.0)*x3363);
IkReal x3366=((6000.0)*x3359);
IkReal x3367=((11.0)*x3363);
IkReal x3368=((2000.0)*x3359);
IkReal x3369=(r22*x3356);
IkReal x3370=((180.0)*gconst188*x3362);
IkReal x3371=((1329.0)*x3369);
IkReal x3372=((180.0)*gconst189*x3360);
IkReal x3373=((60.0)*gconst188*x3362);
IkReal x3374=((443.0)*x3369);
IkReal x3375=((60.0)*gconst189*x3360);
IkReal x3376=(gconst189*x3361*x3362);
IkReal x3377=(gconst188*x3360*x3361);
IkReal x3378=(gconst189*x3362*x3364);
IkReal x3379=(gconst188*x3360*x3364);
IkReal x3380=(x3371+x3370+x3365);
IkReal x3381=(x3374+x3373+x3367);
IkReal x3382=(x3379+x3378+x3375+x3368);
IkReal x3383=(x3377+x3376+x3372+x3366);
op[0]=(x3358*(((((-1.0)*x3357))+x3381+(((-1.0)*x3382)))));
op[1]=0;
op[2]=(x3358*(((((-1.0)*x3357))+x3380+(((-1.0)*x3383)))));
op[3]=0;
op[4]=(x3358*((x3357+x3380+(((-1.0)*x3383)))));
op[5]=0;
op[6]=(x3358*((x3357+x3381+(((-1.0)*x3382)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3385=(gconst188*r21);
IkReal x3386=(cj0*px);
IkReal x3387=(py*sj0);
IkReal x3388=(cj4*r22);
IkReal x3389=(gconst189*r20);
IkReal x3390=((0.886)*x3385);
IkReal x3391=((4.0)*x3386);
IkReal x3392=((0.12)*x3388);
IkReal x3393=((4.0)*x3387);
IkReal x3394=((0.886)*x3389);
IkReal x3395=(gconst188*r20*sj4);
IkReal x3396=(gconst188*r10*sj0);
IkReal x3397=(cj0*gconst188*r00);
IkReal x3398=(gconst189*r11*sj0);
IkReal x3399=(cj0*gconst189*r01);
IkReal x3400=(gconst189*r21*sj4);
IkReal x3401=((0.12)*x3395);
IkReal x3402=((0.12)*x3400);
IkReal x3403=((0.022)*x3399);
IkReal x3404=((0.022)*x3396);
IkReal x3405=((0.022)*x3397);
IkReal x3406=((0.022)*x3398);
IkReal x3407=(x3390+x3401+x3402);
IkReal x3408=(x3391+x3393+x3392+x3394+x3403+x3405+x3404+x3406);
IkReal x3409=((((0.36)*x3395))+(((2.658)*x3385))+(((-0.066)*x3398))+(((-0.066)*x3399))+(((-0.066)*x3396))+(((-0.066)*x3397))+(((-2.658)*x3389))+(((0.36)*x3400))+(((-0.36)*x3388))+(((-12.0)*x3386))+(((-12.0)*x3387)));
j1evalpoly[0]=(((x3409*(htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3407+(((-1.0)*x3408))))))+(((-1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((-3.36)*(htj1*htj1*htj1)))+x3407+(((-1.68)*htj1))+((x3409*(htj1*htj1)))+(((-1.0)*x3408)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3410=((1.0)*r20);
IkReal x3411=(cj1*gconst189);
IkReal x3412=(cj4*r22);
IkReal x3413=(gconst188*sj1);
IkReal x3414=((1.0)*r21);
IkReal x3415=(gconst189*sj1);
IkReal x3416=(cj1*gconst188);
if( IKabs((((cj1*x3412))+(((-1.0)*sj4*x3411*x3414))+((r20*x3415))+(((-1.0)*sj4*x3410*x3416))+(((-1.0)*x3413*x3414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3412))+((r21*x3416))+(((-1.0)*sj4*x3410*x3413))+(((-1.0)*x3410*x3411))+(((-1.0)*sj4*x3414*x3415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3412))+(((-1.0)*sj4*x3411*x3414))+((r20*x3415))+(((-1.0)*sj4*x3410*x3416))+(((-1.0)*x3413*x3414))))+IKsqr((((sj1*x3412))+((r21*x3416))+(((-1.0)*sj4*x3410*x3413))+(((-1.0)*x3410*x3411))+(((-1.0)*sj4*x3414*x3415))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3412))+(((-1.0)*sj4*x3411*x3414))+((r20*x3415))+(((-1.0)*sj4*x3410*x3416))+(((-1.0)*x3413*x3414))), (((sj1*x3412))+((r21*x3416))+(((-1.0)*sj4*x3410*x3413))+(((-1.0)*x3410*x3411))+(((-1.0)*sj4*x3414*x3415))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3417=IKcos(j2);
IkReal x3418=IKsin(j2);
IkReal x3419=(cj0*r00);
IkReal x3420=(gconst188*sj4);
IkReal x3421=(gconst189*sj4);
IkReal x3422=(r11*sj0);
IkReal x3423=(cj0*r01);
IkReal x3424=((1.0)*cj4);
IkReal x3425=(r10*sj0);
IkReal x3426=((0.0055)*gconst188);
IkReal x3427=((0.0055)*gconst189);
IkReal x3428=((1.0)*gconst188);
IkReal x3429=(cj1*x3417);
IkReal x3430=(sj1*x3418);
IkReal x3431=(cj1*x3418);
IkReal x3432=(sj1*x3417);
IkReal x3433=((1.0)*x3430);
evalcond[0]=(x3429+(((-1.0)*x3433))+(((-1.0)*r21*x3428))+((gconst189*r20)));
evalcond[1]=(((r20*x3420))+x3431+x3432+(((-1.0)*r22*x3424))+((r21*x3421)));
evalcond[2]=(((gconst189*x3425))+(((-1.0)*x3431))+(((-1.0)*x3432))+((gconst189*x3419))+(((-1.0)*x3422*x3428))+(((-1.0)*x3423*x3428)));
CheckValue<IkReal> x3434=IKPowWithIntegerCheck(cj4,-1);
if(!x3434.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((-0.03)*x3430))+(((0.0055)*r22*sj4*(x3434.value)))+(((0.2215)*x3431))+(((0.2215)*x3432))+(((-1.0)*pz))+(((0.03)*x3429)));
evalcond[4]=(((x3420*x3425))+(((-1.0)*cj0*r02*x3424))+x3429+(((-1.0)*x3433))+((x3421*x3422))+((x3421*x3423))+(((-1.0)*r12*sj0*x3424))+((x3419*x3420)));
evalcond[5]=((((-0.2215)*x3430))+(((-0.03)*x3431))+(((-0.03)*x3432))+(((-1.0)*x3425*x3426))+(((0.2215)*x3429))+(((-1.0)*x3419*x3426))+(((-1.0)*py*sj0))+(((-1.0)*x3422*x3427))+(((-0.21)*sj1))+(((-1.0)*x3423*x3427))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3435=((1.0)*cj4);
IkReal x3436=((1.0)*gconst189);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3436))+((gconst188*r11)))),IkReal(((((-1.0)*r00*x3436))+((gconst188*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x3435*(gconst188*gconst188)))+(((-1.0)*x3435*(gconst189*gconst189)))))))+((gconst188*r20*sj4))+((gconst189*r21*sj4)))),-1);
if(!x3438.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3437.value)+(((1.5707963267949)*(x3438.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3439=IKsin(j0);
IkReal x3440=IKcos(j0);
IkReal x3441=((1.0)*cj4);
IkReal x3442=((1.0)*sj4);
IkReal x3443=(gconst189*x3439);
IkReal x3444=(gconst188*x3440);
IkReal x3445=(gconst189*x3440);
IkReal x3446=(r12*x3440);
IkReal x3447=(r02*x3439);
IkReal x3448=((1.0)*x3439);
IkReal x3449=(gconst188*x3439);
evalcond[0]=(((r11*x3444))+(((-1.0)*gconst188*r01*x3448))+((r00*x3443))+(((-1.0)*r10*x3445)));
evalcond[1]=((((0.0055)*r10*x3444))+(((-1.0)*px*x3448))+((py*x3440))+(((0.0055)*r11*x3445))+(((-0.0055)*r01*x3443))+(((-0.0055)*r00*x3449)));
evalcond[2]=((((-1.0)*r10*x3442*x3444))+(((-1.0)*x3441*x3447))+((r01*sj4*x3443))+((cj4*x3446))+((r00*sj4*x3449))+(((-1.0)*r11*x3442*x3445)));
evalcond[3]=((-1.0)+((sj4*x3446))+(((-1.0)*r01*x3441*x3443))+(((-1.0)*r00*x3441*x3449))+((cj4*r11*x3445))+(((-1.0)*x3442*x3447))+((cj4*r10*x3444)));
evalcond[4]=((((-1.0)*r12*x3439*x3442))+(((-1.0)*r11*x3441*x3443))+(((-1.0)*r02*x3440*x3442))+(((-1.0)*r01*x3441*x3445))+(((-1.0)*r00*x3441*x3444))+(((-1.0)*r10*x3441*x3449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
IkReal x3450=((1.0)*(x3453.value));
IkReal x3451=x3293;
IkReal x3452=((-1.0)*x3451);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3450)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3450)));
IkReal gconst188=(r20*x3452);
IkReal gconst189=(r21*x3452);
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(cj4,-1);
if(!x3474.valid){
continue;
}
IkReal x3454=x3474.value;
IkReal x3455=((0.066)*gconst189);
IkReal x3456=(cj0*r01);
IkReal x3457=(gconst188*r21);
IkReal x3458=(cj0*px);
IkReal x3459=(r11*sj0);
IkReal x3460=((0.022)*gconst189);
IkReal x3461=(py*sj0);
IkReal x3462=(gconst189*r20);
IkReal x3463=(cj4*r22);
IkReal x3464=((180.0)*x3457);
IkReal x3465=((1329.0)*x3463);
IkReal x3466=(gconst189*r21*sj4);
IkReal x3467=(gconst188*r20*sj4);
IkReal x3468=(gconst188*r10*sj0);
IkReal x3469=(cj0*gconst188*r00);
IkReal x3470=(r22*sj4*x3454);
IkReal x3471=((33.0)*x3470);
IkReal x3472=(x3471+x3465+x3464);
IkReal x3473=((((1329.0)*x3467))+(((1329.0)*x3466))+(((180.0)*x3462))+(((6000.0)*pz)));
j1eval[0]=((6.72)+(((0.002)*(IKabs(((420.0)+x3472+(((-1.0)*x3473)))))))+(IKabs(((((-0.886)*x3462))+(((-4.0)*x3458))+(((-0.022)*x3468))+(((-0.022)*x3469))+(((-4.0)*x3461))+(((-1.0)*x3459*x3460))+(((-1.0)*x3456*x3460))+(((0.886)*x3457))+(((0.12)*x3467))+(((0.12)*x3466))+(((-0.12)*x3463)))))+(((0.002)*(IKabs(((-420.0)+(((60.0)*x3457))+(((443.0)*x3463))+(((11.0)*x3470))+(((-443.0)*x3466))+(((-443.0)*x3467))+(((-60.0)*x3462))+(((-2000.0)*pz)))))))+(((2.0)*(IKabs(((((-12.0)*x3461))+(((-0.066)*x3468))+(((-0.066)*x3469))+(((0.36)*x3466))+(((0.36)*x3467))+(((-0.36)*x3463))+(((2.658)*x3457))+(((-2.658)*x3462))+(((-1.0)*x3455*x3459))+(((-1.0)*x3455*x3456))+(((-12.0)*x3458)))))))+(((0.002)*(IKabs(((-420.0)+x3472+(((-1.0)*x3473))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3504=IKPowWithIntegerCheck(cj4,-1);
if(!x3504.valid){
continue;
}
IkReal x3475=x3504.value;
IkReal x3476=cj4*cj4;
IkReal x3477=((420.0)*cj4);
IkReal x3478=((0.002)*x3475);
IkReal x3479=(cj4*pz);
IkReal x3480=(cj4*r20);
IkReal x3481=((1329.0)*sj4);
IkReal x3482=(cj4*r21);
IkReal x3483=(r22*sj4);
IkReal x3484=((443.0)*sj4);
IkReal x3485=((33.0)*x3483);
IkReal x3486=((6000.0)*x3479);
IkReal x3487=((11.0)*x3483);
IkReal x3488=((2000.0)*x3479);
IkReal x3489=(r22*x3476);
IkReal x3490=((180.0)*gconst188*x3482);
IkReal x3491=((1329.0)*x3489);
IkReal x3492=((180.0)*gconst189*x3480);
IkReal x3493=((60.0)*gconst188*x3482);
IkReal x3494=((443.0)*x3489);
IkReal x3495=((60.0)*gconst189*x3480);
IkReal x3496=(gconst189*x3481*x3482);
IkReal x3497=(gconst188*x3480*x3481);
IkReal x3498=(gconst189*x3482*x3484);
IkReal x3499=(gconst188*x3480*x3484);
IkReal x3500=(x3490+x3491+x3485);
IkReal x3501=(x3494+x3493+x3487);
IkReal x3502=(x3498+x3499+x3495+x3488);
IkReal x3503=(x3496+x3497+x3492+x3486);
op[0]=(x3478*((x3501+(((-1.0)*x3502))+(((-1.0)*x3477)))));
op[1]=0;
op[2]=(x3478*((x3500+(((-1.0)*x3503))+(((-1.0)*x3477)))));
op[3]=0;
op[4]=(x3478*((x3500+(((-1.0)*x3503))+x3477)));
op[5]=0;
op[6]=(x3478*((x3501+(((-1.0)*x3502))+x3477)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3505=(gconst188*r21);
IkReal x3506=(cj0*px);
IkReal x3507=(py*sj0);
IkReal x3508=(cj4*r22);
IkReal x3509=(gconst189*r20);
IkReal x3510=((0.886)*x3505);
IkReal x3511=((4.0)*x3506);
IkReal x3512=((0.12)*x3508);
IkReal x3513=((4.0)*x3507);
IkReal x3514=((0.886)*x3509);
IkReal x3515=(gconst188*r20*sj4);
IkReal x3516=(gconst188*r10*sj0);
IkReal x3517=(cj0*gconst188*r00);
IkReal x3518=(gconst189*r11*sj0);
IkReal x3519=(cj0*gconst189*r01);
IkReal x3520=(gconst189*r21*sj4);
IkReal x3521=((0.12)*x3515);
IkReal x3522=((0.12)*x3520);
IkReal x3523=((0.022)*x3519);
IkReal x3524=((0.022)*x3516);
IkReal x3525=((0.022)*x3517);
IkReal x3526=((0.022)*x3518);
IkReal x3527=(x3510+x3522+x3521);
IkReal x3528=(x3513+x3512+x3511+x3514+x3526+x3524+x3525+x3523);
IkReal x3529=((((2.658)*x3505))+(((-12.0)*x3506))+(((-12.0)*x3507))+(((-0.36)*x3508))+(((-2.658)*x3509))+(((-0.066)*x3517))+(((-0.066)*x3518))+(((-0.066)*x3519))+(((-0.066)*x3516))+(((0.36)*x3520))+(((0.36)*x3515)));
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3528))+x3527))))+(((-1.0)*x3528))+(((-1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((-3.36)*(htj1*htj1*htj1)))+x3527+(((-1.68)*htj1))+((x3529*(htj1*htj1)))+((x3529*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3530=((1.0)*r20);
IkReal x3531=(cj1*gconst189);
IkReal x3532=(cj4*r22);
IkReal x3533=(gconst188*sj1);
IkReal x3534=((1.0)*r21);
IkReal x3535=(gconst189*sj1);
IkReal x3536=(cj1*gconst188);
if( IKabs((((cj1*x3532))+(((-1.0)*sj4*x3530*x3536))+(((-1.0)*sj4*x3531*x3534))+((r20*x3535))+(((-1.0)*x3533*x3534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x3534*x3535))+((sj1*x3532))+(((-1.0)*sj4*x3530*x3533))+((r21*x3536))+(((-1.0)*x3530*x3531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3532))+(((-1.0)*sj4*x3530*x3536))+(((-1.0)*sj4*x3531*x3534))+((r20*x3535))+(((-1.0)*x3533*x3534))))+IKsqr(((((-1.0)*sj4*x3534*x3535))+((sj1*x3532))+(((-1.0)*sj4*x3530*x3533))+((r21*x3536))+(((-1.0)*x3530*x3531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3532))+(((-1.0)*sj4*x3530*x3536))+(((-1.0)*sj4*x3531*x3534))+((r20*x3535))+(((-1.0)*x3533*x3534))), ((((-1.0)*sj4*x3534*x3535))+((sj1*x3532))+(((-1.0)*sj4*x3530*x3533))+((r21*x3536))+(((-1.0)*x3530*x3531))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3537=IKcos(j2);
IkReal x3538=IKsin(j2);
IkReal x3539=(cj0*r00);
IkReal x3540=(gconst188*sj4);
IkReal x3541=(gconst189*sj4);
IkReal x3542=(r11*sj0);
IkReal x3543=(cj0*r01);
IkReal x3544=((1.0)*cj4);
IkReal x3545=(r10*sj0);
IkReal x3546=((0.0055)*gconst188);
IkReal x3547=((0.0055)*gconst189);
IkReal x3548=((1.0)*gconst188);
IkReal x3549=(cj1*x3537);
IkReal x3550=(sj1*x3538);
IkReal x3551=(cj1*x3538);
IkReal x3552=(sj1*x3537);
IkReal x3553=((1.0)*x3550);
evalcond[0]=((((-1.0)*r21*x3548))+x3549+(((-1.0)*x3553))+((gconst189*r20)));
evalcond[1]=(((r20*x3540))+((r21*x3541))+x3552+x3551+(((-1.0)*r22*x3544)));
evalcond[2]=(((gconst189*x3539))+(((-1.0)*x3542*x3548))+((gconst189*x3545))+(((-1.0)*x3543*x3548))+(((-1.0)*x3552))+(((-1.0)*x3551)));
CheckValue<IkReal> x3554=IKPowWithIntegerCheck(cj4,-1);
if(!x3554.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x3554.value)))+(((0.03)*x3549))+(((-1.0)*pz))+(((0.2215)*x3552))+(((0.2215)*x3551))+(((-0.03)*x3550)));
evalcond[4]=(((x3541*x3542))+((x3541*x3543))+((x3539*x3540))+x3549+((x3540*x3545))+(((-1.0)*cj0*r02*x3544))+(((-1.0)*x3553))+(((-1.0)*r12*sj0*x3544)));
evalcond[5]=((((-1.0)*x3545*x3546))+(((-1.0)*x3539*x3546))+(((-1.0)*x3542*x3547))+(((-1.0)*x3543*x3547))+(((0.2215)*x3549))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-0.03)*x3552))+(((-0.03)*x3551))+(((-0.2215)*x3550))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3555=((1.0)*gconst189*sj4);
IkReal x3556=((1.0)*gconst188*sj4);
CheckValue<IkReal> x3557 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3556))+(((-1.0)*r11*x3555))+((cj4*r12)))),IkReal(((((-1.0)*r01*x3555))+(((-1.0)*r00*x3556))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3557.valid){
continue;
}
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(IKsign((((gconst188*r21))+(((-1.0)*gconst189*r20)))),-1);
if(!x3558.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3557.value)+(((1.5707963267949)*(x3558.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3559=IKsin(j0);
IkReal x3560=IKcos(j0);
IkReal x3561=((1.0)*cj4);
IkReal x3562=((1.0)*sj4);
IkReal x3563=(gconst189*x3559);
IkReal x3564=(gconst188*x3560);
IkReal x3565=(gconst189*x3560);
IkReal x3566=(r12*x3560);
IkReal x3567=(r02*x3559);
IkReal x3568=((1.0)*x3559);
IkReal x3569=(gconst188*x3559);
evalcond[0]=((((-1.0)*gconst188*r01*x3568))+((r00*x3563))+(((-1.0)*r10*x3565))+((r11*x3564)));
evalcond[1]=((((-0.0055)*r01*x3563))+(((-0.0055)*r00*x3569))+(((-1.0)*px*x3568))+(((0.0055)*r11*x3565))+(((0.0055)*r10*x3564))+((py*x3560)));
evalcond[2]=(((r01*sj4*x3563))+((r00*sj4*x3569))+(((-1.0)*r11*x3562*x3565))+((cj4*x3566))+(((-1.0)*x3561*x3567))+(((-1.0)*r10*x3562*x3564)));
evalcond[3]=((-1.0)+((cj4*r11*x3565))+(((-1.0)*r01*x3561*x3563))+((sj4*x3566))+((cj4*r10*x3564))+(((-1.0)*x3562*x3567))+(((-1.0)*r00*x3561*x3569)));
evalcond[4]=((((-1.0)*r12*x3559*x3562))+(((-1.0)*r01*x3561*x3565))+(((-1.0)*r02*x3560*x3562))+(((-1.0)*r11*x3561*x3563))+(((-1.0)*r00*x3561*x3564))+(((-1.0)*r10*x3561*x3569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
IkReal x3570=((1.0)*(x3573.value));
IkReal x3571=x3293;
IkReal x3572=((-1.0)*x3571);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3570)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3570)));
IkReal gconst188=(r20*x3572);
IkReal gconst189=(r21*x3572);
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(cj4,-1);
if(!x3594.valid){
continue;
}
IkReal x3574=x3594.value;
IkReal x3575=((0.066)*gconst189);
IkReal x3576=(cj0*r01);
IkReal x3577=(gconst188*r21);
IkReal x3578=(cj0*px);
IkReal x3579=(r11*sj0);
IkReal x3580=((0.022)*gconst189);
IkReal x3581=(py*sj0);
IkReal x3582=(gconst189*r20);
IkReal x3583=(cj4*r22);
IkReal x3584=((180.0)*x3577);
IkReal x3585=((1329.0)*x3583);
IkReal x3586=(gconst189*r21*sj4);
IkReal x3587=(gconst188*r20*sj4);
IkReal x3588=(gconst188*r10*sj0);
IkReal x3589=(cj0*gconst188*r00);
IkReal x3590=(r22*sj4*x3574);
IkReal x3591=((33.0)*x3590);
IkReal x3592=(x3584+x3585+x3591);
IkReal x3593=((((1329.0)*x3586))+(((1329.0)*x3587))+(((180.0)*x3582))+(((6000.0)*pz)));
j1eval[0]=((6.72)+(((0.002)*(IKabs(((-420.0)+x3592+(((-1.0)*x3593)))))))+(IKabs(((((-1.0)*x3576*x3580))+(((-0.022)*x3589))+(((-0.022)*x3588))+(((-4.0)*x3581))+(((0.886)*x3577))+(((-4.0)*x3578))+(((0.12)*x3587))+(((0.12)*x3586))+(((-1.0)*x3579*x3580))+(((-0.886)*x3582))+(((-0.12)*x3583)))))+(((0.002)*(IKabs(((420.0)+x3592+(((-1.0)*x3593)))))))+(((2.0)*(IKabs(((((2.658)*x3577))+(((0.36)*x3587))+(((0.36)*x3586))+(((-2.658)*x3582))+(((-12.0)*x3578))+(((-1.0)*x3575*x3576))+(((-1.0)*x3575*x3579))+(((-0.066)*x3589))+(((-0.066)*x3588))+(((-0.36)*x3583))+(((-12.0)*x3581)))))))+(((0.002)*(IKabs(((-420.0)+(((60.0)*x3577))+(((-60.0)*x3582))+(((-443.0)*x3587))+(((-443.0)*x3586))+(((11.0)*x3590))+(((-2000.0)*pz))+(((443.0)*x3583))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(cj4,-1);
if(!x3624.valid){
continue;
}
IkReal x3595=x3624.value;
IkReal x3596=cj4*cj4;
IkReal x3597=((420.0)*cj4);
IkReal x3598=((0.002)*x3595);
IkReal x3599=(cj4*pz);
IkReal x3600=(cj4*r20);
IkReal x3601=((1329.0)*sj4);
IkReal x3602=(cj4*r21);
IkReal x3603=(r22*sj4);
IkReal x3604=((443.0)*sj4);
IkReal x3605=((33.0)*x3603);
IkReal x3606=((6000.0)*x3599);
IkReal x3607=((11.0)*x3603);
IkReal x3608=((2000.0)*x3599);
IkReal x3609=(r22*x3596);
IkReal x3610=((180.0)*gconst188*x3602);
IkReal x3611=((1329.0)*x3609);
IkReal x3612=((180.0)*gconst189*x3600);
IkReal x3613=((60.0)*gconst188*x3602);
IkReal x3614=((443.0)*x3609);
IkReal x3615=((60.0)*gconst189*x3600);
IkReal x3616=(gconst189*x3601*x3602);
IkReal x3617=(gconst188*x3600*x3601);
IkReal x3618=(gconst189*x3602*x3604);
IkReal x3619=(gconst188*x3600*x3604);
IkReal x3620=(x3610+x3611+x3605);
IkReal x3621=(x3613+x3614+x3607);
IkReal x3622=(x3615+x3618+x3619+x3608);
IkReal x3623=(x3612+x3616+x3617+x3606);
op[0]=(x3598*(((((-1.0)*x3622))+x3621+(((-1.0)*x3597)))));
op[1]=0;
op[2]=(x3598*(((((-1.0)*x3623))+x3620+(((-1.0)*x3597)))));
op[3]=0;
op[4]=(x3598*(((((-1.0)*x3623))+x3597+x3620)));
op[5]=0;
op[6]=(x3598*(((((-1.0)*x3622))+x3597+x3621)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3625=(gconst188*r21);
IkReal x3626=(cj0*px);
IkReal x3627=(py*sj0);
IkReal x3628=(cj4*r22);
IkReal x3629=(gconst189*r20);
IkReal x3630=((0.886)*x3625);
IkReal x3631=((4.0)*x3626);
IkReal x3632=((0.12)*x3628);
IkReal x3633=((4.0)*x3627);
IkReal x3634=((0.886)*x3629);
IkReal x3635=(gconst188*r20*sj4);
IkReal x3636=(gconst188*r10*sj0);
IkReal x3637=(cj0*gconst188*r00);
IkReal x3638=(gconst189*r11*sj0);
IkReal x3639=(cj0*gconst189*r01);
IkReal x3640=(gconst189*r21*sj4);
IkReal x3641=((0.12)*x3635);
IkReal x3642=((0.12)*x3640);
IkReal x3643=((0.022)*x3639);
IkReal x3644=((0.022)*x3636);
IkReal x3645=((0.022)*x3637);
IkReal x3646=((0.022)*x3638);
IkReal x3647=(x3630+x3642+x3641);
IkReal x3648=(x3634+x3632+x3633+x3631+x3646+x3645+x3644+x3643);
IkReal x3649=((((-12.0)*x3626))+(((-12.0)*x3627))+(((-0.066)*x3637))+(((-0.066)*x3636))+(((-0.066)*x3639))+(((-0.066)*x3638))+(((2.658)*x3625))+(((-2.658)*x3629))+(((0.36)*x3635))+(((-0.36)*x3628))+(((0.36)*x3640)));
j1evalpoly[0]=((((-1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((-3.36)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3647+(((-1.0)*x3648))))))+(((-1.68)*htj1))+x3647+((x3649*(htj1*htj1*htj1*htj1)))+((x3649*(htj1*htj1)))+(((-1.0)*x3648)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3650=((1.0)*r20);
IkReal x3651=(cj1*gconst189);
IkReal x3652=(cj4*r22);
IkReal x3653=(gconst188*sj1);
IkReal x3654=((1.0)*r21);
IkReal x3655=(gconst189*sj1);
IkReal x3656=(cj1*gconst188);
if( IKabs(((((-1.0)*sj4*x3651*x3654))+(((-1.0)*x3653*x3654))+((r20*x3655))+((cj1*x3652))+(((-1.0)*sj4*x3650*x3656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x3654*x3655))+((r21*x3656))+(((-1.0)*x3650*x3651))+((sj1*x3652))+(((-1.0)*sj4*x3650*x3653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x3651*x3654))+(((-1.0)*x3653*x3654))+((r20*x3655))+((cj1*x3652))+(((-1.0)*sj4*x3650*x3656))))+IKsqr(((((-1.0)*sj4*x3654*x3655))+((r21*x3656))+(((-1.0)*x3650*x3651))+((sj1*x3652))+(((-1.0)*sj4*x3650*x3653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x3651*x3654))+(((-1.0)*x3653*x3654))+((r20*x3655))+((cj1*x3652))+(((-1.0)*sj4*x3650*x3656))), ((((-1.0)*sj4*x3654*x3655))+((r21*x3656))+(((-1.0)*x3650*x3651))+((sj1*x3652))+(((-1.0)*sj4*x3650*x3653))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3657=IKcos(j2);
IkReal x3658=IKsin(j2);
IkReal x3659=(cj0*r00);
IkReal x3660=(gconst188*sj4);
IkReal x3661=(gconst189*sj4);
IkReal x3662=(r11*sj0);
IkReal x3663=(cj0*r01);
IkReal x3664=((1.0)*cj4);
IkReal x3665=(r10*sj0);
IkReal x3666=((0.0055)*gconst188);
IkReal x3667=((0.0055)*gconst189);
IkReal x3668=((1.0)*gconst188);
IkReal x3669=(cj1*x3657);
IkReal x3670=(sj1*x3658);
IkReal x3671=(cj1*x3658);
IkReal x3672=(sj1*x3657);
IkReal x3673=((1.0)*x3670);
evalcond[0]=(x3669+(((-1.0)*r21*x3668))+(((-1.0)*x3673))+((gconst189*r20)));
evalcond[1]=(x3672+x3671+((r20*x3660))+(((-1.0)*r22*x3664))+((r21*x3661)));
evalcond[2]=((((-1.0)*x3662*x3668))+(((-1.0)*x3663*x3668))+((gconst189*x3665))+(((-1.0)*x3671))+(((-1.0)*x3672))+((gconst189*x3659)));
CheckValue<IkReal> x3674=IKPowWithIntegerCheck(cj4,-1);
if(!x3674.valid){
continue;
}
evalcond[3]=((((0.2215)*x3671))+(((0.2215)*x3672))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x3674.value)))+(((-0.03)*x3670))+(((-1.0)*pz))+(((0.03)*x3669)));
evalcond[4]=(((x3659*x3660))+(((-1.0)*r12*sj0*x3664))+(((-1.0)*cj0*r02*x3664))+x3669+((x3660*x3665))+(((-1.0)*x3673))+((x3661*x3662))+((x3661*x3663)));
evalcond[5]=((((-1.0)*x3662*x3667))+(((-0.2215)*x3670))+(((0.2215)*x3669))+(((-1.0)*x3663*x3667))+(((-1.0)*x3665*x3666))+(((-0.03)*x3671))+(((-0.03)*x3672))+(((-1.0)*x3659*x3666))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3675=((0.0055)*sj5);
IkReal x3676=((0.0055)*cj5);
IkReal x3677=((1.0)*cj4);
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal((((r11*x3676))+py+((r10*x3675)))),IkReal((((r01*x3676))+((r00*x3675))+px)),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(IKsign(((((-1.0)*rxp0_2*sj5*x3677))+((r20*sj4*x3676))+(((-1.0)*r21*sj4*x3675))+(((-1.0)*rxp2_2*sj4))+(((-1.0)*cj5*rxp1_2*x3677)))),-1);
if(!x3679.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3678.value)+(((1.5707963267949)*(x3679.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3680=IKsin(j0);
IkReal x3681=IKcos(j0);
IkReal x3682=(cj5*r01);
IkReal x3683=((1.0)*sj4);
IkReal x3684=(cj4*r10);
IkReal x3685=((1.0)*cj4);
IkReal x3686=(r00*sj5);
IkReal x3687=(cj5*r11);
IkReal x3688=((0.0055)*x3680);
IkReal x3689=(sj5*x3681);
IkReal x3690=(cj4*x3681);
IkReal x3691=(sj4*x3680);
IkReal x3692=(r02*x3680);
IkReal x3693=(cj5*x3681);
IkReal x3694=((1.0)*x3680);
evalcond[0]=(((cj5*r00*x3680))+(((-1.0)*r01*sj5*x3694))+(((-1.0)*r10*x3693))+((r11*x3689)));
evalcond[1]=((((-1.0)*x3682*x3688))+(((-1.0)*px*x3694))+(((-1.0)*x3686*x3688))+(((0.0055)*r10*x3689))+(((0.0055)*x3681*x3687))+((py*x3681)));
evalcond[2]=((((-1.0)*x3685*x3692))+((x3682*x3691))+((x3686*x3691))+(((-1.0)*x3681*x3683*x3687))+((r12*x3690))+(((-1.0)*r10*x3683*x3689)));
evalcond[3]=((-1.0)+((x3687*x3690))+(((-1.0)*x3680*x3682*x3685))+((x3684*x3689))+(((-1.0)*x3680*x3685*x3686))+(((-1.0)*x3683*x3692))+((r12*sj4*x3681)));
evalcond[4]=((((-1.0)*sj5*x3684*x3694))+(((-1.0)*r12*x3680*x3683))+(((-1.0)*x3680*x3685*x3687))+(((-1.0)*r02*x3681*x3683))+(((-1.0)*x3681*x3685*x3686))+(((-1.0)*x3681*x3682*x3685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
CheckValue<IkReal> x3715=IKPowWithIntegerCheck(cj4,-1);
if(!x3715.valid){
continue;
}
IkReal x3695=x3715.value;
IkReal x3696=((0.066)*cj0);
IkReal x3697=(r00*sj5);
IkReal x3698=(cj4*r22);
IkReal x3699=(cj0*px);
IkReal x3700=(cj5*r01);
IkReal x3701=(py*sj0);
IkReal x3702=(cj5*r20);
IkReal x3703=(r21*sj5);
IkReal x3704=((0.022)*cj0);
IkReal x3705=((180.0)*x3703);
IkReal x3706=((1329.0)*x3698);
IkReal x3707=(r10*sj0*sj5);
IkReal x3708=(cj5*r21*sj4);
IkReal x3709=(r20*sj4*sj5);
IkReal x3710=(r22*sj4*x3695);
IkReal x3711=(cj5*r11*sj0);
IkReal x3712=((33.0)*x3710);
IkReal x3713=(x3706+x3705+x3712);
IkReal x3714=((((1329.0)*x3708))+(((1329.0)*x3709))+(((180.0)*x3702))+(((6000.0)*pz)));
j1eval[0]=((6.72)+(((0.002)*(IKabs(((-420.0)+(((-60.0)*x3702))+(((60.0)*x3703))+(((-443.0)*x3708))+(((-443.0)*x3709))+(((11.0)*x3710))+(((-2000.0)*pz))+(((443.0)*x3698)))))))+(((2.0)*(IKabs(((((0.36)*x3708))+(((0.36)*x3709))+(((-12.0)*x3699))+(((-2.658)*x3702))+(((-0.066)*x3707))+(((-0.066)*x3711))+(((-1.0)*x3696*x3697))+(((-1.0)*x3696*x3700))+(((2.658)*x3703))+(((-12.0)*x3701))+(((-0.36)*x3698)))))))+(((0.002)*(IKabs(((-420.0)+(((-1.0)*x3714))+x3713)))))+(IKabs(((((-1.0)*x3697*x3704))+(((-4.0)*x3701))+(((-4.0)*x3699))+(((-1.0)*x3700*x3704))+(((0.886)*x3703))+(((-0.12)*x3698))+(((0.12)*x3709))+(((0.12)*x3708))+(((-0.022)*x3707))+(((-0.022)*x3711))+(((-0.886)*x3702)))))+(((0.002)*(IKabs(((420.0)+(((-1.0)*x3714))+x3713))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(cj4,-1);
if(!x3745.valid){
continue;
}
IkReal x3716=x3745.value;
IkReal x3717=cj4*cj4;
IkReal x3718=((420.0)*cj4);
IkReal x3719=((0.002)*x3716);
IkReal x3720=(cj4*pz);
IkReal x3721=(cj4*r21);
IkReal x3722=(cj5*sj4);
IkReal x3723=(r22*sj4);
IkReal x3724=(cj4*r20);
IkReal x3725=(sj4*sj5);
IkReal x3726=((33.0)*x3723);
IkReal x3727=((6000.0)*x3720);
IkReal x3728=((11.0)*x3723);
IkReal x3729=((2000.0)*x3720);
IkReal x3730=(r22*x3717);
IkReal x3731=((1329.0)*x3730);
IkReal x3732=((180.0)*sj5*x3721);
IkReal x3733=((180.0)*cj5*x3724);
IkReal x3734=((443.0)*x3730);
IkReal x3735=((60.0)*sj5*x3721);
IkReal x3736=((60.0)*cj5*x3724);
IkReal x3737=((1329.0)*x3721*x3722);
IkReal x3738=((1329.0)*x3724*x3725);
IkReal x3739=((443.0)*x3721*x3722);
IkReal x3740=((443.0)*x3724*x3725);
IkReal x3741=(x3728+x3735+x3734);
IkReal x3742=(x3726+x3732+x3731);
IkReal x3743=(x3740+x3729+x3739+x3736);
IkReal x3744=(x3727+x3738+x3737+x3733);
op[0]=(x3719*(((((-1.0)*x3743))+(((-1.0)*x3718))+x3741)));
op[1]=0;
op[2]=(x3719*(((((-1.0)*x3744))+(((-1.0)*x3718))+x3742)));
op[3]=0;
op[4]=(x3719*(((((-1.0)*x3744))+x3742+x3718)));
op[5]=0;
op[6]=(x3719*(((((-1.0)*x3743))+x3741+x3718)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3746=((0.066)*cj0);
IkReal x3747=(r00*sj5);
IkReal x3748=(cj0*px);
IkReal x3749=(cj5*r01);
IkReal x3750=(py*sj0);
IkReal x3751=(cj5*r20);
IkReal x3752=(cj4*r22);
IkReal x3753=((0.022)*cj0);
IkReal x3754=(r21*sj5);
IkReal x3755=((0.886)*x3754);
IkReal x3756=((4.0)*x3748);
IkReal x3757=((0.886)*x3751);
IkReal x3758=((0.12)*x3752);
IkReal x3759=((4.0)*x3750);
IkReal x3760=(r10*sj0*sj5);
IkReal x3761=(cj5*r21*sj4);
IkReal x3762=(cj5*r11*sj0);
IkReal x3763=(r20*sj4*sj5);
IkReal x3764=((0.12)*x3763);
IkReal x3765=((0.12)*x3761);
IkReal x3766=(x3747*x3753);
IkReal x3767=((0.022)*x3762);
IkReal x3768=(x3749*x3753);
IkReal x3769=((0.022)*x3760);
IkReal x3770=(x3764+x3765+x3755);
IkReal x3771=(x3766+x3767+x3768+x3769+x3759+x3758+x3757+x3756);
IkReal x3772=((((-0.066)*x3762))+(((-0.066)*x3760))+(((-12.0)*x3748))+(((-12.0)*x3750))+(((-2.658)*x3751))+(((-1.0)*x3746*x3749))+(((-1.0)*x3746*x3747))+(((-0.36)*x3752))+(((0.36)*x3763))+(((0.36)*x3761))+(((2.658)*x3754)));
j1evalpoly[0]=(((x3772*(htj1*htj1*htj1*htj1)))+(((-1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3770+(((-1.0)*x3771))))))+(((-3.36)*(htj1*htj1*htj1)))+(((-1.68)*htj1))+x3770+((x3772*(htj1*htj1)))+(((-1.0)*x3771)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3773=((1.0)*sj5);
IkReal x3774=(r20*sj4);
IkReal x3775=(r21*sj1);
IkReal x3776=(cj4*r22);
IkReal x3777=(cj1*r21);
IkReal x3778=((1.0)*cj5);
if( IKabs(((((-1.0)*sj4*x3777*x3778))+((cj5*r20*sj1))+(((-1.0)*cj1*x3773*x3774))+(((-1.0)*x3773*x3775))+((cj1*x3776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x3775*x3778))+(((-1.0)*cj1*r20*x3778))+((sj5*x3777))+((sj1*x3776))+(((-1.0)*sj1*x3773*x3774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x3777*x3778))+((cj5*r20*sj1))+(((-1.0)*cj1*x3773*x3774))+(((-1.0)*x3773*x3775))+((cj1*x3776))))+IKsqr(((((-1.0)*sj4*x3775*x3778))+(((-1.0)*cj1*r20*x3778))+((sj5*x3777))+((sj1*x3776))+(((-1.0)*sj1*x3773*x3774))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x3777*x3778))+((cj5*r20*sj1))+(((-1.0)*cj1*x3773*x3774))+(((-1.0)*x3773*x3775))+((cj1*x3776))), ((((-1.0)*sj4*x3775*x3778))+(((-1.0)*cj1*r20*x3778))+((sj5*x3777))+((sj1*x3776))+(((-1.0)*sj1*x3773*x3774))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3779=IKcos(j2);
IkReal x3780=IKsin(j2);
IkReal x3781=((0.2215)*sj1);
IkReal x3782=(sj0*sj5);
IkReal x3783=(cj5*sj4);
IkReal x3784=((1.0)*cj4);
IkReal x3785=((1.0)*sj1);
IkReal x3786=(cj0*r01);
IkReal x3787=(sj4*sj5);
IkReal x3788=((0.0055)*cj5);
IkReal x3789=(cj0*r00);
IkReal x3790=(r11*sj0);
IkReal x3791=((1.0)*sj5);
IkReal x3792=(cj1*x3779);
IkReal x3793=(cj1*x3780);
IkReal x3794=(sj1*x3779);
IkReal x3795=(x3780*x3785);
evalcond[0]=((((-1.0)*x3795))+((cj5*r20))+x3792+(((-1.0)*r21*x3791)));
evalcond[1]=(((r21*x3783))+(((-1.0)*r22*x3784))+((r20*x3787))+x3794+x3793);
evalcond[2]=((((-1.0)*r11*x3782))+((cj5*x3789))+(((-1.0)*x3779*x3785))+(((-1.0)*x3793))+(((-1.0)*x3786*x3791))+((cj5*r10*sj0)));
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(cj4,-1);
if(!x3796.valid){
continue;
}
evalcond[3]=((((0.2215)*x3793))+(((-0.03)*sj1*x3780))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x3796.value)))+((x3779*x3781))+(((-1.0)*pz))+(((0.03)*x3792)));
evalcond[4]=((((-1.0)*x3795))+((x3783*x3790))+((r10*sj4*x3782))+((x3787*x3789))+x3792+(((-1.0)*r12*sj0*x3784))+(((-1.0)*cj0*r02*x3784))+((x3783*x3786)));
evalcond[5]=((((0.2215)*x3792))+(((-0.03)*x3794))+(((-0.03)*x3793))+(((-1.0)*x3786*x3788))+(((-0.0055)*sj5*x3789))+(((-1.0)*x3780*x3781))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-0.0055)*r10*x3782))+(((-1.0)*x3788*x3790))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3797=((1.0)*cj5);
IkReal x3798=((1.0)*sj4*sj5);
CheckValue<IkReal> x3799=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x3797)))),-1);
if(!x3799.valid){
continue;
}
CheckValue<IkReal> x3800 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3798))+((cj4*r12))+(((-1.0)*r11*sj4*x3797)))),IkReal(((((-1.0)*r01*sj4*x3797))+(((-1.0)*r00*x3798))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3800.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3799.value)))+(x3800.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3801=IKsin(j0);
IkReal x3802=IKcos(j0);
IkReal x3803=(cj5*r01);
IkReal x3804=((1.0)*sj4);
IkReal x3805=(cj4*r10);
IkReal x3806=((1.0)*cj4);
IkReal x3807=(r00*sj5);
IkReal x3808=(cj5*r11);
IkReal x3809=((0.0055)*x3801);
IkReal x3810=(sj5*x3802);
IkReal x3811=(cj4*x3802);
IkReal x3812=(sj4*x3801);
IkReal x3813=(r02*x3801);
IkReal x3814=(cj5*x3802);
IkReal x3815=((1.0)*x3801);
evalcond[0]=(((r11*x3810))+((cj5*r00*x3801))+(((-1.0)*r01*sj5*x3815))+(((-1.0)*r10*x3814)));
evalcond[1]=((((0.0055)*r10*x3810))+(((-1.0)*x3803*x3809))+(((-1.0)*px*x3815))+(((0.0055)*x3802*x3808))+((py*x3802))+(((-1.0)*x3807*x3809)));
evalcond[2]=(((r12*x3811))+((x3807*x3812))+(((-1.0)*x3802*x3804*x3808))+((x3803*x3812))+(((-1.0)*r10*x3804*x3810))+(((-1.0)*x3806*x3813)));
evalcond[3]=((-1.0)+(((-1.0)*x3804*x3813))+((r12*sj4*x3802))+((x3805*x3810))+((x3808*x3811))+(((-1.0)*x3801*x3806*x3807))+(((-1.0)*x3801*x3803*x3806)));
evalcond[4]=((((-1.0)*sj5*x3805*x3815))+(((-1.0)*r12*x3801*x3804))+(((-1.0)*x3802*x3803*x3806))+(((-1.0)*r02*x3802*x3804))+(((-1.0)*x3802*x3806*x3807))+(((-1.0)*x3801*x3806*x3808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
CheckValue<IkReal> x3836=IKPowWithIntegerCheck(cj4,-1);
if(!x3836.valid){
continue;
}
IkReal x3816=x3836.value;
IkReal x3817=((0.066)*cj0);
IkReal x3818=(r00*sj5);
IkReal x3819=(cj4*r22);
IkReal x3820=(cj0*px);
IkReal x3821=(cj5*r01);
IkReal x3822=(py*sj0);
IkReal x3823=(cj5*r20);
IkReal x3824=(r21*sj5);
IkReal x3825=((0.022)*cj0);
IkReal x3826=((180.0)*x3824);
IkReal x3827=((1329.0)*x3819);
IkReal x3828=(r10*sj0*sj5);
IkReal x3829=(cj5*r21*sj4);
IkReal x3830=(r20*sj4*sj5);
IkReal x3831=(r22*sj4*x3816);
IkReal x3832=(cj5*r11*sj0);
IkReal x3833=((33.0)*x3831);
IkReal x3834=(x3827+x3826+x3833);
IkReal x3835=((((1329.0)*x3830))+(((180.0)*x3823))+(((6000.0)*pz))+(((1329.0)*x3829)));
j1eval[0]=((6.72)+(((2.0)*(IKabs(((((2.658)*x3824))+(((-1.0)*x3817*x3818))+(((-1.0)*x3817*x3821))+(((0.36)*x3830))+(((-0.066)*x3828))+(((-0.36)*x3819))+(((-2.658)*x3823))+(((0.36)*x3829))+(((-0.066)*x3832))+(((-12.0)*x3822))+(((-12.0)*x3820)))))))+(((0.002)*(IKabs(((-420.0)+x3834+(((-1.0)*x3835)))))))+(((0.002)*(IKabs(((420.0)+x3834+(((-1.0)*x3835)))))))+(((0.002)*(IKabs(((-420.0)+(((-60.0)*x3823))+(((11.0)*x3831))+(((60.0)*x3824))+(((-443.0)*x3830))+(((-2000.0)*pz))+(((443.0)*x3819))+(((-443.0)*x3829)))))))+(IKabs(((((-0.022)*x3832))+(((0.12)*x3830))+(((-1.0)*x3821*x3825))+(((-0.12)*x3819))+(((0.886)*x3824))+(((-4.0)*x3822))+(((-4.0)*x3820))+(((-0.022)*x3828))+(((0.12)*x3829))+(((-0.886)*x3823))+(((-1.0)*x3818*x3825))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(cj4,-1);
if(!x3866.valid){
continue;
}
IkReal x3837=x3866.value;
IkReal x3838=cj4*cj4;
IkReal x3839=((420.0)*cj4);
IkReal x3840=((0.002)*x3837);
IkReal x3841=(cj4*pz);
IkReal x3842=(cj4*r21);
IkReal x3843=(cj5*sj4);
IkReal x3844=(r22*sj4);
IkReal x3845=(cj4*r20);
IkReal x3846=(sj4*sj5);
IkReal x3847=((33.0)*x3844);
IkReal x3848=((6000.0)*x3841);
IkReal x3849=((11.0)*x3844);
IkReal x3850=((2000.0)*x3841);
IkReal x3851=(r22*x3838);
IkReal x3852=((1329.0)*x3851);
IkReal x3853=((180.0)*sj5*x3842);
IkReal x3854=((180.0)*cj5*x3845);
IkReal x3855=((443.0)*x3851);
IkReal x3856=((60.0)*sj5*x3842);
IkReal x3857=((60.0)*cj5*x3845);
IkReal x3858=((1329.0)*x3842*x3843);
IkReal x3859=((1329.0)*x3845*x3846);
IkReal x3860=((443.0)*x3842*x3843);
IkReal x3861=((443.0)*x3845*x3846);
IkReal x3862=(x3856+x3855+x3849);
IkReal x3863=(x3852+x3853+x3847);
IkReal x3864=(x3861+x3860+x3857+x3850);
IkReal x3865=(x3854+x3858+x3859+x3848);
op[0]=(x3840*(((((-1.0)*x3864))+x3862+(((-1.0)*x3839)))));
op[1]=0;
op[2]=(x3840*(((((-1.0)*x3865))+x3863+(((-1.0)*x3839)))));
op[3]=0;
op[4]=(x3840*(((((-1.0)*x3865))+x3863+x3839)));
op[5]=0;
op[6]=(x3840*(((((-1.0)*x3864))+x3862+x3839)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3867=((0.066)*cj0);
IkReal x3868=(r00*sj5);
IkReal x3869=(cj0*px);
IkReal x3870=(cj5*r01);
IkReal x3871=(py*sj0);
IkReal x3872=(cj5*r20);
IkReal x3873=(cj4*r22);
IkReal x3874=((0.022)*cj0);
IkReal x3875=(r21*sj5);
IkReal x3876=((0.886)*x3875);
IkReal x3877=((4.0)*x3869);
IkReal x3878=((0.886)*x3872);
IkReal x3879=((0.12)*x3873);
IkReal x3880=((4.0)*x3871);
IkReal x3881=(r10*sj0*sj5);
IkReal x3882=(cj5*r21*sj4);
IkReal x3883=(cj5*r11*sj0);
IkReal x3884=(r20*sj4*sj5);
IkReal x3885=((0.12)*x3884);
IkReal x3886=((0.12)*x3882);
IkReal x3887=(x3868*x3874);
IkReal x3888=((0.022)*x3883);
IkReal x3889=(x3870*x3874);
IkReal x3890=((0.022)*x3881);
IkReal x3891=(x3876+x3885+x3886);
IkReal x3892=(x3878+x3879+x3877+x3890+x3887+x3880+x3889+x3888);
IkReal x3893=((((-0.066)*x3883))+(((-0.066)*x3881))+(((-1.0)*x3867*x3870))+(((-1.0)*x3867*x3868))+(((-0.36)*x3873))+(((-12.0)*x3869))+(((0.36)*x3884))+(((0.36)*x3882))+(((2.658)*x3875))+(((-12.0)*x3871))+(((-2.658)*x3872)));
j1evalpoly[0]=(((x3893*(htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3891+(((-1.0)*x3892))))))+(((-1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((-3.36)*(htj1*htj1*htj1)))+(((-1.68)*htj1))+x3891+(((-1.0)*x3892))+((x3893*(htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3894=((1.0)*sj5);
IkReal x3895=(r20*sj4);
IkReal x3896=(r21*sj1);
IkReal x3897=(cj4*r22);
IkReal x3898=(cj1*r21);
IkReal x3899=((1.0)*cj5);
if( IKabs(((((-1.0)*sj4*x3898*x3899))+((cj5*r20*sj1))+(((-1.0)*x3894*x3896))+(((-1.0)*cj1*x3894*x3895))+((cj1*x3897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x3894*x3895))+((sj5*x3898))+(((-1.0)*sj4*x3896*x3899))+((sj1*x3897))+(((-1.0)*cj1*r20*x3899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x3898*x3899))+((cj5*r20*sj1))+(((-1.0)*x3894*x3896))+(((-1.0)*cj1*x3894*x3895))+((cj1*x3897))))+IKsqr(((((-1.0)*sj1*x3894*x3895))+((sj5*x3898))+(((-1.0)*sj4*x3896*x3899))+((sj1*x3897))+(((-1.0)*cj1*r20*x3899))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x3898*x3899))+((cj5*r20*sj1))+(((-1.0)*x3894*x3896))+(((-1.0)*cj1*x3894*x3895))+((cj1*x3897))), ((((-1.0)*sj1*x3894*x3895))+((sj5*x3898))+(((-1.0)*sj4*x3896*x3899))+((sj1*x3897))+(((-1.0)*cj1*r20*x3899))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3900=IKcos(j2);
IkReal x3901=IKsin(j2);
IkReal x3902=((0.2215)*sj1);
IkReal x3903=(sj0*sj5);
IkReal x3904=(cj5*sj4);
IkReal x3905=((1.0)*cj4);
IkReal x3906=((1.0)*sj1);
IkReal x3907=(cj0*r01);
IkReal x3908=(sj4*sj5);
IkReal x3909=((0.0055)*cj5);
IkReal x3910=(cj0*r00);
IkReal x3911=(r11*sj0);
IkReal x3912=((1.0)*sj5);
IkReal x3913=(cj1*x3900);
IkReal x3914=(cj1*x3901);
IkReal x3915=(sj1*x3900);
IkReal x3916=(x3901*x3906);
evalcond[0]=((((-1.0)*x3916))+((cj5*r20))+(((-1.0)*r21*x3912))+x3913);
evalcond[1]=((((-1.0)*r22*x3905))+x3915+x3914+((r20*x3908))+((r21*x3904)));
evalcond[2]=((((-1.0)*r11*x3903))+(((-1.0)*x3900*x3906))+((cj5*x3910))+((cj5*r10*sj0))+(((-1.0)*x3914))+(((-1.0)*x3907*x3912)));
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(cj4,-1);
if(!x3917.valid){
continue;
}
evalcond[3]=(((x3900*x3902))+(((-0.03)*sj1*x3901))+(((0.2215)*x3914))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x3917.value)))+(((-1.0)*pz))+(((0.03)*x3913)));
evalcond[4]=((((-1.0)*x3916))+((r10*sj4*x3903))+((x3904*x3911))+((x3904*x3907))+x3913+((x3908*x3910))+(((-1.0)*r12*sj0*x3905))+(((-1.0)*cj0*r02*x3905)));
evalcond[5]=((((-1.0)*x3901*x3902))+(((0.2215)*x3913))+(((-0.0055)*sj5*x3910))+(((-1.0)*x3909*x3911))+(((-1.0)*x3907*x3909))+(((-0.03)*x3914))+(((-0.03)*x3915))+(((-0.0055)*r10*x3903))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3918=((1.0)*cj5);
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x3918)))),IkReal((((r01*sj5))+(((-1.0)*r00*x3918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),-1);
if(!x3920.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3919.value)+(((1.5707963267949)*(x3920.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3921=IKsin(j0);
IkReal x3922=IKcos(j0);
IkReal x3923=(cj5*r01);
IkReal x3924=((1.0)*sj4);
IkReal x3925=(cj4*r10);
IkReal x3926=((1.0)*cj4);
IkReal x3927=(r00*sj5);
IkReal x3928=(cj5*r11);
IkReal x3929=((0.0055)*x3921);
IkReal x3930=(sj5*x3922);
IkReal x3931=(cj4*x3922);
IkReal x3932=(sj4*x3921);
IkReal x3933=(r02*x3921);
IkReal x3934=(cj5*x3922);
IkReal x3935=((1.0)*x3921);
evalcond[0]=((((-1.0)*r01*sj5*x3935))+((cj5*r00*x3921))+(((-1.0)*r10*x3934))+((r11*x3930)));
evalcond[1]=((((-1.0)*px*x3935))+(((-1.0)*x3927*x3929))+((py*x3922))+(((0.0055)*r10*x3930))+(((-1.0)*x3923*x3929))+(((0.0055)*x3922*x3928)));
evalcond[2]=(((x3923*x3932))+(((-1.0)*r10*x3924*x3930))+(((-1.0)*x3926*x3933))+((x3927*x3932))+((r12*x3931))+(((-1.0)*x3922*x3924*x3928)));
evalcond[3]=((-1.0)+(((-1.0)*x3921*x3926*x3927))+((r12*sj4*x3922))+((x3928*x3931))+(((-1.0)*x3924*x3933))+(((-1.0)*x3921*x3923*x3926))+((x3925*x3930)));
evalcond[4]=((((-1.0)*r12*x3921*x3924))+(((-1.0)*r02*x3922*x3924))+(((-1.0)*x3922*x3926*x3927))+(((-1.0)*x3921*x3926*x3928))+(((-1.0)*x3922*x3923*x3926))+(((-1.0)*sj5*x3925*x3935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
CheckValue<IkReal> x3956=IKPowWithIntegerCheck(cj4,-1);
if(!x3956.valid){
continue;
}
IkReal x3936=x3956.value;
IkReal x3937=((0.066)*cj0);
IkReal x3938=(r00*sj5);
IkReal x3939=(cj4*r22);
IkReal x3940=(cj0*px);
IkReal x3941=(cj5*r01);
IkReal x3942=(py*sj0);
IkReal x3943=(cj5*r20);
IkReal x3944=(r21*sj5);
IkReal x3945=((0.022)*cj0);
IkReal x3946=((180.0)*x3944);
IkReal x3947=((1329.0)*x3939);
IkReal x3948=(r10*sj0*sj5);
IkReal x3949=(cj5*r21*sj4);
IkReal x3950=(r20*sj4*sj5);
IkReal x3951=(r22*sj4*x3936);
IkReal x3952=(cj5*r11*sj0);
IkReal x3953=((33.0)*x3951);
IkReal x3954=(x3946+x3947+x3953);
IkReal x3955=((((180.0)*x3943))+(((1329.0)*x3949))+(((1329.0)*x3950))+(((6000.0)*pz)));
j1eval[0]=((6.72)+(((0.002)*(IKabs(((-420.0)+x3954+(((-1.0)*x3955)))))))+(((2.0)*(IKabs(((((2.658)*x3944))+(((0.36)*x3950))+(((-0.066)*x3948))+(((-0.066)*x3952))+(((-1.0)*x3937*x3941))+(((-1.0)*x3937*x3938))+(((-0.36)*x3939))+(((-2.658)*x3943))+(((0.36)*x3949))+(((-12.0)*x3942))+(((-12.0)*x3940)))))))+(IKabs(((((-0.022)*x3948))+(((-0.022)*x3952))+(((-0.886)*x3943))+(((0.12)*x3950))+(((-1.0)*x3941*x3945))+(((0.12)*x3949))+(((-4.0)*x3940))+(((-4.0)*x3942))+(((0.886)*x3944))+(((-1.0)*x3938*x3945))+(((-0.12)*x3939)))))+(((0.002)*(IKabs(((420.0)+x3954+(((-1.0)*x3955)))))))+(((0.002)*(IKabs(((-420.0)+(((11.0)*x3951))+(((-443.0)*x3949))+(((443.0)*x3939))+(((-60.0)*x3943))+(((60.0)*x3944))+(((-2000.0)*pz))+(((-443.0)*x3950))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3986=IKPowWithIntegerCheck(cj4,-1);
if(!x3986.valid){
continue;
}
IkReal x3957=x3986.value;
IkReal x3958=cj4*cj4;
IkReal x3959=((420.0)*cj4);
IkReal x3960=((0.002)*x3957);
IkReal x3961=(cj4*pz);
IkReal x3962=(cj4*r21);
IkReal x3963=(cj5*sj4);
IkReal x3964=(r22*sj4);
IkReal x3965=(cj4*r20);
IkReal x3966=(sj4*sj5);
IkReal x3967=((33.0)*x3964);
IkReal x3968=((6000.0)*x3961);
IkReal x3969=((11.0)*x3964);
IkReal x3970=((2000.0)*x3961);
IkReal x3971=(r22*x3958);
IkReal x3972=((1329.0)*x3971);
IkReal x3973=((180.0)*sj5*x3962);
IkReal x3974=((180.0)*cj5*x3965);
IkReal x3975=((443.0)*x3971);
IkReal x3976=((60.0)*sj5*x3962);
IkReal x3977=((60.0)*cj5*x3965);
IkReal x3978=((1329.0)*x3962*x3963);
IkReal x3979=((1329.0)*x3965*x3966);
IkReal x3980=((443.0)*x3962*x3963);
IkReal x3981=((443.0)*x3965*x3966);
IkReal x3982=(x3969+x3975+x3976);
IkReal x3983=(x3967+x3973+x3972);
IkReal x3984=(x3980+x3981+x3970+x3977);
IkReal x3985=(x3968+x3974+x3979+x3978);
op[0]=(x3960*((x3982+(((-1.0)*x3959))+(((-1.0)*x3984)))));
op[1]=0;
op[2]=(x3960*((x3983+(((-1.0)*x3959))+(((-1.0)*x3985)))));
op[3]=0;
op[4]=(x3960*((x3983+x3959+(((-1.0)*x3985)))));
op[5]=0;
op[6]=(x3960*((x3982+x3959+(((-1.0)*x3984)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3987=((0.066)*cj0);
IkReal x3988=(r00*sj5);
IkReal x3989=(cj0*px);
IkReal x3990=(cj5*r01);
IkReal x3991=(py*sj0);
IkReal x3992=(cj5*r20);
IkReal x3993=(cj4*r22);
IkReal x3994=((0.022)*cj0);
IkReal x3995=(r21*sj5);
IkReal x3996=((0.886)*x3995);
IkReal x3997=((4.0)*x3989);
IkReal x3998=((0.886)*x3992);
IkReal x3999=((0.12)*x3993);
IkReal x4000=((4.0)*x3991);
IkReal x4001=(r10*sj0*sj5);
IkReal x4002=(cj5*r21*sj4);
IkReal x4003=(cj5*r11*sj0);
IkReal x4004=(r20*sj4*sj5);
IkReal x4005=((0.12)*x4004);
IkReal x4006=((0.12)*x4002);
IkReal x4007=(x3988*x3994);
IkReal x4008=((0.022)*x4003);
IkReal x4009=(x3990*x3994);
IkReal x4010=((0.022)*x4001);
IkReal x4011=(x4005+x4006+x3996);
IkReal x4012=(x4008+x4009+x4000+x4007+x4010+x3999+x3998+x3997);
IkReal x4013=((((-0.36)*x3993))+(((-0.066)*x4003))+(((-0.066)*x4001))+(((2.658)*x3995))+(((-1.0)*x3987*x3988))+(((-2.658)*x3992))+(((-12.0)*x3991))+(((0.36)*x4004))+(((0.36)*x4002))+(((-1.0)*x3987*x3990))+(((-12.0)*x3989)));
j1evalpoly[0]=((((-1.68)*(htj1*htj1*htj1*htj1*htj1)))+(((-3.36)*(htj1*htj1*htj1)))+(((-1.68)*htj1))+x4011+(((-1.0)*x4012))+((x4013*(htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x4011+(((-1.0)*x4012))))))+((x4013*(htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4014=((1.0)*sj5);
IkReal x4015=(r20*sj4);
IkReal x4016=(r21*sj1);
IkReal x4017=(cj4*r22);
IkReal x4018=(cj1*r21);
IkReal x4019=((1.0)*cj5);
if( IKabs(((((-1.0)*sj4*x4018*x4019))+(((-1.0)*cj1*x4014*x4015))+((cj5*r20*sj1))+((cj1*x4017))+(((-1.0)*x4014*x4016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4017))+(((-1.0)*cj1*r20*x4019))+(((-1.0)*sj4*x4016*x4019))+(((-1.0)*sj1*x4014*x4015))+((sj5*x4018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x4018*x4019))+(((-1.0)*cj1*x4014*x4015))+((cj5*r20*sj1))+((cj1*x4017))+(((-1.0)*x4014*x4016))))+IKsqr((((sj1*x4017))+(((-1.0)*cj1*r20*x4019))+(((-1.0)*sj4*x4016*x4019))+(((-1.0)*sj1*x4014*x4015))+((sj5*x4018))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x4018*x4019))+(((-1.0)*cj1*x4014*x4015))+((cj5*r20*sj1))+((cj1*x4017))+(((-1.0)*x4014*x4016))), (((sj1*x4017))+(((-1.0)*cj1*r20*x4019))+(((-1.0)*sj4*x4016*x4019))+(((-1.0)*sj1*x4014*x4015))+((sj5*x4018))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4020=IKcos(j2);
IkReal x4021=IKsin(j2);
IkReal x4022=((0.2215)*sj1);
IkReal x4023=(sj0*sj5);
IkReal x4024=(cj5*sj4);
IkReal x4025=((1.0)*cj4);
IkReal x4026=((1.0)*sj1);
IkReal x4027=(cj0*r01);
IkReal x4028=(sj4*sj5);
IkReal x4029=((0.0055)*cj5);
IkReal x4030=(cj0*r00);
IkReal x4031=(r11*sj0);
IkReal x4032=((1.0)*sj5);
IkReal x4033=(cj1*x4020);
IkReal x4034=(cj1*x4021);
IkReal x4035=(sj1*x4020);
IkReal x4036=(x4021*x4026);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x4032))+x4033+(((-1.0)*x4036)));
evalcond[1]=((((-1.0)*r22*x4025))+((r20*x4028))+((r21*x4024))+x4035+x4034);
evalcond[2]=(((cj5*r10*sj0))+(((-1.0)*r11*x4023))+(((-1.0)*x4027*x4032))+(((-1.0)*x4034))+((cj5*x4030))+(((-1.0)*x4020*x4026)));
CheckValue<IkReal> x4037=IKPowWithIntegerCheck(cj4,-1);
if(!x4037.valid){
continue;
}
evalcond[3]=((((0.2215)*x4034))+((x4020*x4022))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x4037.value)))+(((0.03)*x4033))+(((-1.0)*pz))+(((-0.03)*sj1*x4021)));
evalcond[4]=(((x4028*x4030))+((r10*sj4*x4023))+x4033+((x4024*x4027))+(((-1.0)*x4036))+(((-1.0)*cj0*r02*x4025))+((x4024*x4031))+(((-1.0)*r12*sj0*x4025)));
evalcond[5]=((((0.2215)*x4033))+(((-0.0055)*sj5*x4030))+(((-0.03)*x4034))+(((-0.03)*x4035))+(((-1.0)*x4027*x4029))+(((-1.0)*x4029*x4031))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*x4021*x4022))+(((-1.0)*cj0*px))+(((-0.0055)*r10*x4023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4038=((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))));
IkReal x4046 = x4038;
if(IKabs(x4046)==0){
continue;
}
IkReal x4039=pow(x4046,-0.5);
if((x4038) < -0.00001)
continue;
IkReal x4040=IKabs(IKsqrt(x4038));
IkReal x4041=((181.818181818182)*x4039);
CheckValue<IkReal> x4047=IKPowWithIntegerCheck(x4040,-1);
if(!x4047.valid){
continue;
}
IkReal x4042=x4047.value;
IkReal x4043=(r22*x4042);
if((((1.0)+(((-1.0)*(x4043*x4043))))) < -0.00001)
continue;
IkReal x4044=IKsqrt(((1.0)+(((-1.0)*(x4043*x4043)))));
IkReal x4045=(x4041*x4044);
if( (x4043) < -1-IKFAST_SINCOS_THRESH || (x4043) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4048 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4048.valid){
continue;
}
IkReal gconst0=((IKasin(x4043))+(((-1.0)*(x4048.value))));
IkReal gconst1=(((rxp1_2*x4041*x4043))+((rxp0_2*x4045)));
IkReal gconst2=((((-1.0)*rxp0_2*x4041*x4043))+((rxp1_2*x4045)));
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
if((((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(IKabs(IKsqrt(((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2)))))),-1);
if(!x4050.valid){
continue;
}
if( ((r22*(x4050.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4050.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4049.value)+(((-1.0)*(IKasin((r22*(x4050.value))))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4051=((0.0055)*cj3);
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*rxp0_2))+((r22*(((((-0.0055)*(gconst2*gconst2)))+(((-0.0055)*(gconst1*gconst1)))))))+((gconst1*rxp1_2)))),-1);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal((((gconst2*r11*x4051))+((cj3*py))+((gconst1*r10*x4051)))),IkReal((((gconst2*r01*x4051))+((cj3*px))+((gconst1*r00*x4051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4052.value)))+(x4053.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4054=IKsin(j0);
IkReal x4055=IKcos(j0);
IkReal x4056=((1.0)*gconst2);
IkReal x4057=(cj4*gconst1);
IkReal x4058=(gconst1*sj4);
IkReal x4059=((0.0055)*gconst2);
IkReal x4060=((0.0055)*gconst1);
IkReal x4061=(r10*x4055);
IkReal x4062=(r00*x4054);
IkReal x4063=((1.0)*x4054);
IkReal x4064=(cj4*x4055);
IkReal x4065=(r11*x4055);
IkReal x4066=(r01*x4054);
evalcond[0]=((((-1.0)*gconst1*r01*x4063))+((gconst1*x4065))+cj3+((gconst2*x4062))+(((-1.0)*x4056*x4061)));
evalcond[1]=((((-1.0)*x4060*x4062))+((x4060*x4061))+((x4059*x4065))+(((-1.0)*x4059*x4066))+(((-1.0)*px*x4063))+((py*x4055)));
evalcond[2]=((((-1.0)*sj4*x4056*x4065))+(((-1.0)*cj4*r02*x4063))+((gconst2*sj4*x4066))+(((-1.0)*x4058*x4061))+((r12*x4064))+((x4058*x4062)));
evalcond[3]=((((-1.0)*cj4*x4056*x4066))+sj3+((gconst2*r11*x4064))+((r12*sj4*x4055))+(((-1.0)*r02*sj4*x4063))+((x4057*x4061))+(((-1.0)*x4057*x4062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4067=(gconst2*r20);
IkReal x4068=((1.0)*gconst1*r21);
IkReal x4069=(sj3+x4067+(((-1.0)*x4068)));
IkReal x4070=((((-1.0)*sj3))+x4067+(((-1.0)*x4068)));
IkReal x4071=x4038;
IkReal x4072=(((gconst2*r21*sj4))+((gconst1*r20*sj4))+(((-1.0)*cj4*r22)));
IkReal x4081 = x4071;
if(IKabs(x4081)==0){
continue;
}
IkReal x4073=pow(x4081,-0.5);
if((x4071) < -0.00001)
continue;
IkReal x4074=IKabs(IKsqrt(x4071));
IkReal x4075=((181.818181818182)*x4073);
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(x4074,-1);
if(!x4082.valid){
continue;
}
IkReal x4076=x4082.value;
IkReal x4077=(r22*x4076);
if( (x4077) < -1-IKFAST_SINCOS_THRESH || (x4077) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
IkReal x4078=((IKasin(x4077))+(((-1.0)*(x4083.value))));
if((((1.0)+(((-1.0)*(x4077*x4077))))) < -0.00001)
continue;
IkReal x4079=IKsqrt(((1.0)+(((-1.0)*(x4077*x4077)))));
IkReal x4080=(x4075*x4079);
sj5=gconst1;
cj5=gconst2;
j5=x4078;
IkReal gconst0=x4078;
IkReal gconst1=(((rxp0_2*x4080))+((rxp1_2*x4075*x4077)));
IkReal gconst2=((((-1.0)*rxp0_2*x4075*x4077))+((rxp1_2*x4080)));
IkReal gconst222=x4070;
IkReal gconst223=x4069;
IkReal gconst224=x4072;
IkReal gconst225=x4072;
IkReal gconst226=x4070;
IkReal gconst227=x4069;
IkReal gconst228=x4072;
IkReal gconst229=x4072;
IkReal gconst230=x4069;
IkReal gconst231=x4070;
IkReal gconst232=x4072;
IkReal gconst233=x4072;
IkReal gconst234=x4069;
IkReal gconst235=x4070;
IkReal gconst236=x4072;
IkReal gconst237=x4072;
IkReal x4084=sj3*sj3;
IkReal x4085=gconst2*gconst2;
IkReal x4086=sj4*sj4;
IkReal x4087=r20*r20;
IkReal x4088=gconst1*gconst1;
IkReal x4089=r21*r21;
IkReal x4090=cj4*cj4;
IkReal x4091=r22*r22;
IkReal x4092=(gconst1*r20);
IkReal x4093=(gconst2*r21);
IkReal x4094=(cj4*r22*sj4);
IkReal x4095=((16.0)*x4084);
IkReal x4096=((24.0)*x4084);
IkReal x4097=((8.0)*x4093);
IkReal x4098=((4.0)*x4084);
IkReal x4099=(x4086*x4093);
IkReal x4100=(x4090*x4091);
IkReal x4101=(x4085*x4087);
IkReal x4102=(x4084*x4092);
IkReal x4103=(x4088*x4089);
IkReal x4104=((48.0)*x4102);
IkReal x4105=(x4086*x4087*x4088);
IkReal x4106=(x4085*x4086*x4089);
j1eval[0]=((((0.5)*(IKabs(((((-1.0)*x4098*x4105))+(((-1.0)*x4098*x4106))+(((-1.0)*x4098*x4100))+(((-4.0)*x4101))+(((-4.0)*x4103))+(((8.0)*x4094*x4102))+x4098+((x4084*x4094*x4097))+(((-1.0)*x4086*x4097*x4102))+((x4092*x4097)))))))+(IKabs(((((-1.0)*x4095*x4105))+(((-1.0)*x4095*x4106))+(((-1.0)*x4095*x4100))+(((32.0)*x4084*x4093*x4094))+(((-32.0)*x4099*x4102))+x4095+(((32.0)*x4094*x4102))+(((32.0)*x4092*x4093))+(((-16.0)*x4101))+(((-16.0)*x4103)))))+(((0.5)*(IKabs(((((-1.0)*x4096*x4105))+(((-1.0)*x4096*x4106))+(((-1.0)*x4096*x4100))+(((-24.0)*x4101))+(((-24.0)*x4103))+(((48.0)*x4084*x4093*x4094))+(((48.0)*x4092*x4093))+x4096+((x4094*x4104))+(((-1.0)*x4099*x4104))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x4107=sj3*sj3;
IkReal x4108=(gconst225*gconst230);
IkReal x4109=((1.0)*gconst237);
IkReal x4110=(gconst227*gconst236);
IkReal x4111=(gconst231*gconst232);
IkReal x4112=((2.0)*gconst235);
IkReal x4113=(gconst222*gconst228);
IkReal x4114=(gconst223*gconst232);
IkReal x4115=((2.0)*gconst234);
IkReal x4116=(gconst230*gconst233);
IkReal x4117=(gconst222*gconst225);
IkReal x4118=(gconst235*gconst236);
IkReal x4119=(gconst226*gconst237);
IkReal x4120=(gconst231*sj3);
IkReal x4121=(gconst226*gconst229);
IkReal x4122=((2.0)*gconst223);
IkReal x4123=(gconst222*gconst233);
IkReal x4124=(gconst229*gconst234);
IkReal x4125=((4.0)*gconst235);
IkReal x4126=((2.0)*gconst226);
IkReal x4127=((2.0)*gconst227);
IkReal x4128=(gconst228*gconst230);
IkReal x4129=((2.0)*gconst231);
IkReal x4130=(gconst224*gconst231);
IkReal x4131=(gconst228*gconst231);
IkReal x4132=(gconst223*gconst224);
IkReal x4133=(gconst227*gconst228);
IkReal x4134=(gconst234*gconst237);
IkReal x4135=((2.0)*gconst230);
IkReal x4136=((4.0)*gconst223);
IkReal x4137=((8.0)*sj3);
IkReal x4138=((4.0)*gconst226);
IkReal x4139=((2.0)*gconst222);
IkReal x4140=((16.0)*sj3);
IkReal x4141=(gconst228*gconst235);
IkReal x4142=((4.0)*gconst231);
IkReal x4143=((4.0)*gconst227);
IkReal x4144=((4.0)*gconst234);
IkReal x4145=(gconst234*x4142);
IkReal x4146=(gconst234*x4136);
IkReal x4147=(gconst231*x4138);
IkReal x4148=((16.0)*x4120);
IkReal x4149=(gconst234*x4140);
IkReal x4150=(gconst223*x4140);
IkReal x4151=(gconst226*x4136);
IkReal x4152=(gconst226*x4140);
IkReal x4153=(gconst223*x4137);
IkReal x4154=((1.0)*x4141);
IkReal x4155=((32.0)*x4107);
IkReal x4156=((8.0)*gconst236*x4120);
IkReal x4157=(gconst233*gconst234*x4137);
IkReal x4158=(gconst225*gconst234*x4137);
IkReal x4159=(gconst226*gconst233*x4137);
IkReal x4160=(gconst236*x4153);
IkReal x4161=((8.0)*gconst228*x4120);
IkReal x4162=(gconst228*x4153);
IkReal x4163=(gconst225*gconst226*x4137);
IkReal x4164=((16.0)*gconst228*x4107);
IkReal x4165=((16.0)*gconst236*x4107);
IkReal x4166=(x4147+x4146);
IkReal x4167=(x4150+x4151);
IkReal x4168=(x4149+x4145);
IkReal x4169=(x4163+x4162);
IkReal x4170=(x4156+x4157);
IkReal x4171=(x4161+x4160+x4158+x4159);
op[0]=((((-1.0)*x4111*x4118))+((x4111*x4134))+((x4116*x4118))+(((-1.0)*gconst234*x4109*x4116))+(((-1.0)*x4145)));
op[1]=(((x4112*x4116))+((gconst231*gconst237*x4115))+(((-1.0)*x4170))+(((-1.0)*gconst231*gconst236*x4112))+(((-1.0)*x4111*x4112))+(((-1.0)*x4111*x4115))+((gconst230*gconst237*x4115))+((x4115*x4116))+(((-1.0)*gconst230*gconst236*x4112)));
op[2]=((((-1.0)*x4110*x4111))+(((-1.0)*gconst230*x4144))+((x4108*x4118))+(((-1.0)*gconst234*x4108*x4109))+(((-1.0)*x4114*x4118))+(((-1.0)*x4116*x4124))+(((-1.0)*x4118*x4130))+(((-1.0)*x4166))+((x4130*x4134))+(((-1.0)*gconst234*x4109*x4123))+((x4116*x4141))+x4168+(((-1.0)*x4111*x4154))+((x4118*x4123))+(((-1.0)*gconst230*x4125))+(((-1.0)*x4148))+((x4111*x4124))+((x4111*x4119))+((x4110*x4116))+(((-1.0)*gconst226*x4109*x4116))+(((-1.0)*gconst233*x4165))+((x4114*x4134))+(((-1.0)*gconst231*x4125)));
op[3]=((((-1.0)*x4112*x4130))+(((-1.0)*x4112*x4131))+((x4108*x4112))+((x4108*x4115))+(((-1.0)*x4171))+(((-1.0)*x4111*x4127))+(((-1.0)*x4111*x4126))+(((-1.0)*gconst233*x4155))+((gconst223*gconst237*x4115))+((gconst236*x4155))+((x4116*x4127))+((x4116*x4126))+((gconst229*gconst230*x4115))+(((-1.0)*x4110*x4129))+(((-1.0)*x4112*x4114))+(((-1.0)*x4115*x4130))+(((-1.0)*x4112*x4128))+((x4119*x4135))+(((-1.0)*gconst222*gconst236*x4112))+x4170+((x4115*x4123))+((gconst229*gconst231*x4115))+(((-1.0)*x4114*x4115))+(((-1.0)*gconst223*gconst236*x4112))+((x4119*x4129))+((gconst222*gconst237*x4115))+(((-1.0)*x4110*x4135))+((x4112*x4123)));
op[4]=((((-1.0)*gconst226*x4108*x4109))+(((-1.0)*x4110*x4114))+(((-1.0)*gconst230*x4143))+((x4108*x4110))+(((-1.0)*gconst230*x4138))+(((-1.0)*x4116*x4121))+(((-1.0)*x4114*x4154))+(((-1.0)*gconst222*x4125))+(((-1.0)*x4118*x4132))+(((-1.0)*x4123*x4124))+(((-1.0)*x4167))+(((-1.0)*x4168))+(((-1.0)*x4108*x4124))+((gconst233*gconst235*x4113))+(((-1.0)*gconst227*x4142))+(((-1.0)*gconst234*x4109*x4117))+((x4119*x4130))+((x4132*x4134))+((x4114*x4124))+((x4117*x4118))+(((-1.0)*x4110*x4130))+((x4114*x4119))+x4166+x4152+x4148+(((-1.0)*x4111*x4133))+(((-1.0)*gconst223*x4125))+(((64.0)*x4107))+((x4108*x4141))+((x4111*x4121))+((x4116*x4133))+(((-1.0)*gconst222*x4144))+((x4110*x4123))+(((-1.0)*gconst226*x4109*x4123))+(((-1.0)*gconst225*x4165))+(((-1.0)*x4130*x4154))+((x4124*x4130))+(((-1.0)*gconst233*x4164)));
op[5]=(((x4112*x4117))+((x4108*x4127))+((x4108*x4126))+(((-1.0)*x4112*x4132))+(((-1.0)*x4126*x4130))+(((-1.0)*x4127*x4130))+(((-1.0)*x4127*x4131))+((x4121*x4135))+((gconst223*gconst229*x4115))+(((-1.0)*x4169))+(((-1.0)*x4110*x4122))+(((-1.0)*gconst223*gconst228*x4112))+(((-1.0)*x4112*x4113))+(((-1.0)*x4115*x4132))+(((-1.0)*gconst225*x4155))+((x4119*x4139))+((gconst228*x4155))+x4171+((x4115*x4117))+((x4121*x4129))+(((-1.0)*x4127*x4128))+((x4123*x4127))+((x4123*x4126))+(((-1.0)*x4114*x4126))+(((-1.0)*x4114*x4127))+((gconst222*gconst229*x4115))+((x4119*x4122))+(((-1.0)*x4110*x4139)));
op[6]=((((-1.0)*x4132*x4154))+((x4121*x4130))+(((-1.0)*x4166))+(((-1.0)*x4117*x4124))+(((-1.0)*gconst227*x4136))+((gconst227*gconst233*x4113))+(((-1.0)*x4108*x4121))+(((-1.0)*x4121*x4123))+((x4119*x4132))+((x4114*x4121))+(((-1.0)*x4110*x4132))+((x4108*x4133))+x4167+(((-1.0)*gconst222*x4138))+(((-1.0)*x4114*x4133))+(((-1.0)*gconst222*x4143))+(((-1.0)*x4152))+((x4110*x4117))+((gconst225*gconst235*x4113))+(((-1.0)*gconst226*x4109*x4117))+(((-1.0)*gconst225*x4164))+((x4124*x4132))+(((-1.0)*x4130*x4133)));
op[7]=(((x4121*x4139))+(((-1.0)*gconst224*gconst227*x4122))+(((-1.0)*x4122*x4133))+(((-1.0)*x4113*x4127))+(((-1.0)*gconst224*gconst226*x4122))+((x4117*x4127))+((x4117*x4126))+x4169+((x4121*x4122)));
op[8]=(((gconst225*gconst227*x4113))+((x4121*x4132))+(((-1.0)*x4117*x4121))+(((-1.0)*x4132*x4133))+(((-1.0)*x4151)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4172=x4038;
IkReal x4181 = x4172;
if(IKabs(x4181)==0){
continue;
}
IkReal x4173=pow(x4181,-0.5);
if((x4172) < -0.00001)
continue;
IkReal x4174=IKabs(IKsqrt(x4172));
IkReal x4175=((181.818181818182)*x4173);
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(x4174,-1);
if(!x4182.valid){
continue;
}
IkReal x4176=x4182.value;
IkReal x4177=(r22*x4176);
if( (x4177) < -1-IKFAST_SINCOS_THRESH || (x4177) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
IkReal x4178=((IKasin(x4177))+(((-1.0)*(x4183.value))));
if((((1.0)+(((-1.0)*(x4177*x4177))))) < -0.00001)
continue;
IkReal x4179=IKsqrt(((1.0)+(((-1.0)*(x4177*x4177)))));
IkReal x4180=(x4175*x4179);
sj5=gconst1;
cj5=gconst2;
j5=x4178;
IkReal gconst0=x4178;
IkReal gconst1=(((rxp0_2*x4180))+((rxp1_2*x4175*x4177)));
IkReal gconst2=(((rxp1_2*x4180))+(((-1.0)*rxp0_2*x4175*x4177)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4184=x4038;
IkReal x4193 = x4184;
if(IKabs(x4193)==0){
continue;
}
IkReal x4185=pow(x4193,-0.5);
if((x4184) < -0.00001)
continue;
IkReal x4186=IKabs(IKsqrt(x4184));
IkReal x4187=((181.818181818182)*x4185);
CheckValue<IkReal> x4194=IKPowWithIntegerCheck(x4186,-1);
if(!x4194.valid){
continue;
}
IkReal x4188=x4194.value;
IkReal x4189=(r22*x4188);
if( (x4189) < -1-IKFAST_SINCOS_THRESH || (x4189) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4195 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4195.valid){
continue;
}
IkReal x4190=((IKasin(x4189))+(((-1.0)*(x4195.value))));
if((((1.0)+(((-1.0)*(x4189*x4189))))) < -0.00001)
continue;
IkReal x4191=IKsqrt(((1.0)+(((-1.0)*(x4189*x4189)))));
IkReal x4192=(x4187*x4191);
sj5=gconst1;
cj5=gconst2;
j5=x4190;
IkReal gconst0=x4190;
IkReal gconst1=(((rxp1_2*x4187*x4189))+((rxp0_2*x4192)));
IkReal gconst2=((((-1.0)*rxp0_2*x4187*x4189))+((rxp1_2*x4192)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4196=x4038;
IkReal x4205 = x4196;
if(IKabs(x4205)==0){
continue;
}
IkReal x4197=pow(x4205,-0.5);
if((x4196) < -0.00001)
continue;
IkReal x4198=IKabs(IKsqrt(x4196));
IkReal x4199=((181.818181818182)*x4197);
CheckValue<IkReal> x4206=IKPowWithIntegerCheck(x4198,-1);
if(!x4206.valid){
continue;
}
IkReal x4200=x4206.value;
IkReal x4201=(r22*x4200);
CheckValue<IkReal> x4207 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4207.valid){
continue;
}
if( (x4201) < -1-IKFAST_SINCOS_THRESH || (x4201) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4202=((((-1.0)*(x4207.value)))+(IKasin(x4201)));
if((((1.0)+(((-1.0)*(x4201*x4201))))) < -0.00001)
continue;
IkReal x4203=IKsqrt(((1.0)+(((-1.0)*(x4201*x4201)))));
IkReal x4204=(x4199*x4203);
sj5=gconst1;
cj5=gconst2;
j5=x4202;
IkReal gconst0=x4202;
IkReal gconst1=(((rxp0_2*x4204))+((rxp1_2*x4199*x4201)));
IkReal gconst2=(((rxp1_2*x4204))+(((-1.0)*rxp0_2*x4199*x4201)));
IkReal x4208=(cj3*sj3);
j2eval[0]=x4208;
j2eval[1]=IKsign(x4208);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4209=((1.0)*sj4);
IkReal x4210=(r21*sj1);
IkReal x4211=(cj1*r20);
IkReal x4212=(r20*sj1);
IkReal x4213=(cj4*r22);
IkReal x4214=(cj1*r21);
if( IKabs(((((-1.0)*gconst2*x4212))+((gconst1*x4210))+(((-1.0)*gconst2*x4209*x4214))+(((-1.0)*gconst1*x4209*x4211))+((cj1*x4213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst2*x4209*x4210))+(((-1.0)*gconst1*x4214))+((gconst2*x4211))+((sj1*x4213))+(((-1.0)*gconst1*x4209*x4212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst2*x4212))+((gconst1*x4210))+(((-1.0)*gconst2*x4209*x4214))+(((-1.0)*gconst1*x4209*x4211))+((cj1*x4213))))+IKsqr(((((-1.0)*gconst2*x4209*x4210))+(((-1.0)*gconst1*x4214))+((gconst2*x4211))+((sj1*x4213))+(((-1.0)*gconst1*x4209*x4212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst2*x4212))+((gconst1*x4210))+(((-1.0)*gconst2*x4209*x4214))+(((-1.0)*gconst1*x4209*x4211))+((cj1*x4213))), ((((-1.0)*gconst2*x4209*x4210))+(((-1.0)*gconst1*x4214))+((gconst2*x4211))+((sj1*x4213))+(((-1.0)*gconst1*x4209*x4212))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4215=IKcos(j2);
IkReal x4216=IKsin(j2);
IkReal x4217=((0.2215)*sj1);
IkReal x4218=(gconst1*sj4);
IkReal x4219=(gconst2*sj4);
IkReal x4220=(cj0*r01);
IkReal x4221=((0.0055)*gconst1);
IkReal x4222=(r10*sj0);
IkReal x4223=(cj0*r00);
IkReal x4224=((1.0)*cj4);
IkReal x4225=((1.0)*sj0);
IkReal x4226=(r11*sj0);
IkReal x4227=((0.0055)*gconst2);
IkReal x4228=((1.0)*gconst1);
IkReal x4229=(sj1*x4215);
IkReal x4230=(cj1*x4216);
IkReal x4231=(cj1*x4215);
IkReal x4232=(sj1*x4216);
IkReal x4233=(x4229+x4230);
evalcond[0]=((((-1.0)*x4231))+((gconst2*r20))+x4232+(((-1.0)*r21*x4228)));
evalcond[1]=((((-1.0)*r22*x4224))+x4233+((r20*x4218))+((r21*x4219)));
evalcond[2]=(((gconst2*x4223))+((gconst2*x4222))+x4233+(((-1.0)*gconst1*r11*x4225))+(((-1.0)*x4220*x4228)));
evalcond[3]=((((-0.03)*x4232))+(((0.21)*cj1))+(((0.2215)*x4230))+((x4215*x4217))+(((-1.0)*pz))+(((0.03)*x4231))+(((-1.0)*r21*x4227))+(((-1.0)*r20*x4221)));
evalcond[4]=((((-1.0)*r12*sj0*x4224))+((x4218*x4223))+((x4218*x4222))+(((-1.0)*cj0*r02*x4224))+(((-1.0)*x4232))+x4231+((x4219*x4220))+((x4219*x4226)));
evalcond[5]=((((-1.0)*x4226*x4227))+(((-0.03)*x4230))+(((-0.03)*x4229))+(((0.2215)*x4231))+(((-1.0)*x4216*x4217))+(((-1.0)*x4221*x4222))+(((-1.0)*x4221*x4223))+(((-1.0)*py*x4225))+(((-0.21)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*x4220*x4227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4234=((1.0)*sj4);
IkReal x4235=(gconst1*r20);
IkReal x4236=(cj4*r22);
IkReal x4237=(gconst2*r21);
IkReal x4238=(sj1*x4237);
IkReal x4239=((1.0)*cj1*cj4);
if( IKabs((((cj4*x4238))+((cj4*sj1*x4235))+((cj1*x4236))+((r22*sj1*sj4))+(((-1.0)*cj1*x4234*x4235))+(((-1.0)*cj1*x4234*x4237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x4234*x4235))+(((-1.0)*cj1*r22*x4234))+((sj1*x4236))+(((-1.0)*x4237*x4239))+(((-1.0)*x4234*x4238))+(((-1.0)*x4235*x4239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x4238))+((cj4*sj1*x4235))+((cj1*x4236))+((r22*sj1*sj4))+(((-1.0)*cj1*x4234*x4235))+(((-1.0)*cj1*x4234*x4237))))+IKsqr(((((-1.0)*sj1*x4234*x4235))+(((-1.0)*cj1*r22*x4234))+((sj1*x4236))+(((-1.0)*x4237*x4239))+(((-1.0)*x4234*x4238))+(((-1.0)*x4235*x4239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x4238))+((cj4*sj1*x4235))+((cj1*x4236))+((r22*sj1*sj4))+(((-1.0)*cj1*x4234*x4235))+(((-1.0)*cj1*x4234*x4237))), ((((-1.0)*sj1*x4234*x4235))+(((-1.0)*cj1*r22*x4234))+((sj1*x4236))+(((-1.0)*x4237*x4239))+(((-1.0)*x4234*x4238))+(((-1.0)*x4235*x4239))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4240=IKsin(j2);
IkReal x4241=IKcos(j2);
IkReal x4242=((0.2215)*sj1);
IkReal x4243=(gconst1*r20);
IkReal x4244=((1.0)*sj0);
IkReal x4245=(gconst2*r21);
IkReal x4246=((1.0)*cj4);
IkReal x4247=(gconst2*sj4);
IkReal x4248=(cj0*r01);
IkReal x4249=((0.0055)*gconst1);
IkReal x4250=(r10*sj0);
IkReal x4251=(cj0*r00);
IkReal x4252=(cj0*r02);
IkReal x4253=(gconst2*r11);
IkReal x4254=(gconst1*sj4);
IkReal x4255=((1.0)*sj4);
IkReal x4256=(sj1*x4241);
IkReal x4257=(cj1*x4240);
IkReal x4258=(cj1*x4241);
IkReal x4259=(sj1*x4240);
IkReal x4260=(x4257+x4256);
evalcond[0]=(((sj4*x4245))+((sj4*x4243))+(((-1.0)*r22*x4246))+x4260);
evalcond[1]=((((-1.0)*x4243*x4246))+x4259+(((-1.0)*x4258))+(((-1.0)*r22*x4255))+(((-1.0)*x4245*x4246)));
evalcond[2]=(((x4241*x4242))+(((0.21)*cj1))+(((0.03)*x4258))+(((-1.0)*pz))+(((0.2215)*x4257))+(((-0.03)*x4259))+(((-0.0055)*x4243))+(((-0.0055)*x4245)));
evalcond[3]=(((r11*sj0*x4247))+(((-1.0)*x4246*x4252))+((x4250*x4254))+x4258+((x4251*x4254))+(((-1.0)*x4259))+((x4247*x4248))+(((-1.0)*cj4*r12*x4244)));
evalcond[4]=((((-1.0)*gconst1*x4246*x4251))+(((-1.0)*x4252*x4255))+(((-1.0)*gconst2*x4246*x4248))+(((-1.0)*r12*sj4*x4244))+(((-1.0)*cj4*x4244*x4253))+x4260+(((-1.0)*cj4*gconst1*r10*x4244)));
evalcond[5]=((((-1.0)*x4240*x4242))+(((-0.0055)*sj0*x4253))+(((-1.0)*py*x4244))+(((-0.0055)*gconst2*x4248))+(((-0.21)*sj1))+(((0.2215)*x4258))+(((-0.03)*x4256))+(((-0.03)*x4257))+(((-1.0)*x4249*x4251))+(((-1.0)*x4249*x4250))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4261=((1.0)*sj4);
IkReal x4262=(gconst2*r21);
IkReal x4263=(cj1*r20);
IkReal x4264=(r20*sj1);
IkReal x4265=(cj4*r22);
IkReal x4266=(gconst1*r21);
if( IKabs(((((-1.0)*cj1*x4261*x4262))+((gconst2*x4264))+(((-1.0)*gconst1*x4261*x4263))+(((-1.0)*sj1*x4266))+((cj1*x4265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst1*x4261*x4264))+((sj1*x4265))+(((-1.0)*sj1*x4261*x4262))+(((-1.0)*gconst2*x4263))+((cj1*x4266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x4261*x4262))+((gconst2*x4264))+(((-1.0)*gconst1*x4261*x4263))+(((-1.0)*sj1*x4266))+((cj1*x4265))))+IKsqr(((((-1.0)*gconst1*x4261*x4264))+((sj1*x4265))+(((-1.0)*sj1*x4261*x4262))+(((-1.0)*gconst2*x4263))+((cj1*x4266))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x4261*x4262))+((gconst2*x4264))+(((-1.0)*gconst1*x4261*x4263))+(((-1.0)*sj1*x4266))+((cj1*x4265))), ((((-1.0)*gconst1*x4261*x4264))+((sj1*x4265))+(((-1.0)*sj1*x4261*x4262))+(((-1.0)*gconst2*x4263))+((cj1*x4266))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4267=IKcos(j2);
IkReal x4268=IKsin(j2);
IkReal x4269=(gconst1*sj4);
IkReal x4270=(gconst2*sj4);
IkReal x4271=(cj0*r01);
IkReal x4272=((0.0055)*gconst1);
IkReal x4273=(r10*sj0);
IkReal x4274=(cj0*r00);
IkReal x4275=((1.0)*cj4);
IkReal x4276=((1.0)*sj0);
IkReal x4277=(r11*sj0);
IkReal x4278=((0.0055)*gconst2);
IkReal x4279=((1.0)*gconst1);
IkReal x4280=(cj1*x4267);
IkReal x4281=(sj1*x4268);
IkReal x4282=(sj1*x4267);
IkReal x4283=(cj1*x4268);
IkReal x4284=((1.0)*x4281);
evalcond[0]=((((-1.0)*x4284))+(((-1.0)*r21*x4279))+((gconst2*r20))+x4280);
evalcond[1]=(((r21*x4270))+(((-1.0)*r22*x4275))+x4282+x4283+((r20*x4269)));
evalcond[2]=(((gconst2*x4274))+((gconst2*x4273))+(((-1.0)*gconst1*r11*x4276))+(((-1.0)*x4271*x4279))+(((-1.0)*x4282))+(((-1.0)*x4283)));
evalcond[3]=((((0.2215)*x4282))+(((0.2215)*x4283))+(((0.21)*cj1))+(((-1.0)*r21*x4278))+(((-1.0)*r20*x4272))+(((0.03)*x4280))+(((-1.0)*pz))+(((-0.03)*x4281)));
evalcond[4]=((((-1.0)*x4284))+((x4270*x4271))+((x4270*x4277))+(((-1.0)*cj0*r02*x4275))+x4280+(((-1.0)*r12*sj0*x4275))+((x4269*x4273))+((x4269*x4274)));
evalcond[5]=((((0.2215)*x4280))+(((-0.2215)*x4281))+(((-1.0)*x4271*x4278))+(((-1.0)*py*x4276))+(((-1.0)*x4272*x4274))+(((-1.0)*x4272*x4273))+(((-1.0)*x4277*x4278))+(((-0.03)*x4282))+(((-0.03)*x4283))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4285=(gconst1*r01);
IkReal x4286=((1.0)*gconst2);
IkReal x4287=(gconst1*r11);
IkReal x4288=((1.0)*sj1);
IkReal x4289=(cj0*cj3*sj1);
IkReal x4290=(cj3*sj0*sj1);
IkReal x4291=(cj0*cj1*cj3);
IkReal x4292=(cj4*r21*sj3);
IkReal x4293=(r22*sj3*sj4);
IkReal x4294=(cj1*cj3*sj0);
IkReal x4295=(cj4*gconst1*r20*sj3);
CheckValue<IkReal> x4296=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4296.valid){
continue;
}
CheckValue<IkReal> x4297 = IKatan2WithCheck(IkReal(((((-1.0)*x4288*x4293))+(((-1.0)*x4288*x4295))+((x4285*x4291))+(((-1.0)*sj1*x4286*x4292))+(((-1.0)*r00*x4286*x4291))+(((-1.0)*r10*x4286*x4294))+((x4287*x4294)))),IkReal((((x4285*x4289))+((cj1*x4295))+((cj1*x4293))+(((-1.0)*r00*x4286*x4289))+(((-1.0)*r10*x4286*x4290))+((x4287*x4290))+((cj1*gconst2*x4292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4297.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4296.value)))+(x4297.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4298=IKcos(j2);
IkReal x4299=IKsin(j2);
IkReal x4300=(gconst1*r20);
IkReal x4301=((1.0)*sj0);
IkReal x4302=(gconst2*r21);
IkReal x4303=((1.0)*cj4);
IkReal x4304=((1.0)*cj3);
IkReal x4305=(gconst2*sj4);
IkReal x4306=(cj0*r01);
IkReal x4307=((0.0055)*gconst1);
IkReal x4308=(r10*sj0);
IkReal x4309=(cj0*r00);
IkReal x4310=(cj0*r02);
IkReal x4311=(gconst2*r11);
IkReal x4312=(gconst1*sj4);
IkReal x4313=((1.0)*sj4);
IkReal x4314=((1.0)*gconst1);
IkReal x4315=(cj1*x4298);
IkReal x4316=(sj1*x4299);
IkReal x4317=(sj1*x4298);
IkReal x4318=(cj1*x4299);
evalcond[0]=(((sj3*x4316))+(((-1.0)*r21*x4314))+((gconst2*r20))+(((-1.0)*sj3*x4315)));
evalcond[1]=((((-1.0)*r22*x4303))+((sj4*x4300))+((sj4*x4302))+x4317+x4318);
evalcond[2]=((((-1.0)*r22*x4313))+((cj3*x4315))+(((-1.0)*x4300*x4303))+(((-1.0)*x4304*x4316))+(((-1.0)*x4302*x4303)));
evalcond[3]=((((-1.0)*x4306*x4314))+((gconst2*x4308))+((gconst2*x4309))+(((-1.0)*gconst1*r11*x4301))+((sj3*x4317))+((sj3*x4318)));
evalcond[4]=((((0.2215)*x4318))+(((0.2215)*x4317))+(((0.21)*cj1))+(((-1.0)*pz))+(((0.03)*x4315))+(((-0.03)*x4316))+(((-0.0055)*x4302))+(((-0.0055)*x4300)));
evalcond[5]=(((r11*sj0*x4305))+((x4308*x4312))+(((-1.0)*x4303*x4310))+(((-1.0)*cj4*r12*x4301))+((x4305*x4306))+x4315+(((-1.0)*x4316))+((x4309*x4312)));
evalcond[6]=((((-1.0)*gconst1*x4303*x4309))+(((-1.0)*cj4*gconst1*r10*x4301))+(((-1.0)*x4310*x4313))+(((-1.0)*gconst2*x4303*x4306))+(((-1.0)*cj4*x4301*x4311))+(((-1.0)*r12*sj4*x4301))+(((-1.0)*x4304*x4318))+(((-1.0)*x4304*x4317)));
evalcond[7]=((((-0.2215)*x4316))+(((-0.0055)*sj0*x4311))+(((0.2215)*x4315))+(((-1.0)*py*x4301))+(((-1.0)*x4307*x4309))+(((-1.0)*x4307*x4308))+(((-0.21)*sj1))+(((-0.0055)*gconst2*x4306))+(((-0.03)*x4317))+(((-0.03)*x4318))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4319=(r22*sj1);
IkReal x4320=((1.0)*sj4);
IkReal x4321=(cj3*cj4);
IkReal x4322=(gconst2*r21);
IkReal x4323=(cj1*cj3);
IkReal x4324=(cj1*r22);
IkReal x4325=(gconst1*r20);
IkReal x4326=(cj3*sj1);
IkReal x4327=(cj1*cj4);
IkReal x4328=((1.0)*cj4*sj1);
CheckValue<IkReal> x4329 = IKatan2WithCheck(IkReal((((x4321*x4324))+(((-1.0)*x4325*x4328))+(((-1.0)*x4322*x4328))+(((-1.0)*x4320*x4322*x4323))+(((-1.0)*x4320*x4323*x4325))+(((-1.0)*x4319*x4320)))),IkReal(((((-1.0)*x4320*x4325*x4326))+((x4319*x4321))+((x4325*x4327))+((x4322*x4327))+(((-1.0)*x4320*x4322*x4326))+((sj4*x4324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4329.valid){
continue;
}
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4330.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4329.value)+(((1.5707963267949)*(x4330.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4331=IKcos(j2);
IkReal x4332=IKsin(j2);
IkReal x4333=(gconst1*r20);
IkReal x4334=((1.0)*sj0);
IkReal x4335=(gconst2*r21);
IkReal x4336=((1.0)*cj4);
IkReal x4337=((1.0)*cj3);
IkReal x4338=(gconst2*sj4);
IkReal x4339=(cj0*r01);
IkReal x4340=((0.0055)*gconst1);
IkReal x4341=(r10*sj0);
IkReal x4342=(cj0*r00);
IkReal x4343=(cj0*r02);
IkReal x4344=(gconst2*r11);
IkReal x4345=(gconst1*sj4);
IkReal x4346=((1.0)*sj4);
IkReal x4347=((1.0)*gconst1);
IkReal x4348=(cj1*x4331);
IkReal x4349=(sj1*x4332);
IkReal x4350=(sj1*x4331);
IkReal x4351=(cj1*x4332);
evalcond[0]=(((sj3*x4349))+((gconst2*r20))+(((-1.0)*sj3*x4348))+(((-1.0)*r21*x4347)));
evalcond[1]=((((-1.0)*r22*x4336))+x4350+x4351+((sj4*x4333))+((sj4*x4335)));
evalcond[2]=((((-1.0)*x4333*x4336))+(((-1.0)*r22*x4346))+(((-1.0)*x4337*x4349))+(((-1.0)*x4335*x4336))+((cj3*x4348)));
evalcond[3]=(((sj3*x4350))+((sj3*x4351))+(((-1.0)*x4339*x4347))+((gconst2*x4341))+((gconst2*x4342))+(((-1.0)*gconst1*r11*x4334)));
evalcond[4]=((((0.21)*cj1))+(((0.03)*x4348))+(((-1.0)*pz))+(((-0.0055)*x4335))+(((-0.0055)*x4333))+(((-0.03)*x4349))+(((0.2215)*x4351))+(((0.2215)*x4350)));
evalcond[5]=(((x4338*x4339))+((x4342*x4345))+((x4341*x4345))+(((-1.0)*cj4*r12*x4334))+x4348+((r11*sj0*x4338))+(((-1.0)*x4336*x4343))+(((-1.0)*x4349)));
evalcond[6]=((((-1.0)*cj4*gconst1*r10*x4334))+(((-1.0)*x4343*x4346))+(((-1.0)*gconst1*x4336*x4342))+(((-1.0)*cj4*x4334*x4344))+(((-1.0)*gconst2*x4336*x4339))+(((-1.0)*r12*sj4*x4334))+(((-1.0)*x4337*x4350))+(((-1.0)*x4337*x4351)));
evalcond[7]=((((-0.0055)*gconst2*x4339))+(((-0.0055)*sj0*x4344))+(((-1.0)*py*x4334))+(((-1.0)*x4340*x4341))+(((-1.0)*x4340*x4342))+(((-0.2215)*x4349))+(((-0.03)*x4350))+(((-0.03)*x4351))+(((-0.21)*sj1))+(((0.2215)*x4348))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4352=(cj1*gconst2);
IkReal x4353=(r21*sj1);
IkReal x4354=(cj1*gconst1);
IkReal x4355=(r20*sj1);
IkReal x4356=((1.0)*sj3*sj4);
IkReal x4357=(cj4*r22*sj3);
CheckValue<IkReal> x4358=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4358.valid){
continue;
}
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4354*x4356))+(((-1.0)*gconst2*x4355))+((cj1*x4357))+(((-1.0)*r21*x4352*x4356))+((gconst1*x4353)))),IkReal((((r20*x4352))+(((-1.0)*gconst1*x4355*x4356))+(((-1.0)*r21*x4354))+(((-1.0)*gconst2*x4353*x4356))+((sj1*x4357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4358.value)))+(x4359.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4360=IKcos(j2);
IkReal x4361=IKsin(j2);
IkReal x4362=(gconst1*r20);
IkReal x4363=((1.0)*sj0);
IkReal x4364=(gconst2*r21);
IkReal x4365=((1.0)*cj4);
IkReal x4366=((1.0)*cj3);
IkReal x4367=(gconst2*sj4);
IkReal x4368=(cj0*r01);
IkReal x4369=((0.0055)*gconst1);
IkReal x4370=(r10*sj0);
IkReal x4371=(cj0*r00);
IkReal x4372=(cj0*r02);
IkReal x4373=(gconst2*r11);
IkReal x4374=(gconst1*sj4);
IkReal x4375=((1.0)*sj4);
IkReal x4376=((1.0)*gconst1);
IkReal x4377=(cj1*x4360);
IkReal x4378=(sj1*x4361);
IkReal x4379=(sj1*x4360);
IkReal x4380=(cj1*x4361);
evalcond[0]=((((-1.0)*r21*x4376))+(((-1.0)*sj3*x4377))+((gconst2*r20))+((sj3*x4378)));
evalcond[1]=((((-1.0)*r22*x4365))+x4380+x4379+((sj4*x4364))+((sj4*x4362)));
evalcond[2]=((((-1.0)*x4366*x4378))+(((-1.0)*r22*x4375))+((cj3*x4377))+(((-1.0)*x4362*x4365))+(((-1.0)*x4364*x4365)));
evalcond[3]=((((-1.0)*gconst1*r11*x4363))+((sj3*x4379))+((gconst2*x4371))+((gconst2*x4370))+(((-1.0)*x4368*x4376))+((sj3*x4380)));
evalcond[4]=((((0.21)*cj1))+(((0.2215)*x4379))+(((-0.0055)*x4362))+(((-0.0055)*x4364))+(((-1.0)*pz))+(((0.2215)*x4380))+(((0.03)*x4377))+(((-0.03)*x4378)));
evalcond[5]=(((x4371*x4374))+((x4370*x4374))+(((-1.0)*cj4*r12*x4363))+((r11*sj0*x4367))+(((-1.0)*x4365*x4372))+(((-1.0)*x4378))+x4377+((x4367*x4368)));
evalcond[6]=((((-1.0)*x4366*x4379))+(((-1.0)*cj4*gconst1*r10*x4363))+(((-1.0)*gconst1*x4365*x4371))+(((-1.0)*x4366*x4380))+(((-1.0)*gconst2*x4365*x4368))+(((-1.0)*r12*sj4*x4363))+(((-1.0)*cj4*x4363*x4373))+(((-1.0)*x4372*x4375)));
evalcond[7]=((((-0.2215)*x4378))+(((0.2215)*x4377))+(((-0.0055)*sj0*x4373))+(((-0.03)*x4380))+(((-0.21)*sj1))+(((-1.0)*py*x4363))+(((-1.0)*x4369*x4371))+(((-1.0)*x4369*x4370))+(((-1.0)*cj0*px))+(((-0.03)*x4379))+(((-0.0055)*gconst2*x4368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4381=((181.818181818182)*rxp1_2);
IkReal x4382=((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))));
IkReal x4389 = x4382;
if(IKabs(x4389)==0){
continue;
}
IkReal x4383=pow(x4389,-0.5);
if((x4382) < -0.00001)
continue;
IkReal x4384=IKabs(IKsqrt(x4382));
CheckValue<IkReal> x4390=IKPowWithIntegerCheck(x4384,-1);
if(!x4390.valid){
continue;
}
IkReal x4385=x4390.value;
IkReal x4386=(r22*x4385);
IkReal x4387=((181.818181818182)*rxp0_2*x4383);
if((((1.0)+(((-1.0)*(x4386*x4386))))) < -0.00001)
continue;
IkReal x4388=IKsqrt(((1.0)+(((-1.0)*(x4386*x4386)))));
CheckValue<IkReal> x4391 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x4381),IKFAST_ATAN2_MAGTHRESH);
if(!x4391.valid){
continue;
}
if( (x4386) < -1-IKFAST_SINCOS_THRESH || (x4386) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x4391.value)))+(((-1.0)*(IKasin(x4386)))));
IkReal gconst4=((((-1.0)*x4387*x4388))+((x4381*x4383*x4386)));
IkReal gconst5=((((-1.0)*x4381*x4383*x4388))+(((-1.0)*x4386*x4387)));
if((((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(IKabs(IKsqrt(((((33057.8512396694)*(rxp1_2*rxp1_2)))+(((33057.8512396694)*(rxp0_2*rxp0_2)))))),-1);
if(!x4392.valid){
continue;
}
if( ((r22*(x4392.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4392.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(((181.818181818182)*rxp1_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x4392.value))))+(x4393.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4394=((0.0055)*cj3);
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*rxp0_2))+((r22*(((((-0.0055)*(gconst5*gconst5)))+(((-0.0055)*(gconst4*gconst4)))))))+((gconst4*rxp1_2)))),-1);
if(!x4395.valid){
continue;
}
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal((((gconst5*r11*x4394))+((gconst4*r10*x4394))+((cj3*py)))),IkReal((((gconst4*r00*x4394))+((gconst5*r01*x4394))+((cj3*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4395.value)))+(x4396.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4397=IKsin(j0);
IkReal x4398=IKcos(j0);
IkReal x4399=(gconst5*r01);
IkReal x4400=((1.0)*sj4);
IkReal x4401=((1.0)*r02);
IkReal x4402=(gconst4*x4397);
IkReal x4403=(sj4*x4397);
IkReal x4404=(r11*x4398);
IkReal x4405=((1.0)*x4397);
IkReal x4406=(r12*x4398);
IkReal x4407=(gconst4*r10*x4398);
evalcond[0]=(cj3+(((-1.0)*gconst5*r10*x4398))+(((-1.0)*r01*x4402))+((gconst5*r00*x4397))+((gconst4*x4404)));
evalcond[1]=((((-0.0055)*r00*x4402))+(((0.0055)*gconst5*x4404))+(((0.0055)*x4407))+(((-0.0055)*x4397*x4399))+((py*x4398))+(((-1.0)*px*x4405)));
evalcond[2]=(((cj4*x4406))+(((-1.0)*x4400*x4407))+(((-1.0)*gconst5*x4400*x4404))+((r00*sj4*x4402))+((x4399*x4403))+(((-1.0)*cj4*x4397*x4401)));
evalcond[3]=((((-1.0)*cj4*x4399*x4405))+sj3+(((-1.0)*r02*x4397*x4400))+((cj4*x4407))+((cj4*gconst5*x4404))+(((-1.0)*cj4*r00*x4402))+((sj4*x4406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4408=(gconst5*r20);
IkReal x4409=((181.818181818182)*rxp1_2);
IkReal x4410=((1.0)*gconst4*r21);
IkReal x4411=(sj3+x4408+(((-1.0)*x4410)));
IkReal x4412=((((-1.0)*sj3))+x4408+(((-1.0)*x4410)));
IkReal x4413=x4382;
IkReal x4414=(((gconst5*r21*sj4))+((gconst4*r20*sj4))+(((-1.0)*cj4*r22)));
IkReal x4422 = x4413;
if(IKabs(x4422)==0){
continue;
}
IkReal x4415=pow(x4422,-0.5);
if((x4413) < -0.00001)
continue;
IkReal x4416=IKabs(IKsqrt(x4413));
CheckValue<IkReal> x4423=IKPowWithIntegerCheck(x4416,-1);
if(!x4423.valid){
continue;
}
IkReal x4417=x4423.value;
IkReal x4418=(r22*x4417);
IkReal x4419=((181.818181818182)*rxp0_2*x4415);
if((((1.0)+(((-1.0)*(x4418*x4418))))) < -0.00001)
continue;
IkReal x4420=IKsqrt(((1.0)+(((-1.0)*(x4418*x4418)))));
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x4409),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
if( (x4418) < -1-IKFAST_SINCOS_THRESH || (x4418) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4421=((((1.0)*(x4424.value)))+(((1.0)*(IKasin(x4418)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4421)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4421)));
IkReal gconst4=(((x4409*x4415*x4418))+(((-1.0)*x4419*x4420)));
IkReal gconst5=((((-1.0)*x4418*x4419))+(((-1.0)*x4409*x4415*x4420)));
IkReal gconst254=x4412;
IkReal gconst255=x4411;
IkReal gconst256=x4414;
IkReal gconst257=x4414;
IkReal gconst258=x4412;
IkReal gconst259=x4411;
IkReal gconst260=x4414;
IkReal gconst261=x4414;
IkReal gconst262=x4411;
IkReal gconst263=x4412;
IkReal gconst264=x4414;
IkReal gconst265=x4414;
IkReal gconst266=x4411;
IkReal gconst267=x4412;
IkReal gconst268=x4414;
IkReal gconst269=x4414;
IkReal x4425=sj3*sj3;
IkReal x4426=gconst4*gconst4;
IkReal x4427=r20*r20;
IkReal x4428=gconst5*gconst5;
IkReal x4429=r21*r21;
IkReal x4430=sj4*sj4;
IkReal x4431=cj4*cj4;
IkReal x4432=r22*r22;
IkReal x4433=(gconst4*r20);
IkReal x4434=(gconst5*r21);
IkReal x4435=((24.0)*x4427);
IkReal x4436=((4.0)*x4429);
IkReal x4437=((16.0)*x4425);
IkReal x4438=((24.0)*x4425);
IkReal x4439=((4.0)*x4425);
IkReal x4440=((48.0)*x4434);
IkReal x4441=(x4425*x4430);
IkReal x4442=(x4431*x4432);
IkReal x4443=(x4426*x4429);
IkReal x4444=(x4426*x4427);
IkReal x4445=(x4428*x4429);
IkReal x4446=(x4427*x4428);
IkReal x4447=(cj4*r22*sj4*x4425);
j1eval[0]=((((0.5)*(IKabs((x4439+(((-1.0)*x4430*x4439*x4444))+(((-1.0)*x4428*x4436*x4441))+(((8.0)*x4433*x4447))+(((-4.0)*x4446))+(((8.0)*x4433*x4434))+(((-8.0)*x4433*x4434*x4441))+(((-1.0)*x4439*x4442))+(((-1.0)*x4426*x4436))+(((8.0)*x4434*x4447)))))))+(((0.5)*(IKabs(((((-1.0)*x4428*x4435))+(((-1.0)*x4426*x4435*x4441))+(((-1.0)*x4430*x4438*x4445))+x4438+((x4440*x4447))+(((48.0)*x4433*x4447))+(((-24.0)*x4443))+(((-1.0)*x4433*x4440*x4441))+(((-1.0)*x4438*x4442))+((x4433*x4440)))))))+(IKabs(((((32.0)*x4433*x4447))+(((32.0)*x4433*x4434))+x4437+(((-32.0)*x4433*x4434*x4441))+(((-16.0)*x4446))+(((-16.0)*x4443))+(((-1.0)*x4430*x4437*x4444))+(((-1.0)*x4430*x4437*x4445))+(((32.0)*x4434*x4447))+(((-1.0)*x4437*x4442))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x4448=sj3*sj3;
IkReal x4449=((2.0)*gconst267);
IkReal x4450=(gconst257*gconst262);
IkReal x4451=(gconst254*gconst267);
IkReal x4452=(gconst254*gconst265);
IkReal x4453=(gconst257*gconst268);
IkReal x4454=(gconst265*gconst268);
IkReal x4455=(gconst262*gconst267);
IkReal x4456=(gconst258*gconst261);
IkReal x4457=(gconst256*gconst263);
IkReal x4458=(gconst255*gconst264);
IkReal x4459=(gconst263*gconst264);
IkReal x4460=((1.0)*gconst268);
IkReal x4461=(gconst254*gconst257);
IkReal x4462=((2.0)*gconst258);
IkReal x4463=((16.0)*sj3);
IkReal x4464=(gconst258*gconst269);
IkReal x4465=((4.0)*gconst259);
IkReal x4466=((2.0)*gconst259);
IkReal x4467=(gconst260*gconst263);
IkReal x4468=((2.0)*gconst262);
IkReal x4469=((4.0)*gconst266);
IkReal x4470=(gconst262*gconst269);
IkReal x4471=(gconst255*gconst256);
IkReal x4472=(gconst262*gconst265);
IkReal x4473=(gconst260*gconst265);
IkReal x4474=(gconst260*gconst262);
IkReal x4475=(gconst262*gconst268);
IkReal x4476=(gconst257*gconst260);
IkReal x4477=(gconst261*gconst266);
IkReal x4478=((8.0)*sj3);
IkReal x4479=(gconst263*gconst268);
IkReal x4480=(gconst259*gconst260);
IkReal x4481=((2.0)*gconst254);
IkReal x4482=((2.0)*gconst255);
IkReal x4483=((2.0)*gconst266);
IkReal x4484=(gconst255*gconst260);
IkReal x4485=((4.0)*gconst263);
IkReal x4486=(gconst259*gconst268);
IkReal x4487=(gconst265*gconst266);
IkReal x4488=(gconst266*gconst269);
IkReal x4489=((4.0)*gconst255);
IkReal x4490=(gconst254*gconst268);
IkReal x4491=(gconst254*gconst260);
IkReal x4492=(gconst255*gconst268);
IkReal x4493=((4.0)*gconst258);
IkReal x4494=(gconst263*x4469);
IkReal x4495=(gconst255*x4469);
IkReal x4496=(gconst258*x4485);
IkReal x4497=(gconst263*x4463);
IkReal x4498=(gconst266*x4463);
IkReal x4499=(gconst258*x4489);
IkReal x4500=(gconst255*x4463);
IkReal x4501=(gconst258*x4463);
IkReal x4502=(gconst263*x4483);
IkReal x4503=((1.0)*x4477);
IkReal x4504=((16.0)*x4448);
IkReal x4505=((1.0)*gconst260*gconst267);
IkReal x4506=((1.0)*x4488);
IkReal x4507=((32.0)*x4448);
IkReal x4508=(x4478*x4479);
IkReal x4509=(x4478*x4487);
IkReal x4510=(x4467*x4478);
IkReal x4511=(gconst257*gconst266*x4478);
IkReal x4512=(x4478*x4492);
IkReal x4513=(gconst258*gconst265*x4478);
IkReal x4514=(x4478*x4484);
IkReal x4515=(gconst257*gconst258*x4478);
IkReal x4516=(x4499+x4500);
IkReal x4517=(x4494+x4498);
IkReal x4518=(x4514+x4515);
IkReal x4519=(x4509+x4508);
IkReal x4520=(x4496+x4495+x4501);
IkReal x4521=(x4512+x4513+x4510+x4511);
op[0]=((((-1.0)*gconst267*x4459*x4460))+((x4459*x4488))+(((-1.0)*x4494))+(((-1.0)*x4470*x4487))+((x4454*x4455)));
op[1]=(((gconst269*x4502))+((x4449*x4472))+(((-1.0)*x4449*x4475))+(((-1.0)*x4449*x4479))+(((-1.0)*x4459*x4483))+(((-1.0)*x4449*x4459))+(((-1.0)*x4519))+((x4468*x4488))+((x4468*x4487)));
op[2]=((((-1.0)*x4464*x4472))+(((-1.0)*x4454*x4504))+(((-1.0)*gconst267*x4458*x4460))+((x4451*x4454))+(((-1.0)*x4450*x4506))+((x4457*x4488))+(((-4.0)*x4455))+x4517+((x4459*x4477))+(((-1.0)*gconst259*x4459*x4460))+((x4455*x4473))+((gconst259*gconst262*x4454))+(((-1.0)*x4452*x4506))+((gconst267*gconst268*x4450))+((x4459*x4464))+(((-1.0)*x4472*x4503))+((x4458*x4488))+(((-1.0)*gconst267*x4457*x4460))+(((-1.0)*x4495))+(((-1.0)*x4496))+(((-1.0)*x4497))+(((-1.0)*x4459*x4505))+(((-1.0)*gconst267*x4485))+(((-1.0)*gconst262*x4469)));
op[3]=((((-1.0)*x4449*x4490))+(((-1.0)*x4449*x4492))+(((-1.0)*x4521))+(((-1.0)*x4457*x4483))+x4519+(((-1.0)*x4449*x4474))+((x4462*x4472))+((x4462*x4470))+((x4452*x4483))+(((-1.0)*x4459*x4466))+(((-1.0)*x4459*x4462))+(((-1.0)*x4449*x4457))+(((-1.0)*x4449*x4458))+((x4481*x4488))+((x4450*x4483))+(((2.0)*gconst263*x4477))+(((-1.0)*x4458*x4483))+((gconst263*gconst269*x4462))+((x4482*x4488))+(((-1.0)*x4466*x4475))+(((-1.0)*x4466*x4479))+(((-1.0)*gconst265*x4507))+((x4449*x4452))+((x4449*x4450))+((x4468*x4477))+(((-1.0)*x4449*x4467))+((x4466*x4472))+((gconst268*x4507)));
op[4]=((((-1.0)*gconst263*x4465))+(((-1.0)*gconst259*x4457*x4460))+((x4457*x4477))+((x4471*x4488))+((x4458*x4464))+x4497+((x4451*x4453))+(((-1.0)*x4450*x4503))+(((-4.0)*x4451))+x4520+(((-1.0)*x4461*x4506))+(((-1.0)*x4458*x4505))+(((-1.0)*x4456*x4472))+((x4452*x4486))+(((-1.0)*x4453*x4504))+(((-1.0)*x4459*x4480))+(((-1.0)*x4452*x4503))+((x4451*x4473))+((x4450*x4486))+((x4456*x4459))+(((-1.0)*x4517))+(((-1.0)*x4516))+(((-1.0)*x4457*x4505))+(((64.0)*x4448))+(((-1.0)*gconst254*x4469))+(((-1.0)*x4452*x4464))+((x4458*x4477))+((x4472*x4480))+(((-1.0)*gconst259*x4458*x4460))+((x4457*x4464))+(((-1.0)*x4473*x4504))+(((-1.0)*gconst262*x4493))+(((-1.0)*gconst267*x4489))+(((-1.0)*gconst262*x4465))+(((-1.0)*x4450*x4464))+(((-1.0)*gconst267*x4460*x4471))+((gconst260*gconst267*x4450)));
op[5]=((((-1.0)*x4449*x4491))+((x4452*x4466))+((x4452*x4462))+((x4477*x4481))+((x4477*x4482))+x4521+(((-1.0)*x4449*x4471))+((x4450*x4462))+((x4450*x4466))+(((-1.0)*gconst257*x4507))+(((-1.0)*x4458*x4466))+(((-1.0)*x4458*x4462))+(((-1.0)*x4449*x4484))+((x4461*x4483))+((x4449*x4461))+(((-1.0)*x4471*x4483))+(((-1.0)*x4466*x4467))+((gconst255*gconst269*x4462))+(((-1.0)*x4457*x4466))+(((-1.0)*x4457*x4462))+(((-1.0)*x4518))+((gconst260*x4507))+(((-1.0)*x4466*x4474))+((x4456*x4468))+(((2.0)*gconst263*x4456))+(((-1.0)*x4466*x4492))+(((-1.0)*x4466*x4490))+((gconst254*gconst269*x4462)));
op[6]=((((-1.0)*gconst255*x4465))+(((-1.0)*x4450*x4456))+(((-1.0)*gconst254*x4493))+((x4471*x4477))+(((-1.0)*x4520))+x4516+(((-1.0)*x4461*x4503))+((x4464*x4471))+((x4452*x4480))+(((-1.0)*x4457*x4480))+((x4451*x4476))+(((-1.0)*x4452*x4456))+((x4450*x4480))+((x4456*x4457))+((x4456*x4458))+(((-1.0)*x4471*x4505))+(((-1.0)*x4461*x4464))+(((-1.0)*gconst254*x4465))+(((-1.0)*x4458*x4480))+(((-1.0)*gconst259*x4460*x4471))+((gconst254*gconst259*x4453))+(((-1.0)*x4476*x4504)));
op[7]=((((-1.0)*x4462*x4471))+((x4456*x4482))+((x4456*x4481))+x4518+(((-1.0)*x4466*x4471))+((x4461*x4462))+((x4461*x4466))+(((-1.0)*x4466*x4484))+(((-1.0)*x4466*x4491)));
op[8]=((((-1.0)*x4471*x4480))+(((-1.0)*x4456*x4461))+((x4456*x4471))+((x4461*x4480))+(((-1.0)*x4499)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4522=((181.818181818182)*rxp1_2);
IkReal x4523=x4382;
IkReal x4531 = x4523;
if(IKabs(x4531)==0){
continue;
}
IkReal x4524=pow(x4531,-0.5);
if((x4523) < -0.00001)
continue;
IkReal x4525=IKabs(IKsqrt(x4523));
CheckValue<IkReal> x4532=IKPowWithIntegerCheck(x4525,-1);
if(!x4532.valid){
continue;
}
IkReal x4526=x4532.value;
IkReal x4527=(r22*x4526);
IkReal x4528=((181.818181818182)*rxp0_2*x4524);
if((((1.0)+(((-1.0)*(x4527*x4527))))) < -0.00001)
continue;
IkReal x4529=IKsqrt(((1.0)+(((-1.0)*(x4527*x4527)))));
if( (x4527) < -1-IKFAST_SINCOS_THRESH || (x4527) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x4522),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
IkReal x4530=((((1.0)*(IKasin(x4527))))+(((1.0)*(x4533.value))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4530)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4530)));
IkReal gconst4=((((-1.0)*x4528*x4529))+((x4522*x4524*x4527)));
IkReal gconst5=((((-1.0)*x4522*x4524*x4529))+(((-1.0)*x4527*x4528)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4534=((181.818181818182)*rxp1_2);
IkReal x4535=x4382;
IkReal x4543 = x4535;
if(IKabs(x4543)==0){
continue;
}
IkReal x4536=pow(x4543,-0.5);
if((x4535) < -0.00001)
continue;
IkReal x4537=IKabs(IKsqrt(x4535));
CheckValue<IkReal> x4544=IKPowWithIntegerCheck(x4537,-1);
if(!x4544.valid){
continue;
}
IkReal x4538=x4544.value;
IkReal x4539=(r22*x4538);
IkReal x4540=((181.818181818182)*rxp0_2*x4536);
if((((1.0)+(((-1.0)*(x4539*x4539))))) < -0.00001)
continue;
IkReal x4541=IKsqrt(((1.0)+(((-1.0)*(x4539*x4539)))));
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x4534),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
if( (x4539) < -1-IKFAST_SINCOS_THRESH || (x4539) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4542=((((1.0)*(x4545.value)))+(((1.0)*(IKasin(x4539)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4542)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4542)));
IkReal gconst4=(((x4534*x4536*x4539))+(((-1.0)*x4540*x4541)));
IkReal gconst5=((((-1.0)*x4534*x4536*x4541))+(((-1.0)*x4539*x4540)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4546=((181.818181818182)*rxp1_2);
IkReal x4547=x4382;
IkReal x4555 = x4547;
if(IKabs(x4555)==0){
continue;
}
IkReal x4548=pow(x4555,-0.5);
if((x4547) < -0.00001)
continue;
IkReal x4549=IKabs(IKsqrt(x4547));
CheckValue<IkReal> x4556=IKPowWithIntegerCheck(x4549,-1);
if(!x4556.valid){
continue;
}
IkReal x4550=x4556.value;
IkReal x4551=(r22*x4550);
IkReal x4552=((181.818181818182)*rxp0_2*x4548);
if((((1.0)+(((-1.0)*(x4551*x4551))))) < -0.00001)
continue;
IkReal x4553=IKsqrt(((1.0)+(((-1.0)*(x4551*x4551)))));
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal(((-181.818181818182)*rxp0_2)),IkReal(x4546),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
if( (x4551) < -1-IKFAST_SINCOS_THRESH || (x4551) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4554=((((1.0)*(x4557.value)))+(((1.0)*(IKasin(x4551)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4554)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4554)));
IkReal gconst4=(((x4546*x4548*x4551))+(((-1.0)*x4552*x4553)));
IkReal gconst5=((((-1.0)*x4546*x4548*x4553))+(((-1.0)*x4551*x4552)));
IkReal x4558=(cj3*sj3);
j2eval[0]=x4558;
j2eval[1]=IKsign(x4558);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4559=(cj1*r20);
IkReal x4560=(cj4*r22);
IkReal x4561=(gconst4*r21);
IkReal x4562=(r20*sj1);
IkReal x4563=((1.0)*gconst4*sj4);
IkReal x4564=((1.0)*gconst5*r21*sj4);
if( IKabs(((((-1.0)*gconst5*x4562))+(((-1.0)*cj1*x4564))+((sj1*x4561))+(((-1.0)*x4559*x4563))+((cj1*x4560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x4564))+((gconst5*x4559))+((sj1*x4560))+(((-1.0)*cj1*x4561))+(((-1.0)*x4562*x4563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst5*x4562))+(((-1.0)*cj1*x4564))+((sj1*x4561))+(((-1.0)*x4559*x4563))+((cj1*x4560))))+IKsqr(((((-1.0)*sj1*x4564))+((gconst5*x4559))+((sj1*x4560))+(((-1.0)*cj1*x4561))+(((-1.0)*x4562*x4563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*gconst5*x4562))+(((-1.0)*cj1*x4564))+((sj1*x4561))+(((-1.0)*x4559*x4563))+((cj1*x4560))), ((((-1.0)*sj1*x4564))+((gconst5*x4559))+((sj1*x4560))+(((-1.0)*cj1*x4561))+(((-1.0)*x4562*x4563))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4565=IKcos(j2);
IkReal x4566=IKsin(j2);
IkReal x4567=(gconst5*sj4);
IkReal x4568=(r11*sj0);
IkReal x4569=(cj0*r01);
IkReal x4570=((1.0)*cj4);
IkReal x4571=(r10*sj0);
IkReal x4572=((1.0)*gconst4);
IkReal x4573=((0.0055)*gconst5);
IkReal x4574=(gconst4*r20);
IkReal x4575=(sj1*x4565);
IkReal x4576=(cj1*x4566);
IkReal x4577=(cj1*x4565);
IkReal x4578=(sj1*x4566);
IkReal x4579=(cj0*gconst4*r00);
IkReal x4580=(x4575+x4576);
evalcond[0]=(x4578+((gconst5*r20))+(((-1.0)*x4577))+(((-1.0)*r21*x4572)));
evalcond[1]=(x4580+((sj4*x4574))+((r21*x4567))+(((-1.0)*r22*x4570)));
evalcond[2]=((((-1.0)*x4569*x4572))+x4580+((gconst5*x4571))+((cj0*gconst5*r00))+(((-1.0)*x4568*x4572)));
evalcond[3]=((((0.21)*cj1))+(((-1.0)*pz))+(((-0.03)*x4578))+(((0.03)*x4577))+(((0.2215)*x4575))+(((0.2215)*x4576))+(((-1.0)*r21*x4573))+(((-0.0055)*x4574)));
evalcond[4]=(((gconst4*sj4*x4571))+((x4567*x4568))+((x4567*x4569))+x4577+((sj4*x4579))+(((-1.0)*cj0*r02*x4570))+(((-1.0)*r12*sj0*x4570))+(((-1.0)*x4578)));
evalcond[5]=((((-1.0)*x4569*x4573))+(((-0.0055)*gconst4*x4571))+(((-0.03)*x4576))+(((-0.03)*x4575))+(((-1.0)*x4568*x4573))+(((-0.2215)*x4578))+(((-1.0)*py*sj0))+(((0.2215)*x4577))+(((-0.21)*sj1))+(((-1.0)*cj0*px))+(((-0.0055)*x4579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4581=((1.0)*cj1);
IkReal x4582=(cj4*r22);
IkReal x4583=(r22*sj4);
IkReal x4584=((1.0)*sj1);
IkReal x4585=(cj4*gconst5*r21);
IkReal x4586=(cj4*gconst4*r20);
IkReal x4587=(gconst5*r21*sj4);
IkReal x4588=(gconst4*r20*sj4);
if( IKabs((((cj1*x4582))+((sj1*x4583))+((sj1*x4586))+((sj1*x4585))+(((-1.0)*x4581*x4588))+(((-1.0)*x4581*x4587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4582))+(((-1.0)*x4581*x4583))+(((-1.0)*x4581*x4586))+(((-1.0)*x4581*x4585))+(((-1.0)*x4584*x4588))+(((-1.0)*x4584*x4587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x4582))+((sj1*x4583))+((sj1*x4586))+((sj1*x4585))+(((-1.0)*x4581*x4588))+(((-1.0)*x4581*x4587))))+IKsqr((((sj1*x4582))+(((-1.0)*x4581*x4583))+(((-1.0)*x4581*x4586))+(((-1.0)*x4581*x4585))+(((-1.0)*x4584*x4588))+(((-1.0)*x4584*x4587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x4582))+((sj1*x4583))+((sj1*x4586))+((sj1*x4585))+(((-1.0)*x4581*x4588))+(((-1.0)*x4581*x4587))), (((sj1*x4582))+(((-1.0)*x4581*x4583))+(((-1.0)*x4581*x4586))+(((-1.0)*x4581*x4585))+(((-1.0)*x4584*x4588))+(((-1.0)*x4584*x4587))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4589=IKsin(j2);
IkReal x4590=IKcos(j2);
IkReal x4591=((0.2215)*sj1);
IkReal x4592=(sj0*sj4);
IkReal x4593=(gconst5*r11);
IkReal x4594=((1.0)*r12);
IkReal x4595=(gconst5*sj4);
IkReal x4596=(cj0*r01);
IkReal x4597=((1.0)*cj4);
IkReal x4598=(cj0*r02);
IkReal x4599=(gconst4*r20);
IkReal x4600=(gconst5*r21);
IkReal x4601=(gconst4*r10);
IkReal x4602=((1.0)*sj4);
IkReal x4603=((0.0055)*sj0);
IkReal x4604=(sj1*x4590);
IkReal x4605=(cj1*x4589);
IkReal x4606=(cj1*x4590);
IkReal x4607=(cj0*gconst4*r00);
IkReal x4608=(sj1*x4589);
IkReal x4609=(x4604+x4605);
evalcond[0]=(((r21*x4595))+(((-1.0)*r22*x4597))+((sj4*x4599))+x4609);
evalcond[1]=((((-1.0)*x4606))+x4608+(((-1.0)*x4597*x4599))+(((-1.0)*x4597*x4600))+(((-1.0)*r22*x4602)));
evalcond[2]=(((x4590*x4591))+(((-0.0055)*x4600))+(((-0.0055)*x4599))+(((0.2215)*x4605))+(((0.21)*cj1))+(((-0.03)*x4608))+(((-1.0)*pz))+(((0.03)*x4606)));
evalcond[3]=(((x4595*x4596))+((x4592*x4601))+(((-1.0)*x4608))+x4606+(((-1.0)*x4597*x4598))+(((-1.0)*cj4*sj0*x4594))+((sj4*x4607))+((x4592*x4593)));
evalcond[4]=((((-1.0)*gconst5*x4596*x4597))+x4609+(((-1.0)*x4597*x4607))+(((-1.0)*sj0*x4593*x4597))+(((-1.0)*x4592*x4594))+(((-1.0)*x4598*x4602))+(((-1.0)*sj0*x4597*x4601)));
evalcond[5]=((((-0.0055)*x4607))+(((-1.0)*x4593*x4603))+(((0.2215)*x4606))+(((-1.0)*x4589*x4591))+(((-1.0)*x4601*x4603))+(((-0.03)*x4605))+(((-0.03)*x4604))+(((-0.0055)*gconst5*x4596))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4610=(gconst5*sj1);
IkReal x4611=(cj4*r22);
IkReal x4612=(cj1*gconst5);
IkReal x4613=(gconst4*r21);
IkReal x4614=((1.0)*sj1);
IkReal x4615=((1.0)*r20);
IkReal x4616=(gconst4*sj4);
IkReal x4617=((1.0)*r21*sj4);
if( IKabs(((((-1.0)*cj1*x4615*x4616))+(((-1.0)*x4612*x4617))+((r20*x4610))+((cj1*x4611))+(((-1.0)*x4613*x4614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4612*x4615))+((sj1*x4611))+((cj1*x4613))+(((-1.0)*x4610*x4617))+(((-1.0)*r20*x4614*x4616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x4615*x4616))+(((-1.0)*x4612*x4617))+((r20*x4610))+((cj1*x4611))+(((-1.0)*x4613*x4614))))+IKsqr(((((-1.0)*x4612*x4615))+((sj1*x4611))+((cj1*x4613))+(((-1.0)*x4610*x4617))+(((-1.0)*r20*x4614*x4616))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x4615*x4616))+(((-1.0)*x4612*x4617))+((r20*x4610))+((cj1*x4611))+(((-1.0)*x4613*x4614))), ((((-1.0)*x4612*x4615))+((sj1*x4611))+((cj1*x4613))+(((-1.0)*x4610*x4617))+(((-1.0)*r20*x4614*x4616))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4618=IKcos(j2);
IkReal x4619=IKsin(j2);
IkReal x4620=(gconst5*sj4);
IkReal x4621=(r11*sj0);
IkReal x4622=(cj0*r01);
IkReal x4623=((1.0)*cj4);
IkReal x4624=(r10*sj0);
IkReal x4625=((1.0)*gconst4);
IkReal x4626=((0.0055)*gconst5);
IkReal x4627=(gconst4*sj4);
IkReal x4628=((0.0055)*gconst4);
IkReal x4629=(cj1*x4618);
IkReal x4630=(sj1*x4619);
IkReal x4631=(cj1*x4619);
IkReal x4632=(sj1*x4618);
IkReal x4633=(cj0*gconst4*r00);
IkReal x4634=((1.0)*x4630);
evalcond[0]=((((-1.0)*x4634))+x4629+(((-1.0)*r21*x4625))+((gconst5*r20)));
evalcond[1]=(((r20*x4627))+(((-1.0)*r22*x4623))+x4632+x4631+((r21*x4620)));
evalcond[2]=((((-1.0)*x4632))+(((-1.0)*x4631))+(((-1.0)*x4621*x4625))+((cj0*gconst5*r00))+((gconst5*x4624))+(((-1.0)*x4622*x4625)));
evalcond[3]=((((0.21)*cj1))+(((0.2215)*x4632))+(((0.2215)*x4631))+(((0.03)*x4629))+(((-1.0)*r21*x4626))+(((-1.0)*pz))+(((-1.0)*r20*x4628))+(((-0.03)*x4630)));
evalcond[4]=(((x4620*x4622))+((x4620*x4621))+((x4624*x4627))+(((-1.0)*x4634))+x4629+(((-1.0)*cj0*r02*x4623))+(((-1.0)*r12*sj0*x4623))+((cj0*r00*x4627)));
evalcond[5]=((((-1.0)*cj0*r00*x4628))+(((-1.0)*x4621*x4626))+(((0.2215)*x4629))+(((-0.03)*x4631))+(((-0.03)*x4632))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-0.2215)*x4630))+(((-1.0)*x4624*x4628))+(((-1.0)*cj0*px))+(((-1.0)*x4622*x4626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4635=((1.0)*gconst5);
IkReal x4636=(cj3*sj1);
IkReal x4637=(cj0*r00);
IkReal x4638=(gconst4*r20);
IkReal x4639=(cj1*cj3);
IkReal x4640=(cj4*sj1*sj3);
IkReal x4641=(cj3*r10*sj0);
IkReal x4642=(gconst4*r11*sj0);
IkReal x4643=(cj1*cj4*sj3);
IkReal x4644=(cj0*gconst4*r01);
IkReal x4645=(r22*sj3*sj4);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((((-1.0)*x4638*x4640))+(((-1.0)*r10*sj0*x4635*x4639))+(((-1.0)*x4635*x4637*x4639))+(((-1.0)*r21*x4635*x4640))+((x4639*x4644))+((x4639*x4642))+(((-1.0)*sj1*x4645)))),IkReal((((gconst5*r21*x4643))+((x4636*x4642))+((x4636*x4644))+((x4638*x4643))+(((-1.0)*r10*sj0*x4635*x4636))+((cj1*x4645))+(((-1.0)*x4635*x4636*x4637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
CheckValue<IkReal> x4647=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4647.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4646.value)+(((1.5707963267949)*(x4647.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4648=IKcos(j2);
IkReal x4649=IKsin(j2);
IkReal x4650=(sj0*sj4);
IkReal x4651=(gconst5*r11);
IkReal x4652=((1.0)*r12);
IkReal x4653=(gconst5*sj4);
IkReal x4654=(cj0*r01);
IkReal x4655=((0.0055)*sj0);
IkReal x4656=(gconst4*r20);
IkReal x4657=((1.0)*cj4);
IkReal x4658=(cj0*r02);
IkReal x4659=((1.0)*cj3);
IkReal x4660=((1.0)*sj0);
IkReal x4661=(gconst5*r21);
IkReal x4662=((1.0)*gconst4);
IkReal x4663=((1.0)*sj4);
IkReal x4664=(gconst4*r10);
IkReal x4665=(cj1*x4648);
IkReal x4666=(sj1*x4649);
IkReal x4667=(cj1*x4649);
IkReal x4668=(sj1*x4648);
IkReal x4669=(cj0*gconst4*r00);
evalcond[0]=(((sj3*x4666))+(((-1.0)*r21*x4662))+(((-1.0)*sj3*x4665))+((gconst5*r20)));
evalcond[1]=(x4668+x4667+(((-1.0)*r22*x4657))+((sj4*x4656))+((r21*x4653)));
evalcond[2]=((((-1.0)*x4659*x4666))+((cj3*x4665))+(((-1.0)*r22*x4663))+(((-1.0)*x4656*x4657))+(((-1.0)*x4657*x4661)));
evalcond[3]=((((-1.0)*x4654*x4662))+((sj3*x4667))+((sj3*x4668))+(((-1.0)*gconst4*r11*x4660))+((cj0*gconst5*r00))+((gconst5*r10*sj0)));
evalcond[4]=((((-0.03)*x4666))+(((0.2215)*x4667))+(((0.2215)*x4668))+(((0.03)*x4665))+(((0.21)*cj1))+(((-0.0055)*x4656))+(((-0.0055)*x4661))+(((-1.0)*pz)));
evalcond[5]=(((x4650*x4651))+(((-1.0)*x4666))+((x4653*x4654))+(((-1.0)*x4657*x4658))+x4665+(((-1.0)*cj4*sj0*x4652))+((sj4*x4669))+((x4650*x4664)));
evalcond[6]=((((-1.0)*x4659*x4667))+(((-1.0)*x4659*x4668))+(((-1.0)*x4658*x4663))+(((-1.0)*sj0*x4657*x4664))+(((-1.0)*gconst5*x4654*x4657))+(((-1.0)*x4650*x4652))+(((-1.0)*sj0*x4651*x4657))+(((-1.0)*x4657*x4669)));
evalcond[7]=((((-0.03)*x4667))+(((-0.03)*x4668))+(((0.2215)*x4665))+(((-1.0)*py*x4660))+(((-0.0055)*gconst5*x4654))+(((-1.0)*x4651*x4655))+(((-0.0055)*x4669))+(((-0.21)*sj1))+(((-0.2215)*x4666))+(((-1.0)*x4655*x4664))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4670=((1.0)*sj1);
IkReal x4671=(r22*sj4);
IkReal x4672=(gconst5*r21);
IkReal x4673=(cj3*sj4);
IkReal x4674=((1.0)*cj1);
IkReal x4675=(gconst4*r20);
IkReal x4676=(cj1*cj4);
IkReal x4677=(cj3*cj4*r22);
CheckValue<IkReal> x4678=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4678.valid){
continue;
}
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(((((-1.0)*x4673*x4674*x4675))+((cj3*r22*x4676))+(((-1.0)*cj4*x4670*x4675))+(((-1.0)*cj4*x4670*x4672))+(((-1.0)*x4672*x4673*x4674))+(((-1.0)*x4670*x4671)))),IkReal(((((-1.0)*x4670*x4672*x4673))+(((-1.0)*x4670*x4673*x4675))+((x4672*x4676))+((sj1*x4677))+((cj1*x4671))+((x4675*x4676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4678.value)))+(x4679.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4680=IKcos(j2);
IkReal x4681=IKsin(j2);
IkReal x4682=(sj0*sj4);
IkReal x4683=(gconst5*r11);
IkReal x4684=((1.0)*r12);
IkReal x4685=(gconst5*sj4);
IkReal x4686=(cj0*r01);
IkReal x4687=((0.0055)*sj0);
IkReal x4688=(gconst4*r20);
IkReal x4689=((1.0)*cj4);
IkReal x4690=(cj0*r02);
IkReal x4691=((1.0)*cj3);
IkReal x4692=((1.0)*sj0);
IkReal x4693=(gconst5*r21);
IkReal x4694=((1.0)*gconst4);
IkReal x4695=((1.0)*sj4);
IkReal x4696=(gconst4*r10);
IkReal x4697=(cj1*x4680);
IkReal x4698=(sj1*x4681);
IkReal x4699=(cj1*x4681);
IkReal x4700=(sj1*x4680);
IkReal x4701=(cj0*gconst4*r00);
evalcond[0]=(((sj3*x4698))+((gconst5*r20))+(((-1.0)*sj3*x4697))+(((-1.0)*r21*x4694)));
evalcond[1]=(x4699+x4700+((sj4*x4688))+((r21*x4685))+(((-1.0)*r22*x4689)));
evalcond[2]=((((-1.0)*x4688*x4689))+((cj3*x4697))+(((-1.0)*r22*x4695))+(((-1.0)*x4689*x4693))+(((-1.0)*x4691*x4698)));
evalcond[3]=((((-1.0)*x4686*x4694))+((sj3*x4699))+(((-1.0)*gconst4*r11*x4692))+((cj0*gconst5*r00))+((sj3*x4700))+((gconst5*r10*sj0)));
evalcond[4]=((((-0.03)*x4698))+(((0.21)*cj1))+(((0.2215)*x4700))+(((0.03)*x4697))+(((-0.0055)*x4693))+(((-0.0055)*x4688))+(((-1.0)*pz))+(((0.2215)*x4699)));
evalcond[5]=(((x4682*x4683))+((sj4*x4701))+((x4682*x4696))+x4697+(((-1.0)*x4698))+(((-1.0)*cj4*sj0*x4684))+(((-1.0)*x4689*x4690))+((x4685*x4686)));
evalcond[6]=((((-1.0)*x4682*x4684))+(((-1.0)*x4690*x4695))+(((-1.0)*sj0*x4689*x4696))+(((-1.0)*gconst5*x4686*x4689))+(((-1.0)*x4691*x4700))+(((-1.0)*x4689*x4701))+(((-1.0)*sj0*x4683*x4689))+(((-1.0)*x4691*x4699)));
evalcond[7]=((((-1.0)*x4687*x4696))+(((-0.03)*x4699))+(((-0.2215)*x4698))+(((-1.0)*x4683*x4687))+(((-0.0055)*x4701))+(((-0.21)*sj1))+(((-1.0)*py*x4692))+(((0.2215)*x4697))+(((-0.03)*x4700))+(((-1.0)*cj0*px))+(((-0.0055)*gconst5*x4686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4702=(cj1*gconst5);
IkReal x4703=(gconst4*r20);
IkReal x4704=(gconst4*r21);
IkReal x4705=(gconst5*sj1);
IkReal x4706=((1.0)*sj3*sj4);
IkReal x4707=(cj4*r22*sj3);
CheckValue<IkReal> x4708=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4708.valid){
continue;
}
CheckValue<IkReal> x4709 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x4703*x4706))+((sj1*x4704))+(((-1.0)*r21*x4702*x4706))+((cj1*x4707))+(((-1.0)*r20*x4705)))),IkReal(((((-1.0)*sj1*x4703*x4706))+((sj1*x4707))+((r20*x4702))+(((-1.0)*r21*x4705*x4706))+(((-1.0)*cj1*x4704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4709.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4708.value)))+(x4709.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4710=IKcos(j2);
IkReal x4711=IKsin(j2);
IkReal x4712=(sj0*sj4);
IkReal x4713=(gconst5*r11);
IkReal x4714=((1.0)*r12);
IkReal x4715=(gconst5*sj4);
IkReal x4716=(cj0*r01);
IkReal x4717=((0.0055)*sj0);
IkReal x4718=(gconst4*r20);
IkReal x4719=((1.0)*cj4);
IkReal x4720=(cj0*r02);
IkReal x4721=((1.0)*cj3);
IkReal x4722=((1.0)*sj0);
IkReal x4723=(gconst5*r21);
IkReal x4724=((1.0)*gconst4);
IkReal x4725=((1.0)*sj4);
IkReal x4726=(gconst4*r10);
IkReal x4727=(cj1*x4710);
IkReal x4728=(sj1*x4711);
IkReal x4729=(cj1*x4711);
IkReal x4730=(sj1*x4710);
IkReal x4731=(cj0*gconst4*r00);
evalcond[0]=((((-1.0)*sj3*x4727))+((sj3*x4728))+(((-1.0)*r21*x4724))+((gconst5*r20)));
evalcond[1]=((((-1.0)*r22*x4719))+((r21*x4715))+((sj4*x4718))+x4730+x4729);
evalcond[2]=((((-1.0)*x4718*x4719))+((cj3*x4727))+(((-1.0)*x4719*x4723))+(((-1.0)*x4721*x4728))+(((-1.0)*r22*x4725)));
evalcond[3]=(((sj3*x4730))+(((-1.0)*x4716*x4724))+((sj3*x4729))+(((-1.0)*gconst4*r11*x4722))+((cj0*gconst5*r00))+((gconst5*r10*sj0)));
evalcond[4]=((((-0.0055)*x4718))+(((0.21)*cj1))+(((-1.0)*pz))+(((0.03)*x4727))+(((-0.03)*x4728))+(((-0.0055)*x4723))+(((0.2215)*x4729))+(((0.2215)*x4730)));
evalcond[5]=((((-1.0)*cj4*sj0*x4714))+(((-1.0)*x4728))+((x4712*x4726))+x4727+((x4715*x4716))+(((-1.0)*x4719*x4720))+((x4712*x4713))+((sj4*x4731)));
evalcond[6]=((((-1.0)*x4712*x4714))+(((-1.0)*x4719*x4731))+(((-1.0)*gconst5*x4716*x4719))+(((-1.0)*sj0*x4719*x4726))+(((-1.0)*sj0*x4713*x4719))+(((-1.0)*x4721*x4729))+(((-1.0)*x4720*x4725))+(((-1.0)*x4721*x4730)));
evalcond[7]=((((-1.0)*py*x4722))+(((-0.0055)*gconst5*x4716))+(((-1.0)*x4717*x4726))+(((-0.03)*x4730))+(((-0.03)*x4729))+(((-0.21)*sj1))+(((-0.2215)*x4728))+(((-0.0055)*x4731))+(((0.2215)*x4727))+(((-1.0)*cj0*px))+(((-1.0)*x4713*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4732=((0.0055)*cj5);
IkReal x4733=((0.0055)*sj3*sj5);
CheckValue<IkReal> x4734 = IKatan2WithCheck(IkReal((((r11*sj3*x4732))+((r10*x4733))+((py*sj3)))),IkReal((((r01*sj3*x4732))+((px*sj3))+((r00*x4733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x4732))+((cj4*cj5*rxp1_2))+(((0.0055)*r21*sj4*sj5))+((cj4*rxp0_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x4735.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4734.value)+(((1.5707963267949)*(x4735.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4736=IKsin(j0);
IkReal x4737=IKcos(j0);
IkReal x4738=((1.0)*sj4);
IkReal x4739=((1.0)*cj4);
IkReal x4740=(sj5*x4737);
IkReal x4741=(r02*x4736);
IkReal x4742=(cj5*x4737);
IkReal x4743=((1.0)*x4736);
IkReal x4744=(r12*x4737);
IkReal x4745=(cj5*r01*x4736);
IkReal x4746=(r00*sj5*x4736);
evalcond[0]=(((r11*x4740))+cj3+(((-1.0)*r10*x4742))+((cj5*r00*x4736))+(((-1.0)*r01*sj5*x4743)));
evalcond[1]=((((0.0055)*r11*x4742))+((py*x4737))+(((0.0055)*r10*x4740))+(((-1.0)*px*x4743))+(((-0.0055)*x4746))+(((-0.0055)*x4745)));
evalcond[2]=((((-1.0)*r10*x4738*x4740))+(((-1.0)*r11*x4738*x4742))+((cj4*x4744))+((sj4*x4745))+((sj4*x4746))+(((-1.0)*x4739*x4741)));
evalcond[3]=(sj3+((cj4*r11*x4742))+((cj4*r10*x4740))+(((-1.0)*x4738*x4741))+((sj4*x4744))+(((-1.0)*x4739*x4745))+(((-1.0)*x4739*x4746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4747=((0.84)*cj3);
IkReal x4748=((0.84)*sj3);
IkReal x4749=((0.886)*sj4);
IkReal x4750=(cj5*r20);
IkReal x4751=((2.658)*sj4);
IkReal x4752=((0.022)*cj3);
IkReal x4753=(r20*sj5);
IkReal x4754=(cj5*r21);
IkReal x4755=(pz*sj3);
IkReal x4756=(r22*sj4);
IkReal x4757=((0.36)*cj4);
IkReal x4758=((0.12)*cj4);
IkReal x4759=((0.066)*cj3);
IkReal x4760=(r21*sj5);
IkReal x4761=(cj3*pz);
IkReal x4762=((12.0)*x4761);
IkReal x4763=((0.36)*x4756);
IkReal x4764=((0.36)*x4760);
IkReal x4765=((12.0)*x4755);
IkReal x4766=((0.36)*x4750);
IkReal x4767=(sj3*x4753);
IkReal x4768=(sj3*x4754);
IkReal x4769=(cj4*r22*sj3);
IkReal x4770=(cj3*cj4*r22);
IkReal x4771=(x4754*x4759);
IkReal x4772=(x4753*x4759);
IkReal x4773=((2.658)*x4770);
IkReal x4774=(x4753*x4757);
IkReal x4775=(x4754*x4757);
IkReal x4776=((0.066)*x4768);
IkReal x4777=((0.066)*x4767);
IkReal x4778=((2.658)*x4769);
IkReal x4779=(cj3*x4751*x4754);
IkReal x4780=(cj3*x4751*x4753);
IkReal x4781=(x4751*x4767);
IkReal x4782=(x4751*x4768);
IkReal x4783=(x4778+x4766);
IkReal x4784=(x4774+x4775+x4773+x4763);
IkReal x4785=(x4772+x4771+x4779+x4762+x4780);
IkReal x4786=(x4776+x4777+x4765+x4764+x4782+x4781);
j1eval[0]=((IKabs((x4747+x4785+(((-1.0)*x4784)))))+(IKabs((x4748+x4786+(((-1.0)*x4783)))))+(IKabs((x4786+(((-1.0)*x4748))+(((-1.0)*x4783)))))+(IKabs(((((4.0)*x4761))+(((-1.0)*x4753*x4758))+(((-1.0)*x4754*x4758))+x4747+(((-0.886)*x4770))+((cj3*x4749*x4753))+((cj3*x4749*x4754))+(((-0.12)*x4756))+((x4752*x4753))+((x4752*x4754)))))+(IKabs(((((0.12)*x4760))+(((-0.886)*x4769))+x4748+(((0.022)*x4768))+(((0.022)*x4767))+(((-0.12)*x4750))+(((4.0)*x4755))+((x4749*x4768))+((x4749*x4767)))))+(IKabs((x4785+(((-1.0)*x4747))+(((-1.0)*x4784))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4787=((0.84)*sj3);
IkReal x4788=(cj5*r20);
IkReal x4789=(pz*sj3);
IkReal x4790=((2.658)*sj4);
IkReal x4791=((0.886)*sj4);
IkReal x4792=(r21*sj5);
IkReal x4793=((0.36)*x4792);
IkReal x4794=((12.0)*x4789);
IkReal x4795=((0.36)*x4788);
IkReal x4796=((0.12)*x4792);
IkReal x4797=((4.0)*x4789);
IkReal x4798=((0.12)*x4788);
IkReal x4799=(r20*sj3*sj5);
IkReal x4800=(cj5*r21*sj3);
IkReal x4801=(cj4*r22*sj3);
IkReal x4802=((0.066)*x4800);
IkReal x4803=((0.066)*x4799);
IkReal x4804=((2.658)*x4801);
IkReal x4805=((0.022)*x4800);
IkReal x4806=((0.022)*x4799);
IkReal x4807=((0.886)*x4801);
IkReal x4808=(x4790*x4799);
IkReal x4809=(x4790*x4800);
IkReal x4810=(x4791*x4799);
IkReal x4811=(x4791*x4800);
IkReal x4812=(x4798+x4807);
IkReal x4813=(x4795+x4804);
IkReal x4814=(x4794+x4793+x4802+x4803+x4808+x4809);
IkReal x4815=(x4796+x4797+x4811+x4810+x4805+x4806);
op[0]=((((-1.0)*x4812))+x4787+x4815);
op[1]=0;
op[2]=((((-1.0)*x4813))+x4787+x4814);
op[3]=0;
op[4]=((((-1.0)*x4813))+x4814+(((-1.0)*x4787)));
op[5]=0;
op[6]=((((-1.0)*x4812))+x4815+(((-1.0)*x4787)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4816=((0.84)*cj3);
IkReal x4817=(r20*sj5);
IkReal x4818=((0.12)*cj4);
IkReal x4819=((0.022)*cj3);
IkReal x4820=(cj5*r21);
IkReal x4821=(r22*sj4);
IkReal x4822=(cj3*sj4);
IkReal x4823=((0.36)*cj4);
IkReal x4824=((0.066)*cj3);
IkReal x4825=(cj3*pz);
IkReal x4826=((12.0)*x4825);
IkReal x4827=((0.36)*x4821);
IkReal x4828=((4.0)*x4825);
IkReal x4829=((0.12)*x4821);
IkReal x4830=(cj3*cj4*r22);
IkReal x4831=(x4819*x4820);
IkReal x4832=(x4817*x4819);
IkReal x4833=(x4820*x4824);
IkReal x4834=(x4817*x4824);
IkReal x4835=((2.658)*x4830);
IkReal x4836=(x4817*x4823);
IkReal x4837=(x4820*x4823);
IkReal x4838=(x4817*x4818);
IkReal x4839=((0.886)*x4830);
IkReal x4840=(x4818*x4820);
IkReal x4841=((2.658)*x4820*x4822);
IkReal x4842=((2.658)*x4817*x4822);
IkReal x4843=((0.886)*x4817*x4822);
IkReal x4844=((0.886)*x4820*x4822);
IkReal x4845=(x4827+x4835+x4837+x4836);
IkReal x4846=(x4829+x4839+x4838+x4840);
IkReal x4847=(x4826+x4833+x4834+x4841+x4842);
IkReal x4848=(x4828+x4831+x4832+x4844+x4843);
j1evalpoly[0]=((((-1.0)*x4846))+(((-1.0)*x4816))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x4845))+x4816+x4847))))+(((htj1*htj1)*(((((-1.0)*x4845))+(((-1.0)*x4816))+x4847))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x4846))+x4816+x4848))))+x4848);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x4849=(cj1*cj5);
IkReal x4850=(sj1*sj3);
IkReal x4851=(cj4*r22);
IkReal x4852=((1.0)*sj4);
IkReal x4853=(r20*sj5);
IkReal x4854=(cj1*sj3);
IkReal x4855=(r21*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*cj5*r21*x4850*x4852))+(((-1.0)*x4850*x4852*x4853))+(((-1.0)*cj1*x4855))+((r20*x4849))+((x4850*x4851)))))+(IKabs(((((-1.0)*cj5*r20*sj1))+(((-1.0)*x4852*x4853*x4854))+(((-1.0)*r21*sj3*x4849*x4852))+((sj1*x4855))+((x4851*x4854))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4856=(cj4*r22);
IkReal x4857=(cj1*cj5);
IkReal x4858=(cj5*sj1);
IkReal x4859=(r21*sj5);
IkReal x4860=((1.0)*r21*sj4);
IkReal x4861=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x4857*x4860))+((sj1*x4859))+(((-1.0)*cj1*x4861))+((cj1*x4856))+(((-1.0)*r20*x4858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x4859))+(((-1.0)*x4858*x4860))+(((-1.0)*sj1*x4861))+((r20*x4857))+((sj1*x4856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4857*x4860))+((sj1*x4859))+(((-1.0)*cj1*x4861))+((cj1*x4856))+(((-1.0)*r20*x4858))))+IKsqr(((((-1.0)*cj1*x4859))+(((-1.0)*x4858*x4860))+(((-1.0)*sj1*x4861))+((r20*x4857))+((sj1*x4856))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4857*x4860))+((sj1*x4859))+(((-1.0)*cj1*x4861))+((cj1*x4856))+(((-1.0)*r20*x4858))), ((((-1.0)*cj1*x4859))+(((-1.0)*x4858*x4860))+(((-1.0)*sj1*x4861))+((r20*x4857))+((sj1*x4856))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4862=IKcos(j2);
IkReal x4863=IKsin(j2);
IkReal x4864=((0.2215)*sj1);
IkReal x4865=((0.0055)*sj5);
IkReal x4866=(r10*sj0);
IkReal x4867=(cj5*sj4);
IkReal x4868=(cj0*r00);
IkReal x4869=((1.0)*cj4);
IkReal x4870=(cj0*r01);
IkReal x4871=((1.0)*sj0);
IkReal x4872=(sj4*sj5);
IkReal x4873=((0.0055)*cj5);
IkReal x4874=(r11*sj0);
IkReal x4875=((1.0)*sj5);
IkReal x4876=(sj1*x4862);
IkReal x4877=(cj1*x4863);
IkReal x4878=(cj1*x4862);
IkReal x4879=(sj1*x4863);
IkReal x4880=(x4877+x4876);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x4875))+(((-1.0)*x4878))+x4879);
evalcond[1]=(((r20*x4872))+(((-1.0)*r22*x4869))+x4880+((r21*x4867)));
evalcond[2]=((((-1.0)*x4870*x4875))+(((-1.0)*r11*sj5*x4871))+x4880+((cj5*x4866))+((cj5*x4868)));
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(cj4,-1);
if(!x4881.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x4881.value)))+((x4862*x4864))+(((-1.0)*pz))+(((0.03)*x4878))+(((-0.03)*x4879))+(((0.2215)*x4877)));
evalcond[4]=(((x4868*x4872))+((x4867*x4874))+((x4867*x4870))+(((-1.0)*cj0*r02*x4869))+((x4866*x4872))+(((-1.0)*x4879))+(((-1.0)*r12*sj0*x4869))+x4878);
evalcond[5]=((((-1.0)*x4863*x4864))+(((-1.0)*py*x4871))+(((-1.0)*x4870*x4873))+(((-0.21)*sj1))+(((-0.03)*x4876))+(((-0.03)*x4877))+(((-1.0)*x4873*x4874))+(((-1.0)*cj0*px))+(((-1.0)*x4865*x4868))+(((-1.0)*x4865*x4866))+(((0.2215)*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4882=((1.0)*sj5);
IkReal x4883=(r20*sj4);
IkReal x4884=(r21*sj1);
IkReal x4885=(cj4*r22);
IkReal x4886=(cj1*r21);
IkReal x4887=((1.0)*cj5);
if( IKabs(((((-1.0)*cj1*x4882*x4883))+((cj5*r20*sj1))+(((-1.0)*x4882*x4884))+(((-1.0)*sj4*x4886*x4887))+((cj1*x4885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x4886))+(((-1.0)*sj4*x4884*x4887))+(((-1.0)*sj1*x4882*x4883))+((sj1*x4885))+(((-1.0)*cj1*r20*x4887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x4882*x4883))+((cj5*r20*sj1))+(((-1.0)*x4882*x4884))+(((-1.0)*sj4*x4886*x4887))+((cj1*x4885))))+IKsqr((((sj5*x4886))+(((-1.0)*sj4*x4884*x4887))+(((-1.0)*sj1*x4882*x4883))+((sj1*x4885))+(((-1.0)*cj1*r20*x4887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x4882*x4883))+((cj5*r20*sj1))+(((-1.0)*x4882*x4884))+(((-1.0)*sj4*x4886*x4887))+((cj1*x4885))), (((sj5*x4886))+(((-1.0)*sj4*x4884*x4887))+(((-1.0)*sj1*x4882*x4883))+((sj1*x4885))+(((-1.0)*cj1*r20*x4887))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4888=IKcos(j2);
IkReal x4889=IKsin(j2);
IkReal x4890=((0.2215)*sj1);
IkReal x4891=(sj0*sj5);
IkReal x4892=(cj5*sj4);
IkReal x4893=((1.0)*cj4);
IkReal x4894=((1.0)*sj1);
IkReal x4895=(cj0*r01);
IkReal x4896=(sj4*sj5);
IkReal x4897=((0.0055)*cj5);
IkReal x4898=(cj0*r00);
IkReal x4899=(r11*sj0);
IkReal x4900=((1.0)*sj5);
IkReal x4901=(cj1*x4888);
IkReal x4902=(cj1*x4889);
IkReal x4903=(sj1*x4888);
IkReal x4904=(x4889*x4894);
evalcond[0]=(x4901+((cj5*r20))+(((-1.0)*x4904))+(((-1.0)*r21*x4900)));
evalcond[1]=(x4903+x4902+((r21*x4892))+((r20*x4896))+(((-1.0)*r22*x4893)));
evalcond[2]=((((-1.0)*r11*x4891))+(((-1.0)*x4888*x4894))+(((-1.0)*x4902))+((cj5*r10*sj0))+((cj5*x4898))+(((-1.0)*x4895*x4900)));
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(cj4,-1);
if(!x4905.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x4905.value)))+((x4888*x4890))+(((-1.0)*pz))+(((0.03)*x4901))+(((-0.03)*sj1*x4889))+(((0.2215)*x4902)));
evalcond[4]=(x4901+((r10*sj4*x4891))+(((-1.0)*x4904))+((x4892*x4899))+((x4892*x4895))+(((-1.0)*r12*sj0*x4893))+((x4896*x4898))+(((-1.0)*cj0*r02*x4893)));
evalcond[5]=((((-0.0055)*sj5*x4898))+(((-0.03)*x4902))+(((-0.03)*x4903))+(((-1.0)*x4897*x4899))+(((-0.0055)*r10*x4891))+(((-1.0)*x4895*x4897))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*x4889*x4890))+(((-1.0)*cj0*px))+(((0.2215)*x4901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4906=((1.0)*sj4);
IkReal x4907=(r20*sj5);
IkReal x4908=(r22*sj1);
IkReal x4909=(cj1*r22);
IkReal x4910=(cj5*r21);
IkReal x4911=(cj1*cj4);
IkReal x4912=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x4910*x4912))+(((-1.0)*x4906*x4908))+(((-1.0)*x4907*x4912))+((cj4*x4909))+(((-1.0)*cj1*x4906*x4907))+(((-1.0)*cj1*x4906*x4910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x4906*x4907))+((sj4*x4909))+(((-1.0)*sj1*x4906*x4910))+((x4907*x4911))+((x4910*x4911))+((cj4*x4908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4910*x4912))+(((-1.0)*x4906*x4908))+(((-1.0)*x4907*x4912))+((cj4*x4909))+(((-1.0)*cj1*x4906*x4907))+(((-1.0)*cj1*x4906*x4910))))+IKsqr(((((-1.0)*sj1*x4906*x4907))+((sj4*x4909))+(((-1.0)*sj1*x4906*x4910))+((x4907*x4911))+((x4910*x4911))+((cj4*x4908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4910*x4912))+(((-1.0)*x4906*x4908))+(((-1.0)*x4907*x4912))+((cj4*x4909))+(((-1.0)*cj1*x4906*x4907))+(((-1.0)*cj1*x4906*x4910))), ((((-1.0)*sj1*x4906*x4907))+((sj4*x4909))+(((-1.0)*sj1*x4906*x4910))+((x4907*x4911))+((x4910*x4911))+((cj4*x4908))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4913=IKcos(j2);
IkReal x4914=IKsin(j2);
IkReal x4915=((0.2215)*sj1);
IkReal x4916=(cj0*r01);
IkReal x4917=((1.0)*sj0);
IkReal x4918=((0.0055)*sj5);
IkReal x4919=(r10*sj0);
IkReal x4920=(cj5*sj4);
IkReal x4921=((1.0)*cj4);
IkReal x4922=(cj0*r02);
IkReal x4923=(r20*sj5);
IkReal x4924=((1.0)*sj1);
IkReal x4925=((0.0055)*cj5);
IkReal x4926=(cj0*r00);
IkReal x4927=(r11*sj0);
IkReal x4928=(sj4*sj5);
IkReal x4929=((1.0)*sj4);
IkReal x4930=(cj1*x4913);
IkReal x4931=(cj5*x4921);
IkReal x4932=(cj1*x4914);
IkReal x4933=(sj1*x4913);
IkReal x4934=(x4914*x4924);
evalcond[0]=(x4932+x4933+((sj4*x4923))+((r21*x4920))+(((-1.0)*r22*x4921)));
evalcond[1]=(x4930+(((-1.0)*r21*x4931))+(((-1.0)*r22*x4929))+(((-1.0)*x4921*x4923))+(((-1.0)*x4934)));
evalcond[2]=((((0.21)*cj1))+(((0.03)*x4930))+(((-1.0)*pz))+(((-0.03)*sj1*x4914))+((x4913*x4915))+(((-1.0)*r21*x4925))+(((0.2215)*x4932))+(((-1.0)*r20*x4918)));
evalcond[3]=(x4930+((x4919*x4928))+(((-1.0)*cj4*r12*x4917))+((x4926*x4928))+((x4920*x4927))+(((-1.0)*x4921*x4922))+(((-1.0)*x4934))+((x4916*x4920)));
evalcond[4]=((((-1.0)*cj4*r10*sj5*x4917))+(((-1.0)*x4932))+(((-1.0)*r12*sj4*x4917))+(((-1.0)*sj5*x4921*x4926))+(((-1.0)*x4916*x4931))+(((-1.0)*x4913*x4924))+(((-1.0)*x4922*x4929))+(((-1.0)*cj4*cj5*r11*x4917)));
evalcond[5]=((((-1.0)*x4918*x4919))+(((-1.0)*x4916*x4925))+(((-1.0)*x4918*x4926))+(((-0.03)*x4933))+(((-0.03)*x4932))+(((0.2215)*x4930))+(((-0.21)*sj1))+(((-1.0)*py*x4917))+(((-1.0)*x4914*x4915))+(((-1.0)*cj0*px))+(((-1.0)*x4925*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4935=(cj4*r22);
IkReal x4936=((1.0)*cj1);
IkReal x4937=(sj1*sj4);
IkReal x4938=(cj5*r21);
IkReal x4939=(cj4*r20*sj5);
IkReal x4940=((1.0)*r20*sj4*sj5);
if( IKabs((((r22*x4937))+(((-1.0)*r20*sj4*sj5*x4936))+(((-1.0)*sj4*x4936*x4938))+((cj4*sj1*x4938))+((sj1*x4939))+((cj1*x4935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*sj4*x4936))+(((-1.0)*r20*sj5*x4937))+(((-1.0)*cj4*x4936*x4938))+(((-1.0)*x4937*x4938))+((sj1*x4935))+(((-1.0)*x4936*x4939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x4937))+(((-1.0)*r20*sj4*sj5*x4936))+(((-1.0)*sj4*x4936*x4938))+((cj4*sj1*x4938))+((sj1*x4939))+((cj1*x4935))))+IKsqr(((((-1.0)*r22*sj4*x4936))+(((-1.0)*r20*sj5*x4937))+(((-1.0)*cj4*x4936*x4938))+(((-1.0)*x4937*x4938))+((sj1*x4935))+(((-1.0)*x4936*x4939))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x4937))+(((-1.0)*r20*sj4*sj5*x4936))+(((-1.0)*sj4*x4936*x4938))+((cj4*sj1*x4938))+((sj1*x4939))+((cj1*x4935))), ((((-1.0)*r22*sj4*x4936))+(((-1.0)*r20*sj5*x4937))+(((-1.0)*cj4*x4936*x4938))+(((-1.0)*x4937*x4938))+((sj1*x4935))+(((-1.0)*x4936*x4939))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4941=IKsin(j2);
IkReal x4942=IKcos(j2);
IkReal x4943=(cj0*r01);
IkReal x4944=((1.0)*sj0);
IkReal x4945=((0.0055)*sj5);
IkReal x4946=(r10*sj0);
IkReal x4947=(cj5*sj4);
IkReal x4948=((1.0)*cj4);
IkReal x4949=(cj0*r02);
IkReal x4950=(r20*sj5);
IkReal x4951=((0.0055)*cj5);
IkReal x4952=(cj0*r00);
IkReal x4953=(r11*sj0);
IkReal x4954=(sj4*sj5);
IkReal x4955=((1.0)*sj4);
IkReal x4956=(sj1*x4942);
IkReal x4957=(cj1*x4941);
IkReal x4958=(cj1*x4942);
IkReal x4959=(sj1*x4941);
IkReal x4960=(cj5*x4948);
IkReal x4961=(x4956+x4957);
evalcond[0]=(x4961+((r21*x4947))+(((-1.0)*r22*x4948))+((sj4*x4950)));
evalcond[1]=((((-1.0)*r21*x4960))+x4959+(((-1.0)*r22*x4955))+(((-1.0)*x4958))+(((-1.0)*x4948*x4950)));
evalcond[2]=((((-1.0)*r21*x4951))+(((0.03)*x4958))+(((-1.0)*r20*x4945))+(((0.21)*cj1))+(((0.2215)*x4956))+(((0.2215)*x4957))+(((-0.03)*x4959))+(((-1.0)*pz)));
evalcond[3]=(x4958+((x4943*x4947))+(((-1.0)*x4948*x4949))+(((-1.0)*x4959))+((x4947*x4953))+((x4952*x4954))+((x4946*x4954))+(((-1.0)*cj4*r12*x4944)));
evalcond[4]=(x4961+(((-1.0)*x4943*x4960))+(((-1.0)*cj4*r10*sj5*x4944))+(((-1.0)*r12*sj4*x4944))+(((-1.0)*x4949*x4955))+(((-1.0)*cj4*cj5*r11*x4944))+(((-1.0)*sj5*x4948*x4952)));
evalcond[5]=((((-1.0)*x4943*x4951))+(((0.2215)*x4958))+(((-0.03)*x4957))+(((-0.03)*x4956))+(((-1.0)*x4945*x4946))+(((-1.0)*x4945*x4952))+(((-1.0)*py*x4944))+(((-0.21)*sj1))+(((-0.2215)*x4959))+(((-1.0)*cj0*px))+(((-1.0)*x4951*x4953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4962=(cj5*r21);
IkReal x4963=(cj1*sj4);
IkReal x4964=(r20*sj5);
IkReal x4965=(cj1*cj4);
IkReal x4966=((1.0)*cj3);
IkReal x4967=((1.0)*sj1*sj4);
IkReal x4968=(cj3*cj4*r22);
IkReal x4969=((1.0)*cj4*sj1);
CheckValue<IkReal> x4970 = IKatan2WithCheck(IkReal((((cj3*r22*x4965))+(((-1.0)*r22*x4967))+(((-1.0)*x4962*x4969))+(((-1.0)*x4964*x4969))+(((-1.0)*x4962*x4963*x4966))+(((-1.0)*x4963*x4964*x4966)))),IkReal(((((-1.0)*sj1*sj4*x4964*x4966))+((r22*x4963))+((x4964*x4965))+((sj1*x4968))+(((-1.0)*sj1*sj4*x4962*x4966))+((x4962*x4965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4970.valid){
continue;
}
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4971.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4970.value)+(((1.5707963267949)*(x4971.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4972=IKcos(j2);
IkReal x4973=IKsin(j2);
IkReal x4974=(cj0*r01);
IkReal x4975=((1.0)*sj0);
IkReal x4976=((0.0055)*sj5);
IkReal x4977=(r10*sj0);
IkReal x4978=((1.0)*cj3);
IkReal x4979=(cj5*sj4);
IkReal x4980=((1.0)*cj4);
IkReal x4981=(r20*sj5);
IkReal x4982=(cj0*r02);
IkReal x4983=((0.0055)*cj5);
IkReal x4984=(cj0*r00);
IkReal x4985=(r11*sj0);
IkReal x4986=((1.0)*sj5);
IkReal x4987=(sj4*sj5);
IkReal x4988=((1.0)*sj4);
IkReal x4989=(cj1*x4972);
IkReal x4990=(sj1*x4973);
IkReal x4991=(cj5*x4980);
IkReal x4992=(cj1*x4973);
IkReal x4993=(sj1*x4972);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x4986))+((sj3*x4990))+(((-1.0)*sj3*x4989)));
evalcond[1]=(x4992+x4993+(((-1.0)*r22*x4980))+((sj4*x4981))+((r21*x4979)));
evalcond[2]=((((-1.0)*r21*x4991))+(((-1.0)*r22*x4988))+(((-1.0)*x4978*x4990))+(((-1.0)*x4980*x4981))+((cj3*x4989)));
evalcond[3]=((((-1.0)*r11*sj5*x4975))+((cj5*x4984))+(((-1.0)*x4974*x4986))+((cj5*x4977))+((sj3*x4993))+((sj3*x4992)));
evalcond[4]=((((0.2215)*x4992))+(((0.2215)*x4993))+(((-0.03)*x4990))+(((0.03)*x4989))+(((-1.0)*r21*x4983))+(((0.21)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x4976)));
evalcond[5]=(x4989+((x4984*x4987))+((x4979*x4985))+((x4974*x4979))+((x4977*x4987))+(((-1.0)*x4980*x4982))+(((-1.0)*x4990))+(((-1.0)*cj4*r12*x4975)));
evalcond[6]=((((-1.0)*x4982*x4988))+(((-1.0)*sj5*x4980*x4984))+(((-1.0)*x4978*x4992))+(((-1.0)*x4978*x4993))+(((-1.0)*r12*sj4*x4975))+(((-1.0)*cj4*r10*sj5*x4975))+(((-1.0)*cj4*cj5*r11*x4975))+(((-1.0)*x4974*x4991)));
evalcond[7]=((((-0.2215)*x4990))+(((-0.03)*x4993))+(((-0.03)*x4992))+(((-1.0)*x4976*x4977))+(((0.2215)*x4989))+(((-1.0)*py*x4975))+(((-0.21)*sj1))+(((-1.0)*x4974*x4983))+(((-1.0)*x4983*x4985))+(((-1.0)*cj0*px))+(((-1.0)*x4976*x4984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4994=(sj0*sj1);
IkReal x4995=(r11*sj5);
IkReal x4996=(cj1*sj5);
IkReal x4997=(cj0*r01);
IkReal x4998=(cj1*cj5);
IkReal x4999=((1.0)*r10);
IkReal x5000=(cj0*r00);
IkReal x5001=(sj1*sj5);
IkReal x5002=((1.0)*cj5*sj1);
CheckValue<IkReal> x5003=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5003.valid){
continue;
}
CheckValue<IkReal> x5004 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x4998*x4999))+((x4996*x4997))+((r21*x5001))+(((-1.0)*x4998*x5000))+((cj1*sj0*x4995))+(((-1.0)*r20*x5002)))),IkReal((((x4994*x4995))+((x4997*x5001))+((r20*x4998))+(((-1.0)*x5000*x5002))+(((-1.0)*r21*x4996))+(((-1.0)*cj5*x4994*x4999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5004.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5003.value)))+(x5004.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5005=IKcos(j2);
IkReal x5006=IKsin(j2);
IkReal x5007=(cj0*r01);
IkReal x5008=((1.0)*sj0);
IkReal x5009=((0.0055)*sj5);
IkReal x5010=(r10*sj0);
IkReal x5011=((1.0)*cj3);
IkReal x5012=(cj5*sj4);
IkReal x5013=((1.0)*cj4);
IkReal x5014=(r20*sj5);
IkReal x5015=(cj0*r02);
IkReal x5016=((0.0055)*cj5);
IkReal x5017=(cj0*r00);
IkReal x5018=(r11*sj0);
IkReal x5019=((1.0)*sj5);
IkReal x5020=(sj4*sj5);
IkReal x5021=((1.0)*sj4);
IkReal x5022=(cj1*x5005);
IkReal x5023=(sj1*x5006);
IkReal x5024=(cj5*x5013);
IkReal x5025=(cj1*x5006);
IkReal x5026=(sj1*x5005);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x5019))+(((-1.0)*sj3*x5022))+((sj3*x5023)));
evalcond[1]=((((-1.0)*r22*x5013))+x5025+x5026+((sj4*x5014))+((r21*x5012)));
evalcond[2]=((((-1.0)*r21*x5024))+((cj3*x5022))+(((-1.0)*x5013*x5014))+(((-1.0)*r22*x5021))+(((-1.0)*x5011*x5023)));
evalcond[3]=((((-1.0)*r11*sj5*x5008))+((sj3*x5026))+((sj3*x5025))+(((-1.0)*x5007*x5019))+((cj5*x5017))+((cj5*x5010)));
evalcond[4]=((((0.2215)*x5025))+(((0.2215)*x5026))+(((0.21)*cj1))+(((-1.0)*r21*x5016))+(((-1.0)*pz))+(((-1.0)*r20*x5009))+(((0.03)*x5022))+(((-0.03)*x5023)));
evalcond[5]=(((x5010*x5020))+((x5007*x5012))+(((-1.0)*x5023))+((x5017*x5020))+x5022+(((-1.0)*x5013*x5015))+((x5012*x5018))+(((-1.0)*cj4*r12*x5008)));
evalcond[6]=((((-1.0)*cj4*cj5*r11*x5008))+(((-1.0)*cj4*r10*sj5*x5008))+(((-1.0)*x5015*x5021))+(((-1.0)*sj5*x5013*x5017))+(((-1.0)*x5007*x5024))+(((-1.0)*r12*sj4*x5008))+(((-1.0)*x5011*x5025))+(((-1.0)*x5011*x5026)));
evalcond[7]=((((-1.0)*x5009*x5010))+(((-1.0)*x5009*x5017))+(((0.2215)*x5022))+(((-1.0)*x5016*x5018))+(((-0.21)*sj1))+(((-1.0)*x5007*x5016))+(((-1.0)*py*x5008))+(((-0.2215)*x5023))+(((-1.0)*cj0*px))+(((-0.03)*x5025))+(((-0.03)*x5026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5027=(sj3*sj4);
IkReal x5028=(r21*sj1);
IkReal x5029=(cj1*r20);
IkReal x5030=((1.0)*r20*sj1);
IkReal x5031=(cj4*r22*sj3);
IkReal x5032=((1.0)*cj1*r21);
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5033.valid){
continue;
}
CheckValue<IkReal> x5034 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x5027*x5029))+(((-1.0)*cj5*x5027*x5032))+(((-1.0)*cj5*x5030))+((cj1*x5031))+((sj5*x5028)))),IkReal((((cj5*x5029))+(((-1.0)*sj5*x5027*x5030))+(((-1.0)*sj5*x5032))+((sj1*x5031))+(((-1.0)*cj5*x5027*x5028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5034.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5033.value)))+(x5034.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5035=IKcos(j2);
IkReal x5036=IKsin(j2);
IkReal x5037=(cj0*r01);
IkReal x5038=((1.0)*sj0);
IkReal x5039=((0.0055)*sj5);
IkReal x5040=(r10*sj0);
IkReal x5041=((1.0)*cj3);
IkReal x5042=(cj5*sj4);
IkReal x5043=((1.0)*cj4);
IkReal x5044=(r20*sj5);
IkReal x5045=(cj0*r02);
IkReal x5046=((0.0055)*cj5);
IkReal x5047=(cj0*r00);
IkReal x5048=(r11*sj0);
IkReal x5049=((1.0)*sj5);
IkReal x5050=(sj4*sj5);
IkReal x5051=((1.0)*sj4);
IkReal x5052=(cj1*x5035);
IkReal x5053=(sj1*x5036);
IkReal x5054=(cj5*x5043);
IkReal x5055=(cj1*x5036);
IkReal x5056=(sj1*x5035);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x5049))+(((-1.0)*sj3*x5052))+((sj3*x5053)));
evalcond[1]=(((r21*x5042))+x5055+x5056+((sj4*x5044))+(((-1.0)*r22*x5043)));
evalcond[2]=(((cj3*x5052))+(((-1.0)*x5041*x5053))+(((-1.0)*x5043*x5044))+(((-1.0)*r22*x5051))+(((-1.0)*r21*x5054)));
evalcond[3]=(((cj5*x5040))+((cj5*x5047))+(((-1.0)*x5037*x5049))+(((-1.0)*r11*sj5*x5038))+((sj3*x5055))+((sj3*x5056)));
evalcond[4]=((((0.2215)*x5055))+(((0.2215)*x5056))+(((0.21)*cj1))+(((-1.0)*r21*x5046))+(((-1.0)*pz))+(((-0.03)*x5053))+(((0.03)*x5052))+(((-1.0)*r20*x5039)));
evalcond[5]=(((x5047*x5050))+((x5037*x5042))+(((-1.0)*x5043*x5045))+((x5042*x5048))+x5052+((x5040*x5050))+(((-1.0)*x5053))+(((-1.0)*cj4*r12*x5038)));
evalcond[6]=((((-1.0)*sj5*x5043*x5047))+(((-1.0)*x5041*x5055))+(((-1.0)*x5041*x5056))+(((-1.0)*cj4*r10*sj5*x5038))+(((-1.0)*r12*sj4*x5038))+(((-1.0)*x5037*x5054))+(((-1.0)*cj4*cj5*r11*x5038))+(((-1.0)*x5045*x5051)));
evalcond[7]=((((0.2215)*x5052))+(((-1.0)*x5037*x5046))+(((-0.2215)*x5053))+(((-0.03)*x5056))+(((-0.03)*x5055))+(((-1.0)*py*x5038))+(((-1.0)*x5039*x5047))+(((-1.0)*x5039*x5040))+(((-0.21)*sj1))+(((-1.0)*x5046*x5048))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5057=(cj3*cj4);
IkReal x5058=((1.0)*cj3*sj4);
CheckValue<IkReal> x5059=IKPowWithIntegerCheck(IKsign((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))),-1);
if(!x5059.valid){
continue;
}
CheckValue<IkReal> x5060 = IKatan2WithCheck(IkReal((((r12*x5057))+(((-1.0)*r10*sj5*x5058))+(((-1.0)*cj5*r11*x5058)))),IkReal(((((-1.0)*cj5*r01*x5058))+(((-1.0)*r00*sj5*x5058))+((r02*x5057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5060.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5059.value)))+(x5060.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5061=IKsin(j0);
IkReal x5062=IKcos(j0);
IkReal x5063=((1.0)*sj4);
IkReal x5064=((1.0)*cj4);
IkReal x5065=(sj5*x5062);
IkReal x5066=(r02*x5061);
IkReal x5067=(cj5*x5062);
IkReal x5068=((1.0)*x5061);
IkReal x5069=(r12*x5062);
IkReal x5070=(cj5*r01*x5061);
IkReal x5071=(r00*sj5*x5061);
evalcond[0]=(cj3+(((-1.0)*r01*sj5*x5068))+(((-1.0)*r10*x5067))+((r11*x5065))+((cj5*r00*x5061)));
evalcond[1]=(((py*x5062))+(((0.0055)*r11*x5067))+(((0.0055)*r10*x5065))+(((-0.0055)*x5070))+(((-0.0055)*x5071))+(((-1.0)*px*x5068)));
evalcond[2]=((((-1.0)*r11*x5063*x5067))+((sj4*x5071))+((sj4*x5070))+(((-1.0)*r10*x5063*x5065))+((cj4*x5069))+(((-1.0)*x5064*x5066)));
evalcond[3]=((((-1.0)*x5064*x5070))+(((-1.0)*x5064*x5071))+sj3+((cj4*r10*x5065))+((sj4*x5069))+(((-1.0)*x5063*x5066))+((cj4*r11*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5072=((0.84)*cj3);
IkReal x5073=((0.84)*sj3);
IkReal x5074=((0.886)*sj4);
IkReal x5075=(cj5*r20);
IkReal x5076=((2.658)*sj4);
IkReal x5077=((0.022)*cj3);
IkReal x5078=(r20*sj5);
IkReal x5079=(cj5*r21);
IkReal x5080=(pz*sj3);
IkReal x5081=(r22*sj4);
IkReal x5082=((0.36)*cj4);
IkReal x5083=((0.12)*cj4);
IkReal x5084=((0.066)*cj3);
IkReal x5085=(r21*sj5);
IkReal x5086=(cj3*pz);
IkReal x5087=((12.0)*x5086);
IkReal x5088=((0.36)*x5081);
IkReal x5089=((0.36)*x5085);
IkReal x5090=((12.0)*x5080);
IkReal x5091=((0.36)*x5075);
IkReal x5092=(sj3*x5078);
IkReal x5093=(sj3*x5079);
IkReal x5094=(cj4*r22*sj3);
IkReal x5095=(cj3*cj4*r22);
IkReal x5096=(x5079*x5084);
IkReal x5097=(x5078*x5084);
IkReal x5098=((2.658)*x5095);
IkReal x5099=(x5078*x5082);
IkReal x5100=(x5079*x5082);
IkReal x5101=((0.066)*x5093);
IkReal x5102=((0.066)*x5092);
IkReal x5103=((2.658)*x5094);
IkReal x5104=(cj3*x5076*x5079);
IkReal x5105=(cj3*x5076*x5078);
IkReal x5106=(x5076*x5092);
IkReal x5107=(x5076*x5093);
IkReal x5108=(x5103+x5091);
IkReal x5109=(x5100+x5098+x5099+x5088);
IkReal x5110=(x5104+x5105+x5096+x5097+x5087);
IkReal x5111=(x5102+x5101+x5106+x5107+x5090+x5089);
j1eval[0]=((IKabs((((x5074*x5093))+((x5074*x5092))+(((0.12)*x5085))+(((-0.12)*x5075))+x5073+(((0.022)*x5092))+(((0.022)*x5093))+(((-0.886)*x5094))+(((4.0)*x5080)))))+(IKabs(((((-1.0)*x5109))+x5110+x5072)))+(IKabs((((cj3*x5074*x5078))+((cj3*x5074*x5079))+(((-1.0)*x5079*x5083))+x5072+(((-1.0)*x5078*x5083))+((x5077*x5079))+((x5077*x5078))+(((-0.12)*x5081))+(((-0.886)*x5095))+(((4.0)*x5086)))))+(IKabs(((((-1.0)*x5108))+x5111+x5073)))+(IKabs(((((-1.0)*x5108))+(((-1.0)*x5073))+x5111)))+(IKabs(((((-1.0)*x5109))+(((-1.0)*x5072))+x5110))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5112=((0.84)*sj3);
IkReal x5113=(cj5*r20);
IkReal x5114=(pz*sj3);
IkReal x5115=((2.658)*sj4);
IkReal x5116=((0.886)*sj4);
IkReal x5117=(r21*sj5);
IkReal x5118=((0.36)*x5117);
IkReal x5119=((12.0)*x5114);
IkReal x5120=((0.36)*x5113);
IkReal x5121=((0.12)*x5117);
IkReal x5122=((4.0)*x5114);
IkReal x5123=((0.12)*x5113);
IkReal x5124=(r20*sj3*sj5);
IkReal x5125=(cj5*r21*sj3);
IkReal x5126=(cj4*r22*sj3);
IkReal x5127=((0.066)*x5125);
IkReal x5128=((0.066)*x5124);
IkReal x5129=((2.658)*x5126);
IkReal x5130=((0.022)*x5125);
IkReal x5131=((0.022)*x5124);
IkReal x5132=((0.886)*x5126);
IkReal x5133=(x5115*x5124);
IkReal x5134=(x5115*x5125);
IkReal x5135=(x5116*x5124);
IkReal x5136=(x5116*x5125);
IkReal x5137=(x5123+x5132);
IkReal x5138=(x5129+x5120);
IkReal x5139=(x5119+x5118+x5128+x5127+x5134+x5133);
IkReal x5140=(x5121+x5122+x5136+x5135+x5131+x5130);
op[0]=(x5112+x5140+(((-1.0)*x5137)));
op[1]=0;
op[2]=(x5112+x5139+(((-1.0)*x5138)));
op[3]=0;
op[4]=(x5139+(((-1.0)*x5138))+(((-1.0)*x5112)));
op[5]=0;
op[6]=(x5140+(((-1.0)*x5137))+(((-1.0)*x5112)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5141=((0.84)*cj3);
IkReal x5142=(r20*sj5);
IkReal x5143=((0.12)*cj4);
IkReal x5144=((0.022)*cj3);
IkReal x5145=(cj5*r21);
IkReal x5146=(r22*sj4);
IkReal x5147=(cj3*sj4);
IkReal x5148=((0.36)*cj4);
IkReal x5149=((0.066)*cj3);
IkReal x5150=(cj3*pz);
IkReal x5151=((12.0)*x5150);
IkReal x5152=((0.36)*x5146);
IkReal x5153=((4.0)*x5150);
IkReal x5154=((0.12)*x5146);
IkReal x5155=(cj3*cj4*r22);
IkReal x5156=(x5144*x5145);
IkReal x5157=(x5142*x5144);
IkReal x5158=(x5145*x5149);
IkReal x5159=(x5142*x5149);
IkReal x5160=((2.658)*x5155);
IkReal x5161=(x5142*x5148);
IkReal x5162=(x5145*x5148);
IkReal x5163=(x5142*x5143);
IkReal x5164=((0.886)*x5155);
IkReal x5165=(x5143*x5145);
IkReal x5166=((2.658)*x5145*x5147);
IkReal x5167=((2.658)*x5142*x5147);
IkReal x5168=((0.886)*x5142*x5147);
IkReal x5169=((0.886)*x5145*x5147);
IkReal x5170=(x5152+x5160+x5161+x5162);
IkReal x5171=(x5154+x5163+x5164+x5165);
IkReal x5172=(x5159+x5158+x5151+x5166+x5167);
IkReal x5173=(x5153+x5157+x5156+x5168+x5169);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*(((((-1.0)*x5170))+x5172+x5141))))+(((-1.0)*x5171))+x5173+(((-1.0)*x5141))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x5171))+x5173+x5141))))+(((htj1*htj1)*(((((-1.0)*x5170))+x5172+(((-1.0)*x5141)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5174=(cj1*cj5);
IkReal x5175=(sj1*sj3);
IkReal x5176=(cj4*r22);
IkReal x5177=((1.0)*sj4);
IkReal x5178=(r20*sj5);
IkReal x5179=(cj1*sj3);
IkReal x5180=(r21*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r20*x5174))+(((-1.0)*cj1*x5180))+((x5175*x5176))+(((-1.0)*cj5*r21*x5175*x5177))+(((-1.0)*x5175*x5177*x5178)))))+(IKabs(((((-1.0)*cj5*r20*sj1))+(((-1.0)*x5177*x5178*x5179))+((sj1*x5180))+(((-1.0)*r21*sj3*x5174*x5177))+((x5176*x5179))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5181=(cj4*r22);
IkReal x5182=(cj1*cj5);
IkReal x5183=(cj5*sj1);
IkReal x5184=(r21*sj5);
IkReal x5185=((1.0)*r21*sj4);
IkReal x5186=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*x5181))+(((-1.0)*cj1*x5186))+(((-1.0)*x5182*x5185))+((sj1*x5184))+(((-1.0)*r20*x5183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5183*x5185))+((r20*x5182))+(((-1.0)*sj1*x5186))+(((-1.0)*cj1*x5184))+((sj1*x5181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5181))+(((-1.0)*cj1*x5186))+(((-1.0)*x5182*x5185))+((sj1*x5184))+(((-1.0)*r20*x5183))))+IKsqr(((((-1.0)*x5183*x5185))+((r20*x5182))+(((-1.0)*sj1*x5186))+(((-1.0)*cj1*x5184))+((sj1*x5181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5181))+(((-1.0)*cj1*x5186))+(((-1.0)*x5182*x5185))+((sj1*x5184))+(((-1.0)*r20*x5183))), ((((-1.0)*x5183*x5185))+((r20*x5182))+(((-1.0)*sj1*x5186))+(((-1.0)*cj1*x5184))+((sj1*x5181))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5187=IKcos(j2);
IkReal x5188=IKsin(j2);
IkReal x5189=((0.2215)*sj1);
IkReal x5190=((0.0055)*sj5);
IkReal x5191=(r10*sj0);
IkReal x5192=(cj5*sj4);
IkReal x5193=(cj0*r00);
IkReal x5194=((1.0)*cj4);
IkReal x5195=(cj0*r01);
IkReal x5196=((1.0)*sj0);
IkReal x5197=(sj4*sj5);
IkReal x5198=((0.0055)*cj5);
IkReal x5199=(r11*sj0);
IkReal x5200=((1.0)*sj5);
IkReal x5201=(sj1*x5187);
IkReal x5202=(cj1*x5188);
IkReal x5203=(cj1*x5187);
IkReal x5204=(sj1*x5188);
IkReal x5205=(x5201+x5202);
evalcond[0]=(((cj5*r20))+x5204+(((-1.0)*r21*x5200))+(((-1.0)*x5203)));
evalcond[1]=(((r21*x5192))+x5205+(((-1.0)*r22*x5194))+((r20*x5197)));
evalcond[2]=(x5205+(((-1.0)*r11*sj5*x5196))+((cj5*x5191))+((cj5*x5193))+(((-1.0)*x5195*x5200)));
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(cj4,-1);
if(!x5206.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.0055)*r22*sj4*(x5206.value)))+((x5187*x5189))+(((-0.03)*x5204))+(((-1.0)*pz))+(((0.03)*x5203))+(((0.2215)*x5202)));
evalcond[4]=(x5203+((x5193*x5197))+(((-1.0)*r12*sj0*x5194))+(((-1.0)*cj0*r02*x5194))+((x5192*x5195))+((x5192*x5199))+((x5191*x5197))+(((-1.0)*x5204)));
evalcond[5]=((((-1.0)*x5188*x5189))+(((-1.0)*py*x5196))+(((-1.0)*x5198*x5199))+(((-0.03)*x5201))+(((-0.03)*x5202))+(((-1.0)*x5190*x5193))+(((-1.0)*x5190*x5191))+(((-0.21)*sj1))+(((0.2215)*x5203))+(((-1.0)*x5195*x5198))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5207=((1.0)*sj5);
IkReal x5208=(r20*sj4);
IkReal x5209=(r21*sj1);
IkReal x5210=(cj4*r22);
IkReal x5211=(cj1*r21);
IkReal x5212=((1.0)*cj5);
if( IKabs((((cj5*r20*sj1))+((cj1*x5210))+(((-1.0)*cj1*x5207*x5208))+(((-1.0)*x5207*x5209))+(((-1.0)*sj4*x5211*x5212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r20*x5212))+((sj1*x5210))+((sj5*x5211))+(((-1.0)*sj1*x5207*x5208))+(((-1.0)*sj4*x5209*x5212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*sj1))+((cj1*x5210))+(((-1.0)*cj1*x5207*x5208))+(((-1.0)*x5207*x5209))+(((-1.0)*sj4*x5211*x5212))))+IKsqr(((((-1.0)*cj1*r20*x5212))+((sj1*x5210))+((sj5*x5211))+(((-1.0)*sj1*x5207*x5208))+(((-1.0)*sj4*x5209*x5212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*sj1))+((cj1*x5210))+(((-1.0)*cj1*x5207*x5208))+(((-1.0)*x5207*x5209))+(((-1.0)*sj4*x5211*x5212))), ((((-1.0)*cj1*r20*x5212))+((sj1*x5210))+((sj5*x5211))+(((-1.0)*sj1*x5207*x5208))+(((-1.0)*sj4*x5209*x5212))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5213=IKcos(j2);
IkReal x5214=IKsin(j2);
IkReal x5215=((0.2215)*sj1);
IkReal x5216=(sj0*sj5);
IkReal x5217=(cj5*sj4);
IkReal x5218=((1.0)*cj4);
IkReal x5219=((1.0)*sj1);
IkReal x5220=(cj0*r01);
IkReal x5221=(sj4*sj5);
IkReal x5222=((0.0055)*cj5);
IkReal x5223=(cj0*r00);
IkReal x5224=(r11*sj0);
IkReal x5225=((1.0)*sj5);
IkReal x5226=(cj1*x5213);
IkReal x5227=(cj1*x5214);
IkReal x5228=(sj1*x5213);
IkReal x5229=(x5214*x5219);
evalcond[0]=(((cj5*r20))+x5226+(((-1.0)*r21*x5225))+(((-1.0)*x5229)));
evalcond[1]=(x5228+x5227+(((-1.0)*r22*x5218))+((r20*x5221))+((r21*x5217)));
evalcond[2]=((((-1.0)*r11*x5216))+(((-1.0)*x5213*x5219))+((cj5*r10*sj0))+((cj5*x5223))+(((-1.0)*x5220*x5225))+(((-1.0)*x5227)));
CheckValue<IkReal> x5230=IKPowWithIntegerCheck(cj4,-1);
if(!x5230.valid){
continue;
}
evalcond[3]=((((0.21)*cj1))+(((0.03)*x5226))+(((0.0055)*r22*sj4*(x5230.value)))+(((-1.0)*pz))+(((0.2215)*x5227))+((x5213*x5215))+(((-0.03)*sj1*x5214)));
evalcond[4]=(((r10*sj4*x5216))+((x5217*x5220))+((x5217*x5224))+(((-1.0)*cj0*r02*x5218))+x5226+((x5221*x5223))+(((-1.0)*r12*sj0*x5218))+(((-1.0)*x5229)));
evalcond[5]=((((-0.0055)*sj5*x5223))+(((-1.0)*x5222*x5224))+(((-0.0055)*r10*x5216))+(((-1.0)*x5214*x5215))+(((0.2215)*x5226))+(((-1.0)*py*sj0))+(((-1.0)*x5220*x5222))+(((-0.21)*sj1))+(((-0.03)*x5227))+(((-0.03)*x5228))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5231=((1.0)*sj4);
IkReal x5232=(r20*sj5);
IkReal x5233=(r22*sj1);
IkReal x5234=(cj1*r22);
IkReal x5235=(cj5*r21);
IkReal x5236=(cj1*cj4);
IkReal x5237=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x5235*x5237))+(((-1.0)*x5232*x5237))+(((-1.0)*x5231*x5233))+(((-1.0)*cj1*x5231*x5235))+(((-1.0)*cj1*x5231*x5232))+((cj4*x5234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x5231*x5235))+(((-1.0)*sj1*x5231*x5232))+((x5235*x5236))+((x5232*x5236))+((sj4*x5234))+((cj4*x5233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5235*x5237))+(((-1.0)*x5232*x5237))+(((-1.0)*x5231*x5233))+(((-1.0)*cj1*x5231*x5235))+(((-1.0)*cj1*x5231*x5232))+((cj4*x5234))))+IKsqr(((((-1.0)*sj1*x5231*x5235))+(((-1.0)*sj1*x5231*x5232))+((x5235*x5236))+((x5232*x5236))+((sj4*x5234))+((cj4*x5233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5235*x5237))+(((-1.0)*x5232*x5237))+(((-1.0)*x5231*x5233))+(((-1.0)*cj1*x5231*x5235))+(((-1.0)*cj1*x5231*x5232))+((cj4*x5234))), ((((-1.0)*sj1*x5231*x5235))+(((-1.0)*sj1*x5231*x5232))+((x5235*x5236))+((x5232*x5236))+((sj4*x5234))+((cj4*x5233))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5238=IKcos(j2);
IkReal x5239=IKsin(j2);
IkReal x5240=((0.2215)*sj1);
IkReal x5241=(cj0*r01);
IkReal x5242=((1.0)*sj0);
IkReal x5243=((0.0055)*sj5);
IkReal x5244=(r10*sj0);
IkReal x5245=(cj5*sj4);
IkReal x5246=((1.0)*cj4);
IkReal x5247=(cj0*r02);
IkReal x5248=(r20*sj5);
IkReal x5249=((1.0)*sj1);
IkReal x5250=((0.0055)*cj5);
IkReal x5251=(cj0*r00);
IkReal x5252=(r11*sj0);
IkReal x5253=(sj4*sj5);
IkReal x5254=((1.0)*sj4);
IkReal x5255=(cj1*x5238);
IkReal x5256=(cj5*x5246);
IkReal x5257=(cj1*x5239);
IkReal x5258=(sj1*x5238);
IkReal x5259=(x5239*x5249);
evalcond[0]=((((-1.0)*r22*x5246))+x5257+x5258+((sj4*x5248))+((r21*x5245)));
evalcond[1]=((((-1.0)*x5259))+x5255+(((-1.0)*r22*x5254))+(((-1.0)*x5246*x5248))+(((-1.0)*r21*x5256)));
evalcond[2]=((((0.03)*x5255))+(((-1.0)*r20*x5243))+(((0.2215)*x5257))+((x5238*x5240))+(((0.21)*cj1))+(((-1.0)*pz))+(((-0.03)*sj1*x5239))+(((-1.0)*r21*x5250)));
evalcond[3]=(((x5245*x5252))+(((-1.0)*x5259))+((x5241*x5245))+x5255+((x5244*x5253))+((x5251*x5253))+(((-1.0)*x5246*x5247))+(((-1.0)*cj4*r12*x5242)));
evalcond[4]=((((-1.0)*x5257))+(((-1.0)*cj4*cj5*r11*x5242))+(((-1.0)*cj4*r10*sj5*x5242))+(((-1.0)*sj5*x5246*x5251))+(((-1.0)*r12*sj4*x5242))+(((-1.0)*x5241*x5256))+(((-1.0)*x5247*x5254))+(((-1.0)*x5238*x5249)));
evalcond[5]=((((-1.0)*py*x5242))+(((0.2215)*x5255))+(((-1.0)*x5243*x5244))+(((-1.0)*x5243*x5251))+(((-0.03)*x5257))+(((-0.03)*x5258))+(((-1.0)*x5250*x5252))+(((-1.0)*x5239*x5240))+(((-0.21)*sj1))+(((-1.0)*x5241*x5250))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5260=(cj4*r22);
IkReal x5261=((1.0)*cj1);
IkReal x5262=(sj1*sj4);
IkReal x5263=(cj5*r21);
IkReal x5264=(cj4*r20*sj5);
IkReal x5265=((1.0)*r20*sj4*sj5);
if( IKabs((((sj1*x5264))+((cj1*x5260))+((cj4*sj1*x5263))+(((-1.0)*r20*sj4*sj5*x5261))+(((-1.0)*sj4*x5261*x5263))+((r22*x5262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5260))+(((-1.0)*cj4*x5261*x5263))+(((-1.0)*x5262*x5263))+(((-1.0)*x5261*x5264))+(((-1.0)*r20*sj5*x5262))+(((-1.0)*r22*sj4*x5261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5264))+((cj1*x5260))+((cj4*sj1*x5263))+(((-1.0)*r20*sj4*sj5*x5261))+(((-1.0)*sj4*x5261*x5263))+((r22*x5262))))+IKsqr((((sj1*x5260))+(((-1.0)*cj4*x5261*x5263))+(((-1.0)*x5262*x5263))+(((-1.0)*x5261*x5264))+(((-1.0)*r20*sj5*x5262))+(((-1.0)*r22*sj4*x5261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5264))+((cj1*x5260))+((cj4*sj1*x5263))+(((-1.0)*r20*sj4*sj5*x5261))+(((-1.0)*sj4*x5261*x5263))+((r22*x5262))), (((sj1*x5260))+(((-1.0)*cj4*x5261*x5263))+(((-1.0)*x5262*x5263))+(((-1.0)*x5261*x5264))+(((-1.0)*r20*sj5*x5262))+(((-1.0)*r22*sj4*x5261))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5266=IKsin(j2);
IkReal x5267=IKcos(j2);
IkReal x5268=(cj0*r01);
IkReal x5269=((1.0)*sj0);
IkReal x5270=((0.0055)*sj5);
IkReal x5271=(r10*sj0);
IkReal x5272=(cj5*sj4);
IkReal x5273=((1.0)*cj4);
IkReal x5274=(cj0*r02);
IkReal x5275=(r20*sj5);
IkReal x5276=((0.0055)*cj5);
IkReal x5277=(cj0*r00);
IkReal x5278=(r11*sj0);
IkReal x5279=(sj4*sj5);
IkReal x5280=((1.0)*sj4);
IkReal x5281=(sj1*x5267);
IkReal x5282=(cj1*x5266);
IkReal x5283=(cj1*x5267);
IkReal x5284=(sj1*x5266);
IkReal x5285=(cj5*x5273);
IkReal x5286=(x5281+x5282);
evalcond[0]=(((r21*x5272))+x5286+((sj4*x5275))+(((-1.0)*r22*x5273)));
evalcond[1]=((((-1.0)*r22*x5280))+x5284+(((-1.0)*r21*x5285))+(((-1.0)*x5283))+(((-1.0)*x5273*x5275)));
evalcond[2]=((((0.03)*x5283))+(((0.21)*cj1))+(((0.2215)*x5281))+(((0.2215)*x5282))+(((-1.0)*r21*x5276))+(((-1.0)*pz))+(((-1.0)*r20*x5270))+(((-0.03)*x5284)));
evalcond[3]=(((x5272*x5278))+x5283+((x5268*x5272))+(((-1.0)*x5284))+((x5271*x5279))+((x5277*x5279))+(((-1.0)*cj4*r12*x5269))+(((-1.0)*x5273*x5274)));
evalcond[4]=((((-1.0)*cj4*cj5*r11*x5269))+(((-1.0)*x5274*x5280))+(((-1.0)*r12*sj4*x5269))+x5286+(((-1.0)*cj4*r10*sj5*x5269))+(((-1.0)*x5268*x5285))+(((-1.0)*sj5*x5273*x5277)));
evalcond[5]=((((-1.0)*py*x5269))+(((0.2215)*x5283))+(((-0.2215)*x5284))+(((-1.0)*x5276*x5278))+(((-1.0)*x5270*x5277))+(((-1.0)*x5270*x5271))+(((-0.21)*sj1))+(((-1.0)*x5268*x5276))+(((-1.0)*cj0*px))+(((-0.03)*x5281))+(((-0.03)*x5282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5287=(cj5*r21);
IkReal x5288=(cj1*sj4);
IkReal x5289=(r20*sj5);
IkReal x5290=(cj1*cj4);
IkReal x5291=((1.0)*cj3);
IkReal x5292=((1.0)*sj1*sj4);
IkReal x5293=(cj3*cj4*r22);
IkReal x5294=((1.0)*cj4*sj1);
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5295.valid){
continue;
}
CheckValue<IkReal> x5296 = IKatan2WithCheck(IkReal(((((-1.0)*x5287*x5288*x5291))+(((-1.0)*x5289*x5294))+(((-1.0)*r22*x5292))+(((-1.0)*x5287*x5294))+((cj3*r22*x5290))+(((-1.0)*x5288*x5289*x5291)))),IkReal((((sj1*x5293))+((r22*x5288))+((x5289*x5290))+(((-1.0)*sj1*sj4*x5289*x5291))+(((-1.0)*sj1*sj4*x5287*x5291))+((x5287*x5290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5296.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5295.value)))+(x5296.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5297=IKcos(j2);
IkReal x5298=IKsin(j2);
IkReal x5299=(cj0*r01);
IkReal x5300=((1.0)*sj0);
IkReal x5301=((0.0055)*sj5);
IkReal x5302=(r10*sj0);
IkReal x5303=((1.0)*cj3);
IkReal x5304=(cj5*sj4);
IkReal x5305=((1.0)*cj4);
IkReal x5306=(r20*sj5);
IkReal x5307=(cj0*r02);
IkReal x5308=((0.0055)*cj5);
IkReal x5309=(cj0*r00);
IkReal x5310=(r11*sj0);
IkReal x5311=((1.0)*sj5);
IkReal x5312=(sj4*sj5);
IkReal x5313=((1.0)*sj4);
IkReal x5314=(cj1*x5297);
IkReal x5315=(sj1*x5298);
IkReal x5316=(cj5*x5305);
IkReal x5317=(cj1*x5298);
IkReal x5318=(sj1*x5297);
evalcond[0]=(((sj3*x5315))+((cj5*r20))+(((-1.0)*sj3*x5314))+(((-1.0)*r21*x5311)));
evalcond[1]=((((-1.0)*r22*x5305))+((r21*x5304))+x5318+x5317+((sj4*x5306)));
evalcond[2]=((((-1.0)*x5303*x5315))+(((-1.0)*x5305*x5306))+((cj3*x5314))+(((-1.0)*r21*x5316))+(((-1.0)*r22*x5313)));
evalcond[3]=(((sj3*x5317))+((sj3*x5318))+(((-1.0)*r11*sj5*x5300))+(((-1.0)*x5299*x5311))+((cj5*x5302))+((cj5*x5309)));
evalcond[4]=((((0.21)*cj1))+(((0.03)*x5314))+(((-0.03)*x5315))+(((-1.0)*pz))+(((-1.0)*r21*x5308))+(((-1.0)*r20*x5301))+(((0.2215)*x5317))+(((0.2215)*x5318)));
evalcond[5]=((((-1.0)*x5305*x5307))+((x5302*x5312))+x5314+(((-1.0)*x5315))+((x5304*x5310))+((x5309*x5312))+((x5299*x5304))+(((-1.0)*cj4*r12*x5300)));
evalcond[6]=((((-1.0)*r12*sj4*x5300))+(((-1.0)*x5303*x5318))+(((-1.0)*x5303*x5317))+(((-1.0)*cj4*r10*sj5*x5300))+(((-1.0)*sj5*x5305*x5309))+(((-1.0)*x5307*x5313))+(((-1.0)*cj4*cj5*r11*x5300))+(((-1.0)*x5299*x5316)));
evalcond[7]=((((-0.2215)*x5315))+(((-1.0)*x5301*x5302))+(((-1.0)*x5301*x5309))+(((-0.03)*x5317))+(((-0.03)*x5318))+(((-1.0)*x5308*x5310))+(((-1.0)*py*x5300))+(((-0.21)*sj1))+(((0.2215)*x5314))+(((-1.0)*cj0*px))+(((-1.0)*x5299*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5319=(sj0*sj1);
IkReal x5320=(r11*sj5);
IkReal x5321=(cj1*sj5);
IkReal x5322=(cj0*r01);
IkReal x5323=(cj1*cj5);
IkReal x5324=((1.0)*r10);
IkReal x5325=(cj0*r00);
IkReal x5326=(sj1*sj5);
IkReal x5327=((1.0)*cj5*sj1);
CheckValue<IkReal> x5328=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5328.valid){
continue;
}
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5327))+(((-1.0)*x5323*x5325))+((cj1*sj0*x5320))+((x5321*x5322))+(((-1.0)*sj0*x5323*x5324))+((r21*x5326)))),IkReal((((x5322*x5326))+(((-1.0)*x5325*x5327))+((r20*x5323))+((x5319*x5320))+(((-1.0)*cj5*x5319*x5324))+(((-1.0)*r21*x5321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5328.value)))+(x5329.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5330=IKcos(j2);
IkReal x5331=IKsin(j2);
IkReal x5332=(cj0*r01);
IkReal x5333=((1.0)*sj0);
IkReal x5334=((0.0055)*sj5);
IkReal x5335=(r10*sj0);
IkReal x5336=((1.0)*cj3);
IkReal x5337=(cj5*sj4);
IkReal x5338=((1.0)*cj4);
IkReal x5339=(r20*sj5);
IkReal x5340=(cj0*r02);
IkReal x5341=((0.0055)*cj5);
IkReal x5342=(cj0*r00);
IkReal x5343=(r11*sj0);
IkReal x5344=((1.0)*sj5);
IkReal x5345=(sj4*sj5);
IkReal x5346=((1.0)*sj4);
IkReal x5347=(cj1*x5330);
IkReal x5348=(sj1*x5331);
IkReal x5349=(cj5*x5338);
IkReal x5350=(cj1*x5331);
IkReal x5351=(sj1*x5330);
evalcond[0]=(((cj5*r20))+((sj3*x5348))+(((-1.0)*r21*x5344))+(((-1.0)*sj3*x5347)));
evalcond[1]=(((sj4*x5339))+x5351+x5350+(((-1.0)*r22*x5338))+((r21*x5337)));
evalcond[2]=((((-1.0)*x5336*x5348))+((cj3*x5347))+(((-1.0)*x5338*x5339))+(((-1.0)*r22*x5346))+(((-1.0)*r21*x5349)));
evalcond[3]=(((cj5*x5335))+((sj3*x5351))+((sj3*x5350))+(((-1.0)*x5332*x5344))+((cj5*x5342))+(((-1.0)*r11*sj5*x5333)));
evalcond[4]=((((0.2215)*x5351))+(((0.2215)*x5350))+(((-1.0)*r20*x5334))+(((0.21)*cj1))+(((-0.03)*x5348))+(((-1.0)*pz))+(((0.03)*x5347))+(((-1.0)*r21*x5341)));
evalcond[5]=((((-1.0)*x5338*x5340))+((x5342*x5345))+x5347+((x5337*x5343))+(((-1.0)*cj4*r12*x5333))+((x5335*x5345))+(((-1.0)*x5348))+((x5332*x5337)));
evalcond[6]=((((-1.0)*x5332*x5349))+(((-1.0)*r12*sj4*x5333))+(((-1.0)*cj4*cj5*r11*x5333))+(((-1.0)*cj4*r10*sj5*x5333))+(((-1.0)*sj5*x5338*x5342))+(((-1.0)*x5336*x5350))+(((-1.0)*x5336*x5351))+(((-1.0)*x5340*x5346)));
evalcond[7]=((((-1.0)*x5334*x5342))+(((-0.03)*x5350))+(((-0.03)*x5351))+(((0.2215)*x5347))+(((-0.2215)*x5348))+(((-1.0)*x5332*x5341))+(((-1.0)*x5341*x5343))+(((-0.21)*sj1))+(((-1.0)*x5334*x5335))+(((-1.0)*cj0*px))+(((-1.0)*py*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5352=(sj3*sj4);
IkReal x5353=(r21*sj1);
IkReal x5354=(cj1*r20);
IkReal x5355=((1.0)*r20*sj1);
IkReal x5356=(cj4*r22*sj3);
IkReal x5357=((1.0)*cj1*r21);
CheckValue<IkReal> x5358=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5358.valid){
continue;
}
CheckValue<IkReal> x5359 = IKatan2WithCheck(IkReal((((sj5*x5353))+(((-1.0)*cj5*x5355))+(((-1.0)*cj5*x5352*x5357))+(((-1.0)*sj5*x5352*x5354))+((cj1*x5356)))),IkReal(((((-1.0)*sj5*x5357))+((sj1*x5356))+((cj5*x5354))+(((-1.0)*sj5*x5352*x5355))+(((-1.0)*cj5*x5352*x5353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5359.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5358.value)))+(x5359.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5360=IKcos(j2);
IkReal x5361=IKsin(j2);
IkReal x5362=(cj0*r01);
IkReal x5363=((1.0)*sj0);
IkReal x5364=((0.0055)*sj5);
IkReal x5365=(r10*sj0);
IkReal x5366=((1.0)*cj3);
IkReal x5367=(cj5*sj4);
IkReal x5368=((1.0)*cj4);
IkReal x5369=(r20*sj5);
IkReal x5370=(cj0*r02);
IkReal x5371=((0.0055)*cj5);
IkReal x5372=(cj0*r00);
IkReal x5373=(r11*sj0);
IkReal x5374=((1.0)*sj5);
IkReal x5375=(sj4*sj5);
IkReal x5376=((1.0)*sj4);
IkReal x5377=(cj1*x5360);
IkReal x5378=(sj1*x5361);
IkReal x5379=(cj5*x5368);
IkReal x5380=(cj1*x5361);
IkReal x5381=(sj1*x5360);
evalcond[0]=(((cj5*r20))+((sj3*x5378))+(((-1.0)*sj3*x5377))+(((-1.0)*r21*x5374)));
evalcond[1]=((((-1.0)*r22*x5368))+x5380+x5381+((sj4*x5369))+((r21*x5367)));
evalcond[2]=((((-1.0)*r22*x5376))+(((-1.0)*x5368*x5369))+((cj3*x5377))+(((-1.0)*x5366*x5378))+(((-1.0)*r21*x5379)));
evalcond[3]=((((-1.0)*r11*sj5*x5363))+(((-1.0)*x5362*x5374))+((sj3*x5381))+((sj3*x5380))+((cj5*x5372))+((cj5*x5365)));
evalcond[4]=((((0.2215)*x5380))+(((0.2215)*x5381))+(((0.21)*cj1))+(((0.03)*x5377))+(((-0.03)*x5378))+(((-1.0)*pz))+(((-1.0)*r20*x5364))+(((-1.0)*r21*x5371)));
evalcond[5]=((((-1.0)*cj4*r12*x5363))+x5377+((x5372*x5375))+(((-1.0)*x5378))+((x5365*x5375))+((x5362*x5367))+((x5367*x5373))+(((-1.0)*x5368*x5370)));
evalcond[6]=((((-1.0)*sj5*x5368*x5372))+(((-1.0)*cj4*cj5*r11*x5363))+(((-1.0)*x5370*x5376))+(((-1.0)*cj4*r10*sj5*x5363))+(((-1.0)*x5362*x5379))+(((-1.0)*x5366*x5381))+(((-1.0)*x5366*x5380))+(((-1.0)*r12*sj4*x5363)));
evalcond[7]=((((0.2215)*x5377))+(((-1.0)*x5371*x5373))+(((-1.0)*x5364*x5365))+(((-0.03)*x5381))+(((-0.03)*x5380))+(((-1.0)*x5362*x5371))+(((-1.0)*py*x5363))+(((-0.21)*sj1))+(((-1.0)*x5364*x5372))+(((-1.0)*cj0*px))+(((-0.2215)*x5378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5382=((0.0055)*cj3*cj5);
IkReal x5383=((0.0055)*cj3*sj5);
CheckValue<IkReal> x5384=IKPowWithIntegerCheck(IKsign((((rxp1_2*sj5))+(((-0.0055)*r22))+(((-1.0)*cj5*rxp0_2)))),-1);
if(!x5384.valid){
continue;
}
CheckValue<IkReal> x5385 = IKatan2WithCheck(IkReal((((r10*x5383))+((r11*x5382))+((cj3*py)))),IkReal((((r00*x5383))+((r01*x5382))+((cj3*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5385.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5384.value)))+(x5385.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5386=IKsin(j0);
IkReal x5387=IKcos(j0);
IkReal x5388=((1.0)*sj4);
IkReal x5389=((1.0)*cj4);
IkReal x5390=(sj5*x5387);
IkReal x5391=(r02*x5386);
IkReal x5392=(cj5*x5387);
IkReal x5393=((1.0)*x5386);
IkReal x5394=(r12*x5387);
IkReal x5395=(cj5*r01*x5386);
IkReal x5396=(r00*sj5*x5386);
evalcond[0]=(cj3+((cj5*r00*x5386))+(((-1.0)*r01*sj5*x5393))+((r11*x5390))+(((-1.0)*r10*x5392)));
evalcond[1]=((((0.0055)*r11*x5392))+(((-0.0055)*x5396))+(((-0.0055)*x5395))+((py*x5387))+(((0.0055)*r10*x5390))+(((-1.0)*px*x5393)));
evalcond[2]=(((cj4*x5394))+(((-1.0)*r11*x5388*x5392))+((sj4*x5395))+((sj4*x5396))+(((-1.0)*r10*x5388*x5390))+(((-1.0)*x5389*x5391)));
evalcond[3]=(((cj4*r10*x5390))+(((-1.0)*x5388*x5391))+sj3+((sj4*x5394))+(((-1.0)*x5389*x5396))+(((-1.0)*x5389*x5395))+((cj4*r11*x5392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5397=((0.84)*cj3);
IkReal x5398=((0.84)*sj3);
IkReal x5399=((0.886)*sj4);
IkReal x5400=(cj5*r20);
IkReal x5401=((2.658)*sj4);
IkReal x5402=((0.022)*cj3);
IkReal x5403=(r20*sj5);
IkReal x5404=(cj5*r21);
IkReal x5405=(pz*sj3);
IkReal x5406=(r22*sj4);
IkReal x5407=((0.36)*cj4);
IkReal x5408=((0.12)*cj4);
IkReal x5409=((0.066)*cj3);
IkReal x5410=(r21*sj5);
IkReal x5411=(cj3*pz);
IkReal x5412=((12.0)*x5411);
IkReal x5413=((0.36)*x5406);
IkReal x5414=((0.36)*x5410);
IkReal x5415=((12.0)*x5405);
IkReal x5416=((0.36)*x5400);
IkReal x5417=(sj3*x5403);
IkReal x5418=(sj3*x5404);
IkReal x5419=(cj4*r22*sj3);
IkReal x5420=(cj3*cj4*r22);
IkReal x5421=(x5404*x5409);
IkReal x5422=(x5403*x5409);
IkReal x5423=((2.658)*x5420);
IkReal x5424=(x5403*x5407);
IkReal x5425=(x5404*x5407);
IkReal x5426=((0.066)*x5418);
IkReal x5427=((0.066)*x5417);
IkReal x5428=((2.658)*x5419);
IkReal x5429=(cj3*x5401*x5404);
IkReal x5430=(cj3*x5401*x5403);
IkReal x5431=(x5401*x5417);
IkReal x5432=(x5401*x5418);
IkReal x5433=(x5428+x5416);
IkReal x5434=(x5425+x5424+x5423+x5413);
IkReal x5435=(x5429+x5421+x5422+x5412+x5430);
IkReal x5436=(x5427+x5426+x5414+x5415+x5432+x5431);
j1eval[0]=((IKabs((x5435+(((-1.0)*x5434))+(((-1.0)*x5397)))))+(IKabs((x5436+x5398+(((-1.0)*x5433)))))+(IKabs((x5435+x5397+(((-1.0)*x5434)))))+(IKabs(((((0.12)*x5410))+(((-0.886)*x5419))+x5398+(((-0.12)*x5400))+((x5399*x5417))+((x5399*x5418))+(((4.0)*x5405))+(((0.022)*x5417))+(((0.022)*x5418)))))+(IKabs((x5436+(((-1.0)*x5433))+(((-1.0)*x5398)))))+(IKabs(((((-1.0)*x5403*x5408))+x5397+(((-1.0)*x5404*x5408))+((cj3*x5399*x5404))+((cj3*x5399*x5403))+(((-0.12)*x5406))+((x5402*x5404))+((x5402*x5403))+(((-0.886)*x5420))+(((4.0)*x5411))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5437=((0.84)*sj3);
IkReal x5438=(cj5*r20);
IkReal x5439=(pz*sj3);
IkReal x5440=((2.658)*sj4);
IkReal x5441=((0.886)*sj4);
IkReal x5442=(r21*sj5);
IkReal x5443=((0.36)*x5442);
IkReal x5444=((12.0)*x5439);
IkReal x5445=((0.36)*x5438);
IkReal x5446=((0.12)*x5442);
IkReal x5447=((4.0)*x5439);
IkReal x5448=((0.12)*x5438);
IkReal x5449=(r20*sj3*sj5);
IkReal x5450=(cj5*r21*sj3);
IkReal x5451=(cj4*r22*sj3);
IkReal x5452=((0.066)*x5450);
IkReal x5453=((0.066)*x5449);
IkReal x5454=((2.658)*x5451);
IkReal x5455=((0.022)*x5450);
IkReal x5456=((0.022)*x5449);
IkReal x5457=((0.886)*x5451);
IkReal x5458=(x5440*x5449);
IkReal x5459=(x5440*x5450);
IkReal x5460=(x5441*x5449);
IkReal x5461=(x5441*x5450);
IkReal x5462=(x5457+x5448);
IkReal x5463=(x5454+x5445);
IkReal x5464=(x5458+x5459+x5452+x5453+x5443+x5444);
IkReal x5465=(x5461+x5460+x5455+x5456+x5447+x5446);
op[0]=(x5465+x5437+(((-1.0)*x5462)));
op[1]=0;
op[2]=(x5464+x5437+(((-1.0)*x5463)));
op[3]=0;
op[4]=(x5464+(((-1.0)*x5437))+(((-1.0)*x5463)));
op[5]=0;
op[6]=(x5465+(((-1.0)*x5437))+(((-1.0)*x5462)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5466=((0.84)*cj3);
IkReal x5467=(r20*sj5);
IkReal x5468=((0.12)*cj4);
IkReal x5469=((0.022)*cj3);
IkReal x5470=(cj5*r21);
IkReal x5471=(r22*sj4);
IkReal x5472=(cj3*sj4);
IkReal x5473=((0.36)*cj4);
IkReal x5474=((0.066)*cj3);
IkReal x5475=(cj3*pz);
IkReal x5476=((12.0)*x5475);
IkReal x5477=((0.36)*x5471);
IkReal x5478=((4.0)*x5475);
IkReal x5479=((0.12)*x5471);
IkReal x5480=(cj3*cj4*r22);
IkReal x5481=(x5469*x5470);
IkReal x5482=(x5467*x5469);
IkReal x5483=(x5470*x5474);
IkReal x5484=(x5467*x5474);
IkReal x5485=((2.658)*x5480);
IkReal x5486=(x5467*x5473);
IkReal x5487=(x5470*x5473);
IkReal x5488=(x5467*x5468);
IkReal x5489=((0.886)*x5480);
IkReal x5490=(x5468*x5470);
IkReal x5491=((2.658)*x5470*x5472);
IkReal x5492=((2.658)*x5467*x5472);
IkReal x5493=((0.886)*x5467*x5472);
IkReal x5494=((0.886)*x5470*x5472);
IkReal x5495=(x5477+x5487+x5486+x5485);
IkReal x5496=(x5479+x5490+x5489+x5488);
IkReal x5497=(x5476+x5491+x5492+x5484+x5483);
IkReal x5498=(x5478+x5494+x5493+x5482+x5481);
j1evalpoly[0]=(x5498+(((-1.0)*x5496))+(((htj1*htj1*htj1*htj1)*((x5466+x5497+(((-1.0)*x5495))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5466+x5498+(((-1.0)*x5496))))))+(((htj1*htj1)*((x5497+(((-1.0)*x5495))+(((-1.0)*x5466))))))+(((-1.0)*x5466)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5499=(cj1*cj5);
IkReal x5500=(sj1*sj3);
IkReal x5501=(cj4*r22);
IkReal x5502=((1.0)*sj4);
IkReal x5503=(r20*sj5);
IkReal x5504=(cj1*sj3);
IkReal x5505=(r21*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((r20*x5499))+(((-1.0)*cj5*r21*x5500*x5502))+(((-1.0)*cj1*x5505))+(((-1.0)*x5500*x5502*x5503))+((x5500*x5501)))))+(IKabs(((((-1.0)*cj5*r20*sj1))+((sj1*x5505))+((x5501*x5504))+(((-1.0)*r21*sj3*x5499*x5502))+(((-1.0)*x5502*x5503*x5504))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5506=(cj4*r22);
IkReal x5507=(cj1*cj5);
IkReal x5508=(cj5*sj1);
IkReal x5509=(r21*sj5);
IkReal x5510=((1.0)*r21*sj4);
IkReal x5511=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*x5506))+(((-1.0)*x5507*x5510))+((sj1*x5509))+(((-1.0)*r20*x5508))+(((-1.0)*cj1*x5511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x5507))+(((-1.0)*cj1*x5509))+((sj1*x5506))+(((-1.0)*x5508*x5510))+(((-1.0)*sj1*x5511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5506))+(((-1.0)*x5507*x5510))+((sj1*x5509))+(((-1.0)*r20*x5508))+(((-1.0)*cj1*x5511))))+IKsqr((((r20*x5507))+(((-1.0)*cj1*x5509))+((sj1*x5506))+(((-1.0)*x5508*x5510))+(((-1.0)*sj1*x5511))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5506))+(((-1.0)*x5507*x5510))+((sj1*x5509))+(((-1.0)*r20*x5508))+(((-1.0)*cj1*x5511))), (((r20*x5507))+(((-1.0)*cj1*x5509))+((sj1*x5506))+(((-1.0)*x5508*x5510))+(((-1.0)*sj1*x5511))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5512=IKcos(j2);
IkReal x5513=IKsin(j2);
IkReal x5514=((0.2215)*sj1);
IkReal x5515=((0.0055)*sj5);
IkReal x5516=(r10*sj0);
IkReal x5517=(cj5*sj4);
IkReal x5518=(cj0*r00);
IkReal x5519=((1.0)*cj4);
IkReal x5520=(cj0*r01);
IkReal x5521=((1.0)*sj0);
IkReal x5522=(sj4*sj5);
IkReal x5523=((0.0055)*cj5);
IkReal x5524=(r11*sj0);
IkReal x5525=((1.0)*sj5);
IkReal x5526=(sj1*x5512);
IkReal x5527=(cj1*x5513);
IkReal x5528=(cj1*x5512);
IkReal x5529=(sj1*x5513);
IkReal x5530=(x5526+x5527);
evalcond[0]=(((cj5*r20))+x5529+(((-1.0)*r21*x5525))+(((-1.0)*x5528)));
evalcond[1]=((((-1.0)*r22*x5519))+x5530+((r21*x5517))+((r20*x5522)));
evalcond[2]=(x5530+(((-1.0)*r11*sj5*x5521))+((cj5*x5518))+((cj5*x5516))+(((-1.0)*x5520*x5525)));
CheckValue<IkReal> x5531=IKPowWithIntegerCheck(cj4,-1);
if(!x5531.valid){
continue;
}
evalcond[3]=(((x5512*x5514))+(((0.21)*cj1))+(((0.2215)*x5527))+(((0.0055)*r22*sj4*(x5531.value)))+(((-1.0)*pz))+(((-0.03)*x5529))+(((0.03)*x5528)));
evalcond[4]=(((x5516*x5522))+(((-1.0)*cj0*r02*x5519))+x5528+((x5518*x5522))+(((-1.0)*x5529))+((x5517*x5520))+((x5517*x5524))+(((-1.0)*r12*sj0*x5519)));
evalcond[5]=((((-1.0)*x5523*x5524))+(((-1.0)*x5513*x5514))+(((0.2215)*x5528))+(((-1.0)*x5515*x5518))+(((-1.0)*x5515*x5516))+(((-0.03)*x5527))+(((-0.03)*x5526))+(((-0.21)*sj1))+(((-1.0)*py*x5521))+(((-1.0)*cj0*px))+(((-1.0)*x5520*x5523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5532=((1.0)*sj5);
IkReal x5533=(r20*sj4);
IkReal x5534=(r21*sj1);
IkReal x5535=(cj4*r22);
IkReal x5536=(cj1*r21);
IkReal x5537=((1.0)*cj5);
if( IKabs((((cj5*r20*sj1))+((cj1*x5535))+(((-1.0)*cj1*x5532*x5533))+(((-1.0)*sj4*x5536*x5537))+(((-1.0)*x5532*x5534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x5536))+(((-1.0)*cj1*r20*x5537))+(((-1.0)*sj4*x5534*x5537))+((sj1*x5535))+(((-1.0)*sj1*x5532*x5533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*sj1))+((cj1*x5535))+(((-1.0)*cj1*x5532*x5533))+(((-1.0)*sj4*x5536*x5537))+(((-1.0)*x5532*x5534))))+IKsqr((((sj5*x5536))+(((-1.0)*cj1*r20*x5537))+(((-1.0)*sj4*x5534*x5537))+((sj1*x5535))+(((-1.0)*sj1*x5532*x5533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*sj1))+((cj1*x5535))+(((-1.0)*cj1*x5532*x5533))+(((-1.0)*sj4*x5536*x5537))+(((-1.0)*x5532*x5534))), (((sj5*x5536))+(((-1.0)*cj1*r20*x5537))+(((-1.0)*sj4*x5534*x5537))+((sj1*x5535))+(((-1.0)*sj1*x5532*x5533))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5538=IKcos(j2);
IkReal x5539=IKsin(j2);
IkReal x5540=((0.2215)*sj1);
IkReal x5541=(sj0*sj5);
IkReal x5542=(cj5*sj4);
IkReal x5543=((1.0)*cj4);
IkReal x5544=((1.0)*sj1);
IkReal x5545=(cj0*r01);
IkReal x5546=(sj4*sj5);
IkReal x5547=((0.0055)*cj5);
IkReal x5548=(cj0*r00);
IkReal x5549=(r11*sj0);
IkReal x5550=((1.0)*sj5);
IkReal x5551=(cj1*x5538);
IkReal x5552=(cj1*x5539);
IkReal x5553=(sj1*x5538);
IkReal x5554=(x5539*x5544);
evalcond[0]=(((cj5*r20))+x5551+(((-1.0)*r21*x5550))+(((-1.0)*x5554)));
evalcond[1]=(x5553+x5552+((r20*x5546))+(((-1.0)*r22*x5543))+((r21*x5542)));
evalcond[2]=((((-1.0)*x5552))+(((-1.0)*x5538*x5544))+(((-1.0)*x5545*x5550))+((cj5*r10*sj0))+((cj5*x5548))+(((-1.0)*r11*x5541)));
CheckValue<IkReal> x5555=IKPowWithIntegerCheck(cj4,-1);
if(!x5555.valid){
continue;
}
evalcond[3]=(((x5538*x5540))+(((0.21)*cj1))+(((0.0055)*r22*sj4*(x5555.value)))+(((-1.0)*pz))+(((-0.03)*sj1*x5539))+(((0.03)*x5551))+(((0.2215)*x5552)));
evalcond[4]=(((x5542*x5549))+((x5542*x5545))+x5551+((x5546*x5548))+(((-1.0)*r12*sj0*x5543))+((r10*sj4*x5541))+(((-1.0)*cj0*r02*x5543))+(((-1.0)*x5554)));
evalcond[5]=((((-0.0055)*sj5*x5548))+(((-1.0)*x5539*x5540))+(((-1.0)*x5545*x5547))+(((-0.03)*x5553))+(((-0.03)*x5552))+(((-1.0)*py*sj0))+(((-0.21)*sj1))+(((-1.0)*x5547*x5549))+(((0.2215)*x5551))+(((-0.0055)*r10*x5541))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5556=((1.0)*sj4);
IkReal x5557=(r20*sj5);
IkReal x5558=(r22*sj1);
IkReal x5559=(cj1*r22);
IkReal x5560=(cj5*r21);
IkReal x5561=(cj1*cj4);
IkReal x5562=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x5557*x5562))+(((-1.0)*cj1*x5556*x5560))+((cj4*x5559))+(((-1.0)*x5556*x5558))+(((-1.0)*cj1*x5556*x5557))+(((-1.0)*x5560*x5562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5560*x5561))+(((-1.0)*sj1*x5556*x5557))+((cj4*x5558))+(((-1.0)*sj1*x5556*x5560))+((sj4*x5559))+((x5557*x5561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5557*x5562))+(((-1.0)*cj1*x5556*x5560))+((cj4*x5559))+(((-1.0)*x5556*x5558))+(((-1.0)*cj1*x5556*x5557))+(((-1.0)*x5560*x5562))))+IKsqr((((x5560*x5561))+(((-1.0)*sj1*x5556*x5557))+((cj4*x5558))+(((-1.0)*sj1*x5556*x5560))+((sj4*x5559))+((x5557*x5561))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5557*x5562))+(((-1.0)*cj1*x5556*x5560))+((cj4*x5559))+(((-1.0)*x5556*x5558))+(((-1.0)*cj1*x5556*x5557))+(((-1.0)*x5560*x5562))), (((x5560*x5561))+(((-1.0)*sj1*x5556*x5557))+((cj4*x5558))+(((-1.0)*sj1*x5556*x5560))+((sj4*x5559))+((x5557*x5561))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5563=IKcos(j2);
IkReal x5564=IKsin(j2);
IkReal x5565=((0.2215)*sj1);
IkReal x5566=(cj0*r01);
IkReal x5567=((1.0)*sj0);
IkReal x5568=((0.0055)*sj5);
IkReal x5569=(r10*sj0);
IkReal x5570=(cj5*sj4);
IkReal x5571=((1.0)*cj4);
IkReal x5572=(cj0*r02);
IkReal x5573=(r20*sj5);
IkReal x5574=((1.0)*sj1);
IkReal x5575=((0.0055)*cj5);
IkReal x5576=(cj0*r00);
IkReal x5577=(r11*sj0);
IkReal x5578=(sj4*sj5);
IkReal x5579=((1.0)*sj4);
IkReal x5580=(cj1*x5563);
IkReal x5581=(cj5*x5571);
IkReal x5582=(cj1*x5564);
IkReal x5583=(sj1*x5563);
IkReal x5584=(x5564*x5574);
evalcond[0]=(x5582+x5583+((r21*x5570))+((sj4*x5573))+(((-1.0)*r22*x5571)));
evalcond[1]=(x5580+(((-1.0)*r21*x5581))+(((-1.0)*x5571*x5573))+(((-1.0)*x5584))+(((-1.0)*r22*x5579)));
evalcond[2]=((((0.21)*cj1))+((x5563*x5565))+(((-1.0)*pz))+(((-0.03)*sj1*x5564))+(((0.03)*x5580))+(((-1.0)*r20*x5568))+(((0.2215)*x5582))+(((-1.0)*r21*x5575)));
evalcond[3]=((((-1.0)*cj4*r12*x5567))+x5580+((x5566*x5570))+((x5569*x5578))+(((-1.0)*x5571*x5572))+(((-1.0)*x5584))+((x5576*x5578))+((x5570*x5577)));
evalcond[4]=((((-1.0)*x5566*x5581))+(((-1.0)*x5582))+(((-1.0)*x5563*x5574))+(((-1.0)*r12*sj4*x5567))+(((-1.0)*sj5*x5571*x5576))+(((-1.0)*x5572*x5579))+(((-1.0)*cj4*cj5*r11*x5567))+(((-1.0)*cj4*r10*sj5*x5567)));
evalcond[5]=((((-1.0)*x5564*x5565))+(((-1.0)*py*x5567))+(((-1.0)*x5568*x5569))+(((-1.0)*x5568*x5576))+(((-0.21)*sj1))+(((0.2215)*x5580))+(((-1.0)*x5566*x5575))+(((-1.0)*x5575*x5577))+(((-1.0)*cj0*px))+(((-0.03)*x5583))+(((-0.03)*x5582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5585=(cj4*r22);
IkReal x5586=((1.0)*cj1);
IkReal x5587=(sj1*sj4);
IkReal x5588=(cj5*r21);
IkReal x5589=(cj4*r20*sj5);
IkReal x5590=((1.0)*r20*sj4*sj5);
if( IKabs((((sj1*x5589))+(((-1.0)*r20*sj4*sj5*x5586))+((cj4*sj1*x5588))+(((-1.0)*sj4*x5586*x5588))+((r22*x5587))+((cj1*x5585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*sj4*x5586))+(((-1.0)*x5586*x5589))+((sj1*x5585))+(((-1.0)*x5587*x5588))+(((-1.0)*cj4*x5586*x5588))+(((-1.0)*r20*sj5*x5587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5589))+(((-1.0)*r20*sj4*sj5*x5586))+((cj4*sj1*x5588))+(((-1.0)*sj4*x5586*x5588))+((r22*x5587))+((cj1*x5585))))+IKsqr(((((-1.0)*r22*sj4*x5586))+(((-1.0)*x5586*x5589))+((sj1*x5585))+(((-1.0)*x5587*x5588))+(((-1.0)*cj4*x5586*x5588))+(((-1.0)*r20*sj5*x5587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5589))+(((-1.0)*r20*sj4*sj5*x5586))+((cj4*sj1*x5588))+(((-1.0)*sj4*x5586*x5588))+((r22*x5587))+((cj1*x5585))), ((((-1.0)*r22*sj4*x5586))+(((-1.0)*x5586*x5589))+((sj1*x5585))+(((-1.0)*x5587*x5588))+(((-1.0)*cj4*x5586*x5588))+(((-1.0)*r20*sj5*x5587))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5591=IKsin(j2);
IkReal x5592=IKcos(j2);
IkReal x5593=(cj0*r01);
IkReal x5594=((1.0)*sj0);
IkReal x5595=((0.0055)*sj5);
IkReal x5596=(r10*sj0);
IkReal x5597=(cj5*sj4);
IkReal x5598=((1.0)*cj4);
IkReal x5599=(cj0*r02);
IkReal x5600=(r20*sj5);
IkReal x5601=((0.0055)*cj5);
IkReal x5602=(cj0*r00);
IkReal x5603=(r11*sj0);
IkReal x5604=(sj4*sj5);
IkReal x5605=((1.0)*sj4);
IkReal x5606=(sj1*x5592);
IkReal x5607=(cj1*x5591);
IkReal x5608=(cj1*x5592);
IkReal x5609=(sj1*x5591);
IkReal x5610=(cj5*x5598);
IkReal x5611=(x5607+x5606);
evalcond[0]=(((r21*x5597))+x5611+((sj4*x5600))+(((-1.0)*r22*x5598)));
evalcond[1]=(x5609+(((-1.0)*x5608))+(((-1.0)*r22*x5605))+(((-1.0)*x5598*x5600))+(((-1.0)*r21*x5610)));
evalcond[2]=((((0.2215)*x5607))+(((0.2215)*x5606))+(((0.21)*cj1))+(((-1.0)*r20*x5595))+(((0.03)*x5608))+(((-1.0)*pz))+(((-1.0)*r21*x5601))+(((-0.03)*x5609)));
evalcond[3]=(((x5596*x5604))+x5608+(((-1.0)*x5609))+((x5593*x5597))+((x5602*x5604))+(((-1.0)*x5598*x5599))+(((-1.0)*cj4*r12*x5594))+((x5597*x5603)));
evalcond[4]=(x5611+(((-1.0)*cj4*cj5*r11*x5594))+(((-1.0)*x5599*x5605))+(((-1.0)*r12*sj4*x5594))+(((-1.0)*sj5*x5598*x5602))+(((-1.0)*x5593*x5610))+(((-1.0)*cj4*r10*sj5*x5594)));
evalcond[5]=((((-1.0)*x5595*x5596))+(((0.2215)*x5608))+(((-1.0)*py*x5594))+(((-1.0)*x5601*x5603))+(((-0.2215)*x5609))+(((-0.21)*sj1))+(((-0.03)*x5606))+(((-0.03)*x5607))+(((-1.0)*x5593*x5601))+(((-1.0)*cj0*px))+(((-1.0)*x5595*x5602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5612=(cj5*r21);
IkReal x5613=(cj1*sj4);
IkReal x5614=(r20*sj5);
IkReal x5615=(cj1*cj4);
IkReal x5616=((1.0)*cj3);
IkReal x5617=((1.0)*sj1*sj4);
IkReal x5618=(cj3*cj4*r22);
IkReal x5619=((1.0)*cj4*sj1);
CheckValue<IkReal> x5620=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5620.valid){
continue;
}
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(((((-1.0)*x5612*x5619))+((cj3*r22*x5615))+(((-1.0)*r22*x5617))+(((-1.0)*x5613*x5614*x5616))+(((-1.0)*x5612*x5613*x5616))+(((-1.0)*x5614*x5619)))),IkReal(((((-1.0)*sj1*sj4*x5612*x5616))+((sj1*x5618))+((x5614*x5615))+((x5612*x5615))+(((-1.0)*sj1*sj4*x5614*x5616))+((r22*x5613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5620.value)))+(x5621.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5622=IKcos(j2);
IkReal x5623=IKsin(j2);
IkReal x5624=(cj0*r01);
IkReal x5625=((1.0)*sj0);
IkReal x5626=((0.0055)*sj5);
IkReal x5627=(r10*sj0);
IkReal x5628=((1.0)*cj3);
IkReal x5629=(cj5*sj4);
IkReal x5630=((1.0)*cj4);
IkReal x5631=(r20*sj5);
IkReal x5632=(cj0*r02);
IkReal x5633=((0.0055)*cj5);
IkReal x5634=(cj0*r00);
IkReal x5635=(r11*sj0);
IkReal x5636=((1.0)*sj5);
IkReal x5637=(sj4*sj5);
IkReal x5638=((1.0)*sj4);
IkReal x5639=(cj1*x5622);
IkReal x5640=(sj1*x5623);
IkReal x5641=(cj5*x5630);
IkReal x5642=(cj1*x5623);
IkReal x5643=(sj1*x5622);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x5636))+(((-1.0)*sj3*x5639))+((sj3*x5640)));
evalcond[1]=(((sj4*x5631))+x5643+x5642+((r21*x5629))+(((-1.0)*r22*x5630)));
evalcond[2]=((((-1.0)*r21*x5641))+(((-1.0)*x5628*x5640))+((cj3*x5639))+(((-1.0)*x5630*x5631))+(((-1.0)*r22*x5638)));
evalcond[3]=(((cj5*x5634))+(((-1.0)*r11*sj5*x5625))+((sj3*x5642))+((sj3*x5643))+((cj5*x5627))+(((-1.0)*x5624*x5636)));
evalcond[4]=((((0.21)*cj1))+(((-0.03)*x5640))+(((0.2215)*x5643))+(((0.2215)*x5642))+(((-1.0)*r21*x5633))+(((-1.0)*pz))+(((-1.0)*r20*x5626))+(((0.03)*x5639)));
evalcond[5]=((((-1.0)*cj4*r12*x5625))+x5639+((x5624*x5629))+((x5627*x5637))+((x5629*x5635))+((x5634*x5637))+(((-1.0)*x5630*x5632))+(((-1.0)*x5640)));
evalcond[6]=((((-1.0)*x5632*x5638))+(((-1.0)*r12*sj4*x5625))+(((-1.0)*x5628*x5643))+(((-1.0)*x5628*x5642))+(((-1.0)*cj4*cj5*r11*x5625))+(((-1.0)*x5624*x5641))+(((-1.0)*sj5*x5630*x5634))+(((-1.0)*cj4*r10*sj5*x5625)));
evalcond[7]=((((-1.0)*x5633*x5635))+(((-0.03)*x5643))+(((-0.03)*x5642))+(((-1.0)*x5626*x5627))+(((-0.2215)*x5640))+(((-1.0)*py*x5625))+(((-0.21)*sj1))+(((-1.0)*x5626*x5634))+(((0.2215)*x5639))+(((-1.0)*cj0*px))+(((-1.0)*x5624*x5633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5644=(sj0*sj1);
IkReal x5645=(r11*sj5);
IkReal x5646=(cj1*sj5);
IkReal x5647=(cj0*r01);
IkReal x5648=(cj1*cj5);
IkReal x5649=((1.0)*r10);
IkReal x5650=(cj0*r00);
IkReal x5651=(sj1*sj5);
IkReal x5652=((1.0)*cj5*sj1);
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5653.valid){
continue;
}
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5652))+((cj1*sj0*x5645))+(((-1.0)*x5648*x5650))+((x5646*x5647))+((r21*x5651))+(((-1.0)*sj0*x5648*x5649)))),IkReal(((((-1.0)*cj5*x5644*x5649))+((x5644*x5645))+((x5647*x5651))+(((-1.0)*r21*x5646))+(((-1.0)*x5650*x5652))+((r20*x5648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5653.value)))+(x5654.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5655=IKcos(j2);
IkReal x5656=IKsin(j2);
IkReal x5657=(cj0*r01);
IkReal x5658=((1.0)*sj0);
IkReal x5659=((0.0055)*sj5);
IkReal x5660=(r10*sj0);
IkReal x5661=((1.0)*cj3);
IkReal x5662=(cj5*sj4);
IkReal x5663=((1.0)*cj4);
IkReal x5664=(r20*sj5);
IkReal x5665=(cj0*r02);
IkReal x5666=((0.0055)*cj5);
IkReal x5667=(cj0*r00);
IkReal x5668=(r11*sj0);
IkReal x5669=((1.0)*sj5);
IkReal x5670=(sj4*sj5);
IkReal x5671=((1.0)*sj4);
IkReal x5672=(cj1*x5655);
IkReal x5673=(sj1*x5656);
IkReal x5674=(cj5*x5663);
IkReal x5675=(cj1*x5656);
IkReal x5676=(sj1*x5655);
evalcond[0]=(((cj5*r20))+(((-1.0)*r21*x5669))+((sj3*x5673))+(((-1.0)*sj3*x5672)));
evalcond[1]=(x5675+x5676+(((-1.0)*r22*x5663))+((sj4*x5664))+((r21*x5662)));
evalcond[2]=((((-1.0)*r22*x5671))+((cj3*x5672))+(((-1.0)*x5663*x5664))+(((-1.0)*x5661*x5673))+(((-1.0)*r21*x5674)));
evalcond[3]=((((-1.0)*x5657*x5669))+(((-1.0)*r11*sj5*x5658))+((cj5*x5660))+((cj5*x5667))+((sj3*x5676))+((sj3*x5675)));
evalcond[4]=((((-1.0)*r21*x5666))+(((0.03)*x5672))+(((0.2215)*x5675))+(((0.2215)*x5676))+(((-1.0)*r20*x5659))+(((0.21)*cj1))+(((-1.0)*pz))+(((-0.03)*x5673)));
evalcond[5]=(x5672+(((-1.0)*x5673))+((x5660*x5670))+(((-1.0)*x5663*x5665))+((x5667*x5670))+((x5662*x5668))+((x5657*x5662))+(((-1.0)*cj4*r12*x5658)));
evalcond[6]=((((-1.0)*x5657*x5674))+(((-1.0)*cj4*r10*sj5*x5658))+(((-1.0)*r12*sj4*x5658))+(((-1.0)*x5665*x5671))+(((-1.0)*sj5*x5663*x5667))+(((-1.0)*x5661*x5675))+(((-1.0)*x5661*x5676))+(((-1.0)*cj4*cj5*r11*x5658)));
evalcond[7]=((((0.2215)*x5672))+(((-1.0)*x5666*x5668))+(((-1.0)*x5657*x5666))+(((-1.0)*x5659*x5660))+(((-1.0)*x5659*x5667))+(((-1.0)*py*x5658))+(((-0.03)*x5675))+(((-0.03)*x5676))+(((-0.2215)*x5673))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5677=(sj3*sj4);
IkReal x5678=(r21*sj1);
IkReal x5679=(cj1*r20);
IkReal x5680=((1.0)*r20*sj1);
IkReal x5681=(cj4*r22*sj3);
IkReal x5682=((1.0)*cj1*r21);
CheckValue<IkReal> x5683=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5683.valid){
continue;
}
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x5677*x5679))+((sj5*x5678))+((cj1*x5681))+(((-1.0)*cj5*x5680))+(((-1.0)*cj5*x5677*x5682)))),IkReal(((((-1.0)*sj5*x5682))+((sj1*x5681))+(((-1.0)*cj5*x5677*x5678))+((cj5*x5679))+(((-1.0)*sj5*x5677*x5680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5683.value)))+(x5684.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5685=IKcos(j2);
IkReal x5686=IKsin(j2);
IkReal x5687=(cj0*r01);
IkReal x5688=((1.0)*sj0);
IkReal x5689=((0.0055)*sj5);
IkReal x5690=(r10*sj0);
IkReal x5691=((1.0)*cj3);
IkReal x5692=(cj5*sj4);
IkReal x5693=((1.0)*cj4);
IkReal x5694=(r20*sj5);
IkReal x5695=(cj0*r02);
IkReal x5696=((0.0055)*cj5);
IkReal x5697=(cj0*r00);
IkReal x5698=(r11*sj0);
IkReal x5699=((1.0)*sj5);
IkReal x5700=(sj4*sj5);
IkReal x5701=((1.0)*sj4);
IkReal x5702=(cj1*x5685);
IkReal x5703=(sj1*x5686);
IkReal x5704=(cj5*x5693);
IkReal x5705=(cj1*x5686);
IkReal x5706=(sj1*x5685);
evalcond[0]=(((cj5*r20))+(((-1.0)*sj3*x5702))+((sj3*x5703))+(((-1.0)*r21*x5699)));
evalcond[1]=((((-1.0)*r22*x5693))+((r21*x5692))+((sj4*x5694))+x5705+x5706);
evalcond[2]=((((-1.0)*r22*x5701))+(((-1.0)*r21*x5704))+(((-1.0)*x5691*x5703))+(((-1.0)*x5693*x5694))+((cj3*x5702)));
evalcond[3]=((((-1.0)*x5687*x5699))+((cj5*x5690))+((cj5*x5697))+((sj3*x5706))+((sj3*x5705))+(((-1.0)*r11*sj5*x5688)));
evalcond[4]=((((0.21)*cj1))+(((-0.03)*x5703))+(((-1.0)*pz))+(((0.2215)*x5705))+(((0.2215)*x5706))+(((0.03)*x5702))+(((-1.0)*r20*x5689))+(((-1.0)*r21*x5696)));
evalcond[5]=(((x5687*x5692))+((x5690*x5700))+(((-1.0)*cj4*r12*x5688))+(((-1.0)*x5703))+((x5692*x5698))+((x5697*x5700))+(((-1.0)*x5693*x5695))+x5702);
evalcond[6]=((((-1.0)*sj5*x5693*x5697))+(((-1.0)*r12*sj4*x5688))+(((-1.0)*cj4*cj5*r11*x5688))+(((-1.0)*x5695*x5701))+(((-1.0)*cj4*r10*sj5*x5688))+(((-1.0)*x5691*x5706))+(((-1.0)*x5691*x5705))+(((-1.0)*x5687*x5704)));
evalcond[7]=((((-1.0)*x5696*x5698))+(((-0.03)*x5705))+(((-0.03)*x5706))+(((0.2215)*x5702))+(((-1.0)*x5687*x5696))+(((-0.2215)*x5703))+(((-1.0)*py*x5688))+(((-1.0)*x5689*x5697))+(((-1.0)*x5689*x5690))+(((-0.21)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - niryo_one (dee3b5650ead967548fdbe1e3197ac18)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
