
classdef RobotMoveCommand < ros.Message
    %RobotMoveCommand MATLAB implementation of niryo_one_msgs/RobotMoveCommand
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'niryo_one_msgs/RobotMoveCommand' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5bbb9c7bce0ebe9481f80b370579d1cf' % The MD5 Checksum of the message definition
        PropertyList = { 'Position' 'Rpy' 'Shift' 'Trajectory' 'PoseQuat' 'ToolCmd' 'CmdType' 'Joints' 'SavedPositionName' 'SavedTrajectoryId' } % List of non-constant message properties
        ROSPropertyList = { 'position' 'rpy' 'shift' 'Trajectory' 'pose_quat' 'tool_cmd' 'cmd_type' 'joints' 'saved_position_name' 'saved_trajectory_id' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Point' ...
			 'ros.msggen.niryo_one_msgs.RPY' ...
			 'ros.msggen.niryo_one_msgs.ShiftPose' ...
			 'ros.msggen.niryo_one_msgs.TrajectoryPlan' ...
			 'ros.msggen.geometry_msgs.Pose' ...
			 'ros.msggen.niryo_one_msgs.ToolCommand' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Position
        Rpy
        Shift
        Trajectory
        PoseQuat
        ToolCmd
        CmdType
        Joints
        SavedPositionName
        SavedTrajectoryId
    end
    methods
        function set.Position(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'Position')
            obj.Position = val;
        end
        function set.Rpy(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.niryo_one_msgs.RPY'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'Rpy')
            obj.Rpy = val;
        end
        function set.Shift(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.niryo_one_msgs.ShiftPose'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'Shift')
            obj.Shift = val;
        end
        function set.Trajectory(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.niryo_one_msgs.TrajectoryPlan'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'Trajectory')
            obj.Trajectory = val;
        end
        function set.PoseQuat(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'PoseQuat')
            obj.PoseQuat = val;
        end
        function set.ToolCmd(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.niryo_one_msgs.ToolCommand'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'ToolCmd')
            obj.ToolCmd = val;
        end
        function set.CmdType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'CmdType');
            obj.CmdType = int32(val);
        end
        function set.Joints(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'Joints');
            obj.Joints = double(val);
        end
        function set.SavedPositionName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'SavedPositionName');
            obj.SavedPositionName = char(val);
        end
        function set.SavedTrajectoryId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RobotMoveCommand', 'SavedTrajectoryId');
            obj.SavedTrajectoryId = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.niryo_one_msgs.RobotMoveCommand.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.niryo_one_msgs.RobotMoveCommand;
            obj.reload(strObj);
        end
    end
end
