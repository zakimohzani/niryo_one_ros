
classdef HardwareStatus < ros.Message
    %HardwareStatus MATLAB implementation of niryo_one_msgs/HardwareStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'niryo_one_msgs/HardwareStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f14fcd5176379337d6d5829d28cfd584' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'RpiTemperature' 'HardwareVersion' 'ConnectionUp' 'ErrorMessage' 'CalibrationNeeded' 'CalibrationInProgress' 'MotorNames' 'MotorTypes' 'Temperatures' 'Voltages' 'HardwareErrors' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'rpi_temperature' 'hardware_version' 'connection_up' 'error_message' 'calibration_needed' 'calibration_in_progress' 'motor_names' 'motor_types' 'temperatures' 'voltages' 'hardware_errors' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        RpiTemperature
        HardwareVersion
        ConnectionUp
        ErrorMessage
        CalibrationNeeded
        CalibrationInProgress
        MotorNames
        MotorTypes
        Temperatures
        Voltages
        HardwareErrors
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'Header')
            obj.Header = val;
        end
        function set.RpiTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'RpiTemperature');
            obj.RpiTemperature = int32(val);
        end
        function set.HardwareVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'HardwareVersion');
            obj.HardwareVersion = int32(val);
        end
        function set.ConnectionUp(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'ConnectionUp');
            obj.ConnectionUp = logical(val);
        end
        function set.ErrorMessage(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'ErrorMessage');
            obj.ErrorMessage = char(val);
        end
        function set.CalibrationNeeded(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'CalibrationNeeded');
            obj.CalibrationNeeded = int32(val);
        end
        function set.CalibrationInProgress(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'CalibrationInProgress');
            obj.CalibrationInProgress = logical(val);
        end
        function set.MotorNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'MotorNames');
            obj.MotorNames = cell(val);
        end
        function set.MotorTypes(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'MotorTypes');
            obj.MotorTypes = cell(val);
        end
        function set.Temperatures(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'Temperatures');
            obj.Temperatures = int32(val);
        end
        function set.Voltages(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'Voltages');
            obj.Voltages = double(val);
        end
        function set.HardwareErrors(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'HardwareStatus', 'HardwareErrors');
            obj.HardwareErrors = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.niryo_one_msgs.HardwareStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.niryo_one_msgs.HardwareStatus;
            obj.reload(strObj);
        end
    end
end
