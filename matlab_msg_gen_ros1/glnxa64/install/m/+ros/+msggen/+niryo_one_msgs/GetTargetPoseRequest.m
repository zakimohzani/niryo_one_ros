
classdef GetTargetPoseRequest < ros.Message
    %GetTargetPoseRequest MATLAB implementation of niryo_one_msgs/GetTargetPoseRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'niryo_one_msgs/GetTargetPoseRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '102311ad973ac34de88eb133d488960a' % The MD5 Checksum of the message definition
        PropertyList = { 'Workspace' 'Grip' 'ToolId' 'HeightOffset' 'XRel' 'YRel' 'YawRel' } % List of non-constant message properties
        ROSPropertyList = { 'workspace' 'grip' 'tool_id' 'height_offset' 'x_rel' 'y_rel' 'yaw_rel' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
        GRIPAUTO = 'auto';
    end
    properties
        Workspace
        Grip
        ToolId
        HeightOffset
        XRel
        YRel
        YawRel
    end
    methods
        function set.Workspace(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'Workspace');
            obj.Workspace = char(val);
        end
        function set.Grip(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'Grip');
            obj.Grip = char(val);
        end
        function set.ToolId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'ToolId');
            obj.ToolId = int32(val);
        end
        function set.HeightOffset(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'HeightOffset');
            obj.HeightOffset = single(val);
        end
        function set.XRel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'XRel');
            obj.XRel = single(val);
        end
        function set.YRel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'YRel');
            obj.YRel = single(val);
        end
        function set.YawRel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetTargetPoseRequest', 'YawRel');
            obj.YawRel = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.niryo_one_msgs.GetTargetPoseRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.niryo_one_msgs.GetTargetPoseRequest;
            obj.reload(strObj);
        end
    end
end
