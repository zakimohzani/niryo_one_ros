// Generated by gencpp from file obj_tf/ObjRecognised.msg
// DO NOT EDIT!


#ifndef OBJ_TF_MESSAGE_OBJRECOGNISED_H
#define OBJ_TF_MESSAGE_OBJRECOGNISED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace obj_tf
{
template <class ContainerAllocator>
struct ObjRecognised_
{
  typedef ObjRecognised_<ContainerAllocator> Type;

  ObjRecognised_()
    : detectedTime()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  ObjRecognised_(const ContainerAllocator& _alloc)
    : detectedTime()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _detectedTime_type;
  _detectedTime_type detectedTime;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::obj_tf::ObjRecognised_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obj_tf::ObjRecognised_<ContainerAllocator> const> ConstPtr;

}; // struct ObjRecognised_

typedef ::obj_tf::ObjRecognised_<std::allocator<void> > ObjRecognised;

typedef boost::shared_ptr< ::obj_tf::ObjRecognised > ObjRecognisedPtr;
typedef boost::shared_ptr< ::obj_tf::ObjRecognised const> ObjRecognisedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obj_tf::ObjRecognised_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obj_tf::ObjRecognised_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace obj_tf

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'obj_tf': ['/home/niryo/catkin_ws/src/matlab_msg_gen_ros1/glnxa64/src/obj_tf/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::obj_tf::ObjRecognised_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obj_tf::ObjRecognised_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obj_tf::ObjRecognised_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obj_tf::ObjRecognised_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obj_tf::ObjRecognised_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obj_tf::ObjRecognised_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obj_tf::ObjRecognised_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dce02b7de2874b19e0b00ae776e4cb9c";
  }

  static const char* value(const ::obj_tf::ObjRecognised_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdce02b7de2874b19ULL;
  static const uint64_t static_value2 = 0xe0b00ae776e4cb9cULL;
};

template<class ContainerAllocator>
struct DataType< ::obj_tf::ObjRecognised_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obj_tf/ObjRecognised";
  }

  static const char* value(const ::obj_tf::ObjRecognised_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obj_tf::ObjRecognised_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time detectedTime\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::obj_tf::ObjRecognised_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obj_tf::ObjRecognised_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detectedTime);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjRecognised_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obj_tf::ObjRecognised_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obj_tf::ObjRecognised_<ContainerAllocator>& v)
  {
    s << indent << "detectedTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.detectedTime);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJ_TF_MESSAGE_OBJRECOGNISED_H
